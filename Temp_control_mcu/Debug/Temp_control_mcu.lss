
Temp_control_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001380  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00001380  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004c  0080017e  0080017e  00001532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000206b  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a94  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001444  00000000  00000000  000041c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000560c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a7  00000000  00000000  0000595c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f61  00000000  00000000  00006003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a8 05 	call	0xb50	; 0xb50 <main>
      8a:	0c 94 be 09 	jmp	0x137c	; 0x137c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:
      92:	97 9a       	sbi	0x12, 7	; 18
      94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
      96:	97 98       	cbi	0x12, 7	; 18
      98:	08 95       	ret

0000009a <lcd_write>:
      9a:	cf 93       	push	r28
      9c:	c8 2f       	mov	r28, r24
      9e:	66 23       	and	r22, r22
      a0:	11 f0       	breq	.+4      	; 0xa6 <lcd_write+0xc>
      a2:	95 9a       	sbi	0x12, 5	; 18
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <lcd_write+0xe>
      a6:	95 98       	cbi	0x12, 5	; 18
      a8:	96 98       	cbi	0x12, 6	; 18
      aa:	bc 9a       	sbi	0x17, 4	; 23
      ac:	bd 9a       	sbi	0x17, 5	; 23
      ae:	be 9a       	sbi	0x17, 6	; 23
      b0:	bf 9a       	sbi	0x17, 7	; 23
      b2:	c7 98       	cbi	0x18, 7	; 24
      b4:	c6 98       	cbi	0x18, 6	; 24
      b6:	c5 98       	cbi	0x18, 5	; 24
      b8:	c4 98       	cbi	0x18, 4	; 24
      ba:	cc 23       	and	r28, r28
      bc:	0c f4       	brge	.+2      	; 0xc0 <lcd_write+0x26>
      be:	c7 9a       	sbi	0x18, 7	; 24
      c0:	c6 fd       	sbrc	r28, 6
      c2:	c6 9a       	sbi	0x18, 6	; 24
      c4:	c5 fd       	sbrc	r28, 5
      c6:	c5 9a       	sbi	0x18, 5	; 24
      c8:	c4 fd       	sbrc	r28, 4
      ca:	c4 9a       	sbi	0x18, 4	; 24
      cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
      d0:	c7 98       	cbi	0x18, 7	; 24
      d2:	c6 98       	cbi	0x18, 6	; 24
      d4:	c5 98       	cbi	0x18, 5	; 24
      d6:	c4 98       	cbi	0x18, 4	; 24
      d8:	c3 fd       	sbrc	r28, 3
      da:	c7 9a       	sbi	0x18, 7	; 24
      dc:	c2 fd       	sbrc	r28, 2
      de:	c6 9a       	sbi	0x18, 6	; 24
      e0:	c1 fd       	sbrc	r28, 1
      e2:	c5 9a       	sbi	0x18, 5	; 24
      e4:	c0 fd       	sbrc	r28, 0
      e6:	c4 9a       	sbi	0x18, 4	; 24
      e8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
      ec:	c4 9a       	sbi	0x18, 4	; 24
      ee:	c5 9a       	sbi	0x18, 5	; 24
      f0:	c6 9a       	sbi	0x18, 6	; 24
      f2:	c7 9a       	sbi	0x18, 7	; 24
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <lcd_read>:
      f8:	88 23       	and	r24, r24
      fa:	11 f0       	breq	.+4      	; 0x100 <lcd_read+0x8>
      fc:	95 9a       	sbi	0x12, 5	; 18
      fe:	01 c0       	rjmp	.+2      	; 0x102 <lcd_read+0xa>
     100:	95 98       	cbi	0x12, 5	; 18
     102:	96 9a       	sbi	0x12, 6	; 18
     104:	bc 98       	cbi	0x17, 4	; 23
     106:	bd 98       	cbi	0x17, 5	; 23
     108:	be 98       	cbi	0x17, 6	; 23
     10a:	bf 98       	cbi	0x17, 7	; 23
     10c:	97 9a       	sbi	0x12, 7	; 18
     10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x18>
     110:	b4 9b       	sbis	0x16, 4	; 22
     112:	02 c0       	rjmp	.+4      	; 0x118 <lcd_read+0x20>
     114:	80 e1       	ldi	r24, 0x10	; 16
     116:	01 c0       	rjmp	.+2      	; 0x11a <lcd_read+0x22>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	b5 99       	sbic	0x16, 5	; 22
     11c:	80 62       	ori	r24, 0x20	; 32
     11e:	b6 99       	sbic	0x16, 6	; 22
     120:	80 64       	ori	r24, 0x40	; 64
     122:	b7 99       	sbic	0x16, 7	; 22
     124:	80 68       	ori	r24, 0x80	; 128
     126:	97 98       	cbi	0x12, 7	; 18
     128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x32>
     12a:	97 9a       	sbi	0x12, 7	; 18
     12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x36>
     12e:	b4 99       	sbic	0x16, 4	; 22
     130:	81 60       	ori	r24, 0x01	; 1
     132:	b5 99       	sbic	0x16, 5	; 22
     134:	82 60       	ori	r24, 0x02	; 2
     136:	b6 99       	sbic	0x16, 6	; 22
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	b7 99       	sbic	0x16, 7	; 22
     13c:	88 60       	ori	r24, 0x08	; 8
     13e:	97 98       	cbi	0x12, 7	; 18
     140:	08 95       	ret

00000142 <lcd_waitbusy>:
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
     148:	88 23       	and	r24, r24
     14a:	dc f3       	brlt	.-10     	; 0x142 <lcd_waitbusy>
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_waitbusy+0xe>
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
     15a:	08 95       	ret

0000015c <lcd_command>:
     15c:	cf 93       	push	r28
     15e:	c8 2f       	mov	r28, r24
     160:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8c 2f       	mov	r24, r28
     168:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <lcd_data>:
     170:	cf 93       	push	r28
     172:	c8 2f       	mov	r28, r24
     174:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <lcd_gotoxy>:
     184:	61 11       	cpse	r22, r1
     186:	04 c0       	rjmp	.+8      	; 0x190 <lcd_gotoxy+0xc>
     188:	80 58       	subi	r24, 0x80	; 128
     18a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     18e:	08 95       	ret
     190:	80 54       	subi	r24, 0x40	; 64
     192:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     196:	08 95       	ret

00000198 <lcd_clrscr>:
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     19e:	08 95       	ret

000001a0 <lcd_putc>:
     1a0:	cf 93       	push	r28
     1a2:	c8 2f       	mov	r28, r24
     1a4:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
     1a8:	ca 30       	cpi	r28, 0x0A	; 10
     1aa:	49 f4       	brne	.+18     	; 0x1be <lcd_putc+0x1e>
     1ac:	80 34       	cpi	r24, 0x40	; 64
     1ae:	10 f0       	brcs	.+4      	; 0x1b4 <lcd_putc+0x14>
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd_putc+0x16>
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	80 58       	subi	r24, 0x80	; 128
     1b8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <lcd_putc+0x26>
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <lcd_puts>:
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	ec 01       	movw	r28, r24
     1d0:	21 96       	adiw	r28, 0x01	; 1
     1d2:	fc 01       	movw	r30, r24
     1d4:	80 81       	ld	r24, Z
     1d6:	88 23       	and	r24, r24
     1d8:	29 f0       	breq	.+10     	; 0x1e4 <lcd_puts+0x1a>
     1da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     1de:	89 91       	ld	r24, Y+
     1e0:	81 11       	cpse	r24, r1
     1e2:	fb cf       	rjmp	.-10     	; 0x1da <lcd_puts+0x10>
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <lcd_init>:
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	18 2f       	mov	r17, r24
     1f2:	8d 9a       	sbi	0x11, 5	; 17
     1f4:	8e 9a       	sbi	0x11, 6	; 17
     1f6:	8f 9a       	sbi	0x11, 7	; 17
     1f8:	bc 9a       	sbi	0x17, 4	; 23
     1fa:	bd 9a       	sbi	0x17, 5	; 23
     1fc:	be 9a       	sbi	0x17, 6	; 23
     1fe:	bf 9a       	sbi	0x17, 7	; 23
     200:	80 e3       	ldi	r24, 0x30	; 48
     202:	93 e7       	ldi	r25, 0x73	; 115
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x1a>
     208:	c5 9a       	sbi	0x18, 5	; 24
     20a:	c4 9a       	sbi	0x18, 4	; 24
     20c:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     210:	80 ef       	ldi	r24, 0xF0	; 240
     212:	93 e2       	ldi	r25, 0x23	; 35
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init+0x2a>
     218:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     21c:	c5 e7       	ldi	r28, 0x75	; 117
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	ce 01       	movw	r24, r28
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x38>
     226:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     22a:	ce 01       	movw	r24, r28
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x42>
     230:	c4 98       	cbi	0x18, 4	; 24
     232:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     236:	21 97       	sbiw	r28, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_init+0x4c>
     23a:	88 e2       	ldi	r24, 0x28	; 40
     23c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     240:	88 e0       	ldi	r24, 0x08	; 8
     242:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     246:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     250:	81 2f       	mov	r24, r17
     252:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	08 95       	ret

0000025e <showTemperature>:
/*
** Display functions
*/

// Main display
void showTemperature() {
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	60 97       	sbiw	r28, 0x10	; 16
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
	lcd_clrscr();
     272:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     276:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <temp>
     27a:	4a e0       	ldi	r20, 0x0A	; 10
     27c:	be 01       	movw	r22, r28
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>

	char adcStr[16];
	itoa(temp, adcStr, 10);
	
	lcd_puts("Temp: ");
     288:	80 e6       	ldi	r24, 0x60	; 96
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_puts(adcStr);
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_putc('.');
     298:	8e e2       	ldi	r24, 0x2E	; 46
     29a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	halfCelsius ? lcd_putc('5') : lcd_putc('0');
     29e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <halfCelsius>
     2a2:	88 23       	and	r24, r24
     2a4:	21 f0       	breq	.+8      	; 0x2ae <showTemperature+0x50>
     2a6:	85 e3       	ldi	r24, 0x35	; 53
     2a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <showTemperature+0x56>
     2ae:	80 e3       	ldi	r24, 0x30	; 48
     2b0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	lcd_putc(223);        //degree symbol
     2b4:	8f ed       	ldi	r24, 0xDF	; 223
     2b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	lcd_puts("C  ");
     2ba:	87 e6       	ldi	r24, 0x67	; 103
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_gotoxy(0, 1);
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_puts("Mode: ");
     2ca:	8b e6       	ldi	r24, 0x6B	; 107
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_puts(mode[modeSelect]);
     2d2:	e0 91 7f 01 	lds	r30, 0x017F	; 0x80017f <modeSelect>
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	ea 54       	subi	r30, 0x4A	; 74
     2de:	fe 4f       	sbci	r31, 0xFE	; 254
     2e0:	80 81       	ld	r24, Z
     2e2:	91 81       	ldd	r25, Z+1	; 0x01
     2e4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_gotoxy(11, 1);
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	8b e0       	ldi	r24, 0x0B	; 11
     2ec:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	if (alarms_mat[4]) lcd_putc(0); // lock icon
     2f0:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <alarms_mat+0x4>
     2f4:	88 23       	and	r24, r24
     2f6:	19 f0       	breq	.+6      	; 0x2fe <showTemperature+0xa0>
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	lcd_gotoxy(13, 1);
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	if (alarms_mat[3]) lcd_putc(1); // bell icon
     306:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <alarms_mat+0x3>
     30a:	88 23       	and	r24, r24
     30c:	19 f0       	breq	.+6      	; 0x314 <showTemperature+0xb6>
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
}
     314:	60 96       	adiw	r28, 0x10	; 16
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <showMsg>:

// Starting message
void showMsg() {
	lcd_clrscr();
     326:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
	lcd_gotoxy(3, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_puts("Welcome to");
     332:	82 e7       	ldi	r24, 0x72	; 114
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_gotoxy(1, 1);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_puts("temp. control");
     342:	8d e7       	ldi	r24, 0x7D	; 125
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     34a:	08 95       	ret

0000034c <showMenu>:
}

void showMenu() {
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <showMenu+0x6>
     352:	00 d0       	rcall	.+0      	; 0x354 <showMenu+0x8>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	lcd_clrscr();
     358:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
	lcd_putc('<');
     35c:	8c e3       	ldi	r24, 0x3C	; 60
     35e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	
	// Menu items
	if (!subMenu){
     362:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     366:	81 11       	cpse	r24, r1
     368:	23 c0       	rjmp	.+70     	; 0x3b0 <showMenu+0x64>
		lcd_gotoxy((16 - strlen(menu[mMode])) / 2, 0);
     36a:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <mMode>
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	e1 56       	subi	r30, 0x61	; 97
     376:	fe 4f       	sbci	r31, 0xFE	; 254
     378:	01 90       	ld	r0, Z+
     37a:	f0 81       	ld	r31, Z
     37c:	e0 2d       	mov	r30, r0
     37e:	df 01       	movw	r26, r30
     380:	0d 90       	ld	r0, X+
     382:	00 20       	and	r0, r0
     384:	e9 f7       	brne	.-6      	; 0x380 <showMenu+0x34>
     386:	cf 01       	movw	r24, r30
     388:	8a 1b       	sub	r24, r26
     38a:	9b 0b       	sbc	r25, r27
     38c:	41 96       	adiw	r24, 0x11	; 17
     38e:	96 95       	lsr	r25
     390:	87 95       	ror	r24
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts(menu[mMode]);
     398:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <mMode>
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	e1 56       	subi	r30, 0x61	; 97
     3a4:	fe 4f       	sbci	r31, 0xFE	; 254
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     3ae:	69 c1       	rjmp	.+722    	; 0x682 <__stack+0x223>
		
	// 'Variables' subMenu items
	} else if (mMode == 0) {
     3b0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mMode>
     3b4:	81 11       	cpse	r24, r1
     3b6:	90 c0       	rjmp	.+288    	; 0x4d8 <__stack+0x79>
		lcd_gotoxy((16 - strlen(variables[mVar])) / 2, 0);
     3b8:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	e2 54       	subi	r30, 0x42	; 66
     3c4:	fe 4f       	sbci	r31, 0xFE	; 254
     3c6:	01 90       	ld	r0, Z+
     3c8:	f0 81       	ld	r31, Z
     3ca:	e0 2d       	mov	r30, r0
     3cc:	df 01       	movw	r26, r30
     3ce:	0d 90       	ld	r0, X+
     3d0:	00 20       	and	r0, r0
     3d2:	e9 f7       	brne	.-6      	; 0x3ce <showMenu+0x82>
     3d4:	cf 01       	movw	r24, r30
     3d6:	8a 1b       	sub	r24, r26
     3d8:	9b 0b       	sbc	r25, r27
     3da:	41 96       	adiw	r24, 0x11	; 17
     3dc:	96 95       	lsr	r25
     3de:	87 95       	ror	r24
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts(variables[mVar]);
     3e6:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	e2 54       	subi	r30, 0x42	; 66
     3f2:	fe 4f       	sbci	r31, 0xFE	; 254
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		char buffer[4];
		
		if (!mSelect) {
     3fc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     400:	81 11       	cpse	r24, r1
     402:	32 c0       	rjmp	.+100    	; 0x468 <__stack+0x9>
			lcd_gotoxy(6, 1);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	86 e0       	ldi	r24, 0x06	; 6
     408:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			if (mVar == 0 || mVar == 1 || mVar == 2) {
     40c:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     410:	e3 30       	cpi	r30, 0x03	; 3
     412:	a0 f4       	brcc	.+40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	e7 57       	subi	r30, 0x77	; 119
     418:	fe 4f       	sbci	r31, 0xFE	; 254
     41a:	80 81       	ld	r24, Z
     41c:	4a e0       	ldi	r20, 0x0A	; 10
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     42a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     42e:	8f ed       	ldi	r24, 0xDF	; 223
     430:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     434:	83 e4       	ldi	r24, 0x43	; 67
     436:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     43a:	23 c1       	rjmp	.+582    	; 0x682 <__stack+0x223>
			} else {
				lcd_putc(' ');
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     442:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	e7 57       	subi	r30, 0x77	; 119
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	80 81       	ld	r24, Z
     44e:	4a e0       	ldi	r20, 0x0A	; 10
     450:	be 01       	movw	r22, r28
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     45c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     460:	80 e2       	ldi	r24, 0x20	; 32
     462:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     466:	0d c1       	rjmp	.+538    	; 0x682 <__stack+0x223>
			}
		} else {
			lcd_gotoxy(5, 1);
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			lcd_putc('<');
     470:	8c e3       	ldi	r24, 0x3C	; 60
     472:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			if (mVar == 0 || mVar == 1 || mVar == 2) {
     476:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     47a:	e3 30       	cpi	r30, 0x03	; 3
     47c:	a0 f4       	brcc	.+40     	; 0x4a6 <__stack+0x47>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	e7 57       	subi	r30, 0x77	; 119
     482:	fe 4f       	sbci	r31, 0xFE	; 254
     484:	80 81       	ld	r24, Z
     486:	4a e0       	ldi	r20, 0x0A	; 10
     488:	be 01       	movw	r22, r28
     48a:	6f 5f       	subi	r22, 0xFF	; 255
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     494:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     498:	8f ed       	ldi	r24, 0xDF	; 223
     49a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     49e:	83 e4       	ldi	r24, 0x43	; 67
     4a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <__stack+0x71>
			} else {
				lcd_putc(' ');
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     4ac:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	e7 57       	subi	r30, 0x77	; 119
     4b4:	fe 4f       	sbci	r31, 0xFE	; 254
     4b6:	80 81       	ld	r24, Z
     4b8:	4a e0       	ldi	r20, 0x0A	; 10
     4ba:	be 01       	movw	r22, r28
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     4c6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     4ca:	80 e2       	ldi	r24, 0x20	; 32
     4cc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			}
			lcd_putc('>');
     4d0:	8e e3       	ldi	r24, 0x3E	; 62
     4d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     4d6:	d5 c0       	rjmp	.+426    	; 0x682 <__stack+0x223>
		}
		
	// 'Modes' subMenu items
	} else if (mMode == 1) {
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	89 f5       	brne	.+98     	; 0x53e <__stack+0xdf>
		lcd_gotoxy(5, 0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Mode:");
     4e4:	8b e8       	ldi	r24, 0x8B	; 139
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy((14 - strlen(mode[mVar])) / 2, 1);
     4ec:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ea 54       	subi	r30, 0x4A	; 74
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	01 90       	ld	r0, Z+
     4fc:	f0 81       	ld	r31, Z
     4fe:	e0 2d       	mov	r30, r0
     500:	df 01       	movw	r26, r30
     502:	0d 90       	ld	r0, X+
     504:	00 20       	and	r0, r0
     506:	e9 f7       	brne	.-6      	; 0x502 <__stack+0xa3>
     508:	cf 01       	movw	r24, r30
     50a:	8a 1b       	sub	r24, r26
     50c:	9b 0b       	sbc	r25, r27
     50e:	0f 96       	adiw	r24, 0x0f	; 15
     510:	96 95       	lsr	r25
     512:	87 95       	ror	r24
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_putc('<');
     51a:	8c e3       	ldi	r24, 0x3C	; 60
     51c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		lcd_puts(mode[mVar]);
     520:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ea 54       	subi	r30, 0x4A	; 74
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_putc('>');
     536:	8e e3       	ldi	r24, 0x3E	; 62
     538:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     53c:	a2 c0       	rjmp	.+324    	; 0x682 <__stack+0x223>
		
	// 'Alarms' subMenu items
	} else {
		lcd_gotoxy((16 - strlen(alarms[mVar])) / 2, 0);
     53e:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	e6 55       	subi	r30, 0x56	; 86
     54a:	fe 4f       	sbci	r31, 0xFE	; 254
     54c:	01 90       	ld	r0, Z+
     54e:	f0 81       	ld	r31, Z
     550:	e0 2d       	mov	r30, r0
     552:	df 01       	movw	r26, r30
     554:	0d 90       	ld	r0, X+
     556:	00 20       	and	r0, r0
     558:	e9 f7       	brne	.-6      	; 0x554 <__stack+0xf5>
     55a:	cf 01       	movw	r24, r30
     55c:	8a 1b       	sub	r24, r26
     55e:	9b 0b       	sbc	r25, r27
     560:	41 96       	adiw	r24, 0x11	; 17
     562:	96 95       	lsr	r25
     564:	87 95       	ror	r24
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts(alarms[mVar]);
     56c:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e6 55       	subi	r30, 0x56	; 86
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		char buffer[4];
		
		if (!mSelect) {
     582:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     586:	81 11       	cpse	r24, r1
     588:	3c c0       	rjmp	.+120    	; 0x602 <__stack+0x1a3>
			lcd_gotoxy(6, 1);
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	86 e0       	ldi	r24, 0x06	; 6
     58e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			if (mVar == 1 || mVar == 2) {
     592:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	8e 0f       	add	r24, r30
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	a0 f4       	brcc	.+40     	; 0x5c6 <__stack+0x167>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 57       	subi	r30, 0x7C	; 124
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	80 81       	ld	r24, Z
     5a6:	4a e0       	ldi	r20, 0x0A	; 10
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     5b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     5b8:	8f ed       	ldi	r24, 0xDF	; 223
     5ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     5be:	83 e4       	ldi	r24, 0x43	; 67
     5c0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     5c4:	5e c0       	rjmp	.+188    	; 0x682 <__stack+0x223>
			} else {
				lcd_putc(' ');
     5c6:	80 e2       	ldi	r24, 0x20	; 32
     5c8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     5cc:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	ec 57       	subi	r30, 0x7C	; 124
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	80 81       	ld	r24, Z
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     5e6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     5ea:	80 e2       	ldi	r24, 0x20	; 32
     5ec:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				if (mVar == 3) lcd_putc(' ');
     5f0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     5f4:	83 30       	cpi	r24, 0x03	; 3
     5f6:	09 f0       	breq	.+2      	; 0x5fa <__stack+0x19b>
     5f8:	44 c0       	rjmp	.+136    	; 0x682 <__stack+0x223>
     5fa:	80 e2       	ldi	r24, 0x20	; 32
     5fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     600:	40 c0       	rjmp	.+128    	; 0x682 <__stack+0x223>
			}
		} else {
			lcd_gotoxy(5, 1);
     602:	61 e0       	ldi	r22, 0x01	; 1
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			lcd_putc('<');
     60a:	8c e3       	ldi	r24, 0x3C	; 60
     60c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			if (mVar == 1 || mVar == 2) {
     610:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	8e 0f       	add	r24, r30
     618:	82 30       	cpi	r24, 0x02	; 2
     61a:	a0 f4       	brcc	.+40     	; 0x644 <__stack+0x1e5>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	ec 57       	subi	r30, 0x7C	; 124
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	80 81       	ld	r24, Z
     624:	4a e0       	ldi	r20, 0x0A	; 10
     626:	be 01       	movw	r22, r28
     628:	6f 5f       	subi	r22, 0xFF	; 255
     62a:	7f 4f       	sbci	r23, 0xFF	; 255
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     632:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     636:	8f ed       	ldi	r24, 0xDF	; 223
     638:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     63c:	83 e4       	ldi	r24, 0x43	; 67
     63e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     642:	1c c0       	rjmp	.+56     	; 0x67c <__stack+0x21d>
			} else {
				lcd_putc(' ');
     644:	80 e2       	ldi	r24, 0x20	; 32
     646:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     64a:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	ec 57       	subi	r30, 0x7C	; 124
     652:	fe 4f       	sbci	r31, 0xFE	; 254
     654:	80 81       	ld	r24, Z
     656:	4a e0       	ldi	r20, 0x0A	; 10
     658:	be 01       	movw	r22, r28
     65a:	6f 5f       	subi	r22, 0xFF	; 255
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 89 09 	call	0x1312	; 0x1312 <__itoa_ncheck>
     664:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     668:	80 e2       	ldi	r24, 0x20	; 32
     66a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				if (mVar == 3) lcd_putc(' ');
     66e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     672:	83 30       	cpi	r24, 0x03	; 3
     674:	19 f4       	brne	.+6      	; 0x67c <__stack+0x21d>
     676:	80 e2       	ldi	r24, 0x20	; 32
     678:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			}
			lcd_putc('>');
     67c:	8e e3       	ldi	r24, 0x3E	; 62
     67e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		}
	}
	
	lcd_gotoxy(15, 0);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	8f e0       	ldi	r24, 0x0F	; 15
     686:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_putc('>');
     68a:	8e e3       	ldi	r24, 0x3E	; 62
     68c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
}
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <resetPsw>:

void resetPsw(char *tmpPsw){
     69e:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < 4; i++){
		tmpPsw[i] = '0';
     6a0:	80 e3       	ldi	r24, 0x30	; 48
     6a2:	80 83       	st	Z, r24
     6a4:	81 83       	std	Z+1, r24	; 0x01
     6a6:	82 83       	std	Z+2, r24	; 0x02
     6a8:	83 83       	std	Z+3, r24	; 0x03
     6aa:	08 95       	ret

000006ac <setPsw>:
	}
}

void setPsw() {
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
	if (!pswSet) {
     6b4:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <pswSet>
     6b8:	81 11       	cpse	r24, r1
     6ba:	36 c0       	rjmp	.+108    	; 0x728 <setPsw+0x7c>
		lcd_clrscr();
     6bc:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(1, 0);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Set password:");
     6c8:	81 e9       	ldi	r24, 0x91	; 145
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	84 e0       	ldi	r24, 0x04	; 4
     6d4:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
     6d8:	03 e9       	ldi	r16, 0x93	; 147
     6da:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t i = 0; i < 4; i++){
     6dc:	c0 e0       	ldi	r28, 0x00	; 0
			if (mVar == i) {
     6de:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     6e2:	8c 13       	cpse	r24, r28
     6e4:	17 c0       	rjmp	.+46     	; 0x714 <setPsw+0x68>
				lcd_putc(mSelect ? '<' : ' ');
     6e6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     6ea:	81 11       	cpse	r24, r1
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <setPsw+0x46>
     6ee:	80 e2       	ldi	r24, 0x20	; 32
     6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <setPsw+0x48>
     6f2:	8c e3       	ldi	r24, 0x3C	; 60
     6f4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(password[i]);
     6f8:	f8 01       	movw	r30, r16
     6fa:	80 81       	ld	r24, Z
     6fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(mSelect ? '>' : ' ');
     700:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     704:	81 11       	cpse	r24, r1
     706:	02 c0       	rjmp	.+4      	; 0x70c <setPsw+0x60>
     708:	80 e2       	ldi	r24, 0x20	; 32
     70a:	01 c0       	rjmp	.+2      	; 0x70e <setPsw+0x62>
     70c:	8e e3       	ldi	r24, 0x3E	; 62
     70e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     712:	04 c0       	rjmp	.+8      	; 0x71c <setPsw+0x70>
			} else lcd_putc(password[i]);
     714:	f8 01       	movw	r30, r16
     716:	80 81       	ld	r24, Z
     718:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		lcd_clrscr();
		lcd_gotoxy(1, 0);
		lcd_puts("Set password:");
		lcd_gotoxy(4, 1);
		
		for (uint8_t i = 0; i < 4; i++){
     71c:	cf 5f       	subi	r28, 0xFF	; 255
     71e:	0f 5f       	subi	r16, 0xFF	; 255
     720:	1f 4f       	sbci	r17, 0xFF	; 255
     722:	c4 30       	cpi	r28, 0x04	; 4
     724:	e1 f6       	brne	.-72     	; 0x6de <setPsw+0x32>
     726:	37 c0       	rjmp	.+110    	; 0x796 <setPsw+0xea>
				lcd_putc(mSelect ? '<' : ' ');
				lcd_putc(password[i]);
				lcd_putc(mSelect ? '>' : ' ');
			} else lcd_putc(password[i]);
		}
	} else if (pswUse) {
     728:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <pswUse>
     72c:	88 23       	and	r24, r24
     72e:	09 f1       	breq	.+66     	; 0x772 <setPsw+0xc6>
		lcd_clrscr();
     730:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(2, 0);
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Password set");
     73c:	8f e9       	ldi	r24, 0x9F	; 159
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     744:	61 e0       	ldi	r22, 0x01	; 1
     746:	84 e0       	ldi	r24, 0x04	; 4
     748:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("=>");
     74c:	8c ea       	ldi	r24, 0xAC	; 172
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     754:	c3 e9       	ldi	r28, 0x93	; 147
     756:	d1 e0       	ldi	r29, 0x01	; 1
     758:	07 e9       	ldi	r16, 0x97	; 151
     75a:	11 e0       	ldi	r17, 0x01	; 1
		for (uint8_t i = 0; i < 4; i++){
			lcd_putc(password[i]);
     75c:	89 91       	ld	r24, Y+
     75e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		lcd_clrscr();
		lcd_gotoxy(2, 0);
		lcd_puts("Password set");
		lcd_gotoxy(4, 1);
		lcd_puts("=>");
		for (uint8_t i = 0; i < 4; i++){
     762:	c0 17       	cp	r28, r16
     764:	d1 07       	cpc	r29, r17
     766:	d1 f7       	brne	.-12     	; 0x75c <setPsw+0xb0>
			lcd_putc(password[i]);
		}
		lcd_puts("<=");
     768:	8f ea       	ldi	r24, 0xAF	; 175
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     770:	12 c0       	rjmp	.+36     	; 0x796 <setPsw+0xea>
	} else {
		lcd_clrscr();
     772:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(2, 0);
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Password not");
     77e:	82 eb       	ldi	r24, 0xB2	; 178
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(6, 1);
     786:	61 e0       	ldi	r22, 0x01	; 1
     788:	86 e0       	ldi	r24, 0x06	; 6
     78a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("used");
     78e:	8f eb       	ldi	r24, 0xBF	; 191
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	}
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	0f 91       	pop	r16
     79e:	08 95       	ret

000007a0 <enterPsw>:

void enterPsw() {
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
	if (!pswError) {
     7a6:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <pswError>
     7aa:	81 11       	cpse	r24, r1
     7ac:	32 c0       	rjmp	.+100    	; 0x812 <enterPsw+0x72>
		lcd_clrscr();
     7ae:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_puts("Enter password:");
     7b2:	84 ec       	ldi	r24, 0xC4	; 196
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
     7c2:	0f e8       	ldi	r16, 0x8F	; 143
     7c4:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t i = 0; i < 4; i++){
     7c6:	c0 e0       	ldi	r28, 0x00	; 0
			if (mVar == i) {
     7c8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     7cc:	8c 13       	cpse	r24, r28
     7ce:	17 c0       	rjmp	.+46     	; 0x7fe <enterPsw+0x5e>
				lcd_putc(mSelect ? '<' : ' ');
     7d0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     7d4:	81 11       	cpse	r24, r1
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <enterPsw+0x3c>
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	01 c0       	rjmp	.+2      	; 0x7de <enterPsw+0x3e>
     7dc:	8c e3       	ldi	r24, 0x3C	; 60
     7de:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(tmpPassword[i]);
     7e2:	f8 01       	movw	r30, r16
     7e4:	80 81       	ld	r24, Z
     7e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(mSelect ? '>' : ' ');
     7ea:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     7ee:	81 11       	cpse	r24, r1
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <enterPsw+0x56>
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <enterPsw+0x58>
     7f6:	8e e3       	ldi	r24, 0x3E	; 62
     7f8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <enterPsw+0x66>
			} else lcd_putc(tmpPassword[i]);
     7fe:	f8 01       	movw	r30, r16
     800:	80 81       	ld	r24, Z
     802:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	if (!pswError) {
		lcd_clrscr();
		lcd_puts("Enter password:");
		lcd_gotoxy(4, 1);
		
		for (uint8_t i = 0; i < 4; i++){
     806:	cf 5f       	subi	r28, 0xFF	; 255
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
     80c:	c4 30       	cpi	r28, 0x04	; 4
     80e:	e1 f6       	brne	.-72     	; 0x7c8 <enterPsw+0x28>
     810:	12 c0       	rjmp	.+36     	; 0x836 <enterPsw+0x96>
				lcd_putc(tmpPassword[i]);
				lcd_putc(mSelect ? '>' : ' ');
			} else lcd_putc(tmpPassword[i]);
		}
	} else {
		lcd_clrscr();
     812:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(3, 0);
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Incorrect");
     81e:	84 ed       	ldi	r24, 0xD4	; 212
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("password");
     82e:	8e ed       	ldi	r24, 0xDE	; 222
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	}
}
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	08 95       	ret

0000083e <checkPsw>:

uint8_t checkPsw(const char *toCheck) {
	for (uint8_t i = 0; i < 4; i++) {
		if (toCheck[i] != password[i]) return 0;
     83e:	fc 01       	movw	r30, r24
     840:	30 81       	ld	r19, Z
     842:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <password>
     846:	32 13       	cpse	r19, r18
     848:	0d c0       	rjmp	.+26     	; 0x864 <checkPsw+0x26>
     84a:	31 96       	adiw	r30, 0x01	; 1
     84c:	a4 e9       	ldi	r26, 0x94	; 148
     84e:	b1 e0       	ldi	r27, 0x01	; 1
     850:	04 96       	adiw	r24, 0x04	; 4
     852:	31 91       	ld	r19, Z+
     854:	2d 91       	ld	r18, X+
     856:	32 13       	cpse	r19, r18
     858:	07 c0       	rjmp	.+14     	; 0x868 <checkPsw+0x2a>
		lcd_puts("password");
	}
}

uint8_t checkPsw(const char *toCheck) {
	for (uint8_t i = 0; i < 4; i++) {
     85a:	e8 17       	cp	r30, r24
     85c:	f9 07       	cpc	r31, r25
     85e:	c9 f7       	brne	.-14     	; 0x852 <checkPsw+0x14>
		if (toCheck[i] != password[i]) return 0;
	}
	return 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret
	}
}

uint8_t checkPsw(const char *toCheck) {
	for (uint8_t i = 0; i < 4; i++) {
		if (toCheck[i] != password[i]) return 0;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	08 95       	ret
     868:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
     86a:	08 95       	ret

0000086c <writeOnLCD>:

void writeOnLCD() {
	lcd_clrscr();
     86c:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
	
	switch (fMode){
     870:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <fMode>
     874:	82 30       	cpi	r24, 0x02	; 2
     876:	89 f0       	breq	.+34     	; 0x89a <writeOnLCD+0x2e>
     878:	28 f4       	brcc	.+10     	; 0x884 <writeOnLCD+0x18>
     87a:	88 23       	and	r24, r24
     87c:	41 f0       	breq	.+16     	; 0x88e <writeOnLCD+0x22>
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	49 f0       	breq	.+18     	; 0x894 <writeOnLCD+0x28>
     882:	08 95       	ret
     884:	83 30       	cpi	r24, 0x03	; 3
     886:	61 f0       	breq	.+24     	; 0x8a0 <writeOnLCD+0x34>
     888:	84 30       	cpi	r24, 0x04	; 4
     88a:	69 f0       	breq	.+26     	; 0x8a6 <writeOnLCD+0x3a>
     88c:	08 95       	ret
		case 0:
			showMsg();
     88e:	0e 94 93 01 	call	0x326	; 0x326 <showMsg>
		break;
     892:	08 95       	ret
		case 1:
			showTemperature();
     894:	0e 94 2f 01 	call	0x25e	; 0x25e <showTemperature>
		break;
     898:	08 95       	ret
		case 2:
			showMenu();
     89a:	0e 94 a6 01 	call	0x34c	; 0x34c <showMenu>
		break;
     89e:	08 95       	ret
		case 3:
			setPsw();
     8a0:	0e 94 56 03 	call	0x6ac	; 0x6ac <setPsw>
		break;
     8a4:	08 95       	ret
		case 4:
			enterPsw();
     8a6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <enterPsw>
     8aa:	08 95       	ret

000008ac <__vector_19>:

/*
** ISR functions
*/

ISR(TIMER0_COMP_vect) {
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31

	if (tm == 100) {
		tm = 0;
		writeOnLCD();
	}*/
	writeOnLCD();
     8ce:	0e 94 36 04 	call	0x86c	; 0x86c <writeOnLCD>
	
	if(updateLCD == 1) {
     8d2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <updateLCD>
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	d9 f4       	brne	.+54     	; 0x910 <__vector_19+0x64>
		uint32_t temperature;

		temperature = curAvg << 8;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <curAvg>
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
		temperature >>= 9;
     8e6:	07 2e       	mov	r0, r23
     8e8:	79 e0       	ldi	r23, 0x09	; 9
     8ea:	b6 95       	lsr	r27
     8ec:	a7 95       	ror	r26
     8ee:	97 95       	ror	r25
     8f0:	87 95       	ror	r24
     8f2:	7a 95       	dec	r23
     8f4:	d1 f7       	brne	.-12     	; 0x8ea <__vector_19+0x3e>
     8f6:	70 2d       	mov	r23, r0
		halfCelsius = temperature & 1;
     8f8:	28 2f       	mov	r18, r24
     8fa:	21 70       	andi	r18, 0x01	; 1
     8fc:	20 93 a9 01 	sts	0x01A9, r18	; 0x8001a9 <halfCelsius>
		temperature >>= 1;
		temp = temperature;
     900:	b6 95       	lsr	r27
     902:	a7 95       	ror	r26
     904:	97 95       	ror	r25
     906:	87 95       	ror	r24
     908:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <temp>
		updateLCD = 0;
     90c:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <updateLCD>
	}
}
     910:	ff 91       	pop	r31
     912:	ef 91       	pop	r30
     914:	bf 91       	pop	r27
     916:	af 91       	pop	r26
     918:	9f 91       	pop	r25
     91a:	8f 91       	pop	r24
     91c:	7f 91       	pop	r23
     91e:	6f 91       	pop	r22
     920:	5f 91       	pop	r21
     922:	4f 91       	pop	r20
     924:	3f 91       	pop	r19
     926:	2f 91       	pop	r18
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0
     92e:	1f 90       	pop	r1
     930:	18 95       	reti

00000932 <nonBlockingDebounce>:

void nonBlockingDebounce() {
	GICR &= ~_BV(INT0);
     932:	8b b7       	in	r24, 0x3b	; 59
     934:	8f 7b       	andi	r24, 0xBF	; 191
     936:	8b bf       	out	0x3b, r24	; 59
	sei();
     938:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	8f e3       	ldi	r24, 0x3F	; 63
     93e:	9b e0       	ldi	r25, 0x0B	; 11
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <nonBlockingDebounce+0xe>
     948:	00 c0       	rjmp	.+0      	; 0x94a <nonBlockingDebounce+0x18>
     94a:	00 00       	nop

	_delay_ms(500);
	GIFR = _BV(INTF0);
     94c:	80 e4       	ldi	r24, 0x40	; 64
     94e:	8a bf       	out	0x3a, r24	; 58
	GICR |= _BV(INT0);
     950:	8b b7       	in	r24, 0x3b	; 59
     952:	80 64       	ori	r24, 0x40	; 64
     954:	8b bf       	out	0x3b, r24	; 59

	cli();
     956:	f8 94       	cli
     958:	08 95       	ret

0000095a <__vector_1>:
}

ISR(INT0_vect) {
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	0f 92       	push	r0
     962:	11 24       	eor	r1, r1
     964:	2f 93       	push	r18
     966:	3f 93       	push	r19
     968:	4f 93       	push	r20
     96a:	5f 93       	push	r21
     96c:	6f 93       	push	r22
     96e:	7f 93       	push	r23
     970:	8f 93       	push	r24
     972:	9f 93       	push	r25
     974:	af 93       	push	r26
     976:	bf 93       	push	r27
     978:	ef 93       	push	r30
     97a:	ff 93       	push	r31
	
	switch (fMode) {
     97c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <fMode>
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	f9 f0       	breq	.+62     	; 0x9c2 <__vector_1+0x68>
     984:	28 f4       	brcc	.+10     	; 0x990 <__vector_1+0x36>
     986:	88 23       	and	r24, r24
     988:	41 f0       	breq	.+16     	; 0x99a <__vector_1+0x40>
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	51 f0       	breq	.+20     	; 0x9a2 <__vector_1+0x48>
     98e:	39 c0       	rjmp	.+114    	; 0xa02 <__vector_1+0xa8>
     990:	83 30       	cpi	r24, 0x03	; 3
     992:	51 f1       	breq	.+84     	; 0x9e8 <__vector_1+0x8e>
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	81 f1       	breq	.+96     	; 0x9f8 <__vector_1+0x9e>
     998:	34 c0       	rjmp	.+104    	; 0xa02 <__vector_1+0xa8>
		// fMode 0 is only at the start
		// Set up password
		case 0:
			fMode = 3;
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <fMode>
		break;
     9a0:	30 c0       	rjmp	.+96     	; 0xa02 <__vector_1+0xa8>
		
		// Switch between main and menu display
		case 1:
			if (alarms_mat[4] & lock) break;
     9a2:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <alarms_mat+0x4>
     9a6:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <lock>
     9aa:	89 23       	and	r24, r25
     9ac:	51 f5       	brne	.+84     	; 0xa02 <__vector_1+0xa8>
			fMode = !mAccess ? 4 : 2;
     9ae:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <mAccess>
     9b2:	88 23       	and	r24, r24
     9b4:	11 f0       	breq	.+4      	; 0x9ba <__vector_1+0x60>
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__vector_1+0x62>
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <fMode>
		break;
     9c0:	20 c0       	rjmp	.+64     	; 0xa02 <__vector_1+0xa8>
		case 2:
			fMode = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <fMode>
			mAccess = !pswUse;
     9c8:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <pswUse>
     9cc:	91 11       	cpse	r25, r1
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <mAccess>
			mMode = 0;
     9d4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <mMode>
			mSelect = 0;
     9d8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <mSelect>
			subMenu = 0;
     9dc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
			update = 1;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <update>
		break;
     9e6:	0d c0       	rjmp	.+26     	; 0xa02 <__vector_1+0xa8>
		
		// After password go to main display
		case 3:
			if (pswSet) fMode = 1;
     9e8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <pswSet>
     9ec:	88 23       	and	r24, r24
     9ee:	49 f0       	breq	.+18     	; 0xa02 <__vector_1+0xa8>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <fMode>
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <__vector_1+0xa8>
		break;
		
		// Exit error screen
		case 4:
			pswError = 0;
     9f8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <pswError>
			fMode = 1;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <fMode>
		break;	
	}

	writeOnLCD();
     a02:	0e 94 36 04 	call	0x86c	; 0x86c <writeOnLCD>

	nonBlockingDebounce();
     a06:	0e 94 99 04 	call	0x932	; 0x932 <nonBlockingDebounce>
}
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <init_temp_ma>:
// Initialize moving average structure
void init_temp_ma(movAvg_t *ma, int8_t totSamples)
{
	int i;
	
	ma->samIdx = 0;
     a2c:	fc 01       	movw	r30, r24
     a2e:	10 82       	st	Z, r1
	ma->sum = 0;
     a30:	11 82       	std	Z+1, r1	; 0x01
     a32:	12 82       	std	Z+2, r1	; 0x02
     a34:	13 82       	std	Z+3, r1	; 0x03
     a36:	14 82       	std	Z+4, r1	; 0x04
	for(i=0; i<totSamples; i++){
     a38:	16 16       	cp	r1, r22
     a3a:	64 f4       	brge	.+24     	; 0xa54 <init_temp_ma+0x28>
     a3c:	35 96       	adiw	r30, 0x05	; 5
     a3e:	66 0f       	add	r22, r22
     a40:	77 0b       	sbc	r23, r23
     a42:	6b 5f       	subi	r22, 0xFB	; 251
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
     a46:	86 0f       	add	r24, r22
     a48:	97 1f       	adc	r25, r23
		ma->samples[i] = 0;
     a4a:	11 92       	st	Z+, r1
     a4c:	11 92       	st	Z+, r1
{
	int i;
	
	ma->samIdx = 0;
	ma->sum = 0;
	for(i=0; i<totSamples; i++){
     a4e:	e8 17       	cp	r30, r24
     a50:	f9 07       	cpc	r31, r25
     a52:	d9 f7       	brne	.-10     	; 0xa4a <init_temp_ma+0x1e>
     a54:	08 95       	ret

00000a56 <getMovAvg>:
	}
}

// Calculate moving average
uint16_t getMovAvg(uint16_t newSample, movAvg_t *ma)
{
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	9c 01       	movw	r18, r24
     a5c:	fb 01       	movw	r30, r22
	// Remove oldest sample from the sum
	ma->sum -= ma->samples[ma->samIdx];
     a5e:	40 81       	ld	r20, Z
	// Add the new sample to the sum and to samples array
	ma->sum += newSample;
     a60:	81 81       	ldd	r24, Z+1	; 0x01
     a62:	92 81       	ldd	r25, Z+2	; 0x02
     a64:	a3 81       	ldd	r26, Z+3	; 0x03
     a66:	b4 81       	ldd	r27, Z+4	; 0x04
     a68:	82 0f       	add	r24, r18
     a6a:	93 1f       	adc	r25, r19
     a6c:	a1 1d       	adc	r26, r1
     a6e:	b1 1d       	adc	r27, r1

// Calculate moving average
uint16_t getMovAvg(uint16_t newSample, movAvg_t *ma)
{
	// Remove oldest sample from the sum
	ma->sum -= ma->samples[ma->samIdx];
     a70:	c4 2f       	mov	r28, r20
     a72:	cc 0f       	add	r28, r28
     a74:	dd 0b       	sbc	r29, r29
     a76:	c6 0f       	add	r28, r22
     a78:	d7 1f       	adc	r29, r23
	// Add the new sample to the sum and to samples array
	ma->sum += newSample;
     a7a:	6d 81       	ldd	r22, Y+5	; 0x05
     a7c:	7e 81       	ldd	r23, Y+6	; 0x06
     a7e:	86 1b       	sub	r24, r22
     a80:	97 0b       	sbc	r25, r23
     a82:	a1 09       	sbc	r26, r1
     a84:	b1 09       	sbc	r27, r1
     a86:	81 83       	std	Z+1, r24	; 0x01
     a88:	92 83       	std	Z+2, r25	; 0x02
     a8a:	a3 83       	std	Z+3, r26	; 0x03
     a8c:	b4 83       	std	Z+4, r27	; 0x04
	ma->samples[ma->samIdx] = newSample;
     a8e:	3e 83       	std	Y+6, r19	; 0x06
     a90:	2d 83       	std	Y+5, r18	; 0x05
	// Increment index and roll down to 0 if necessary
	ma->samIdx++;
     a92:	4f 5f       	subi	r20, 0xFF	; 255
	if( ma->samIdx == TOT_SAMPLES ){
     a94:	40 32       	cpi	r20, 0x20	; 32
     a96:	11 f0       	breq	.+4      	; 0xa9c <getMovAvg+0x46>
	ma->sum -= ma->samples[ma->samIdx];
	// Add the new sample to the sum and to samples array
	ma->sum += newSample;
	ma->samples[ma->samIdx] = newSample;
	// Increment index and roll down to 0 if necessary
	ma->samIdx++;
     a98:	40 83       	st	Z, r20
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <getMovAvg+0x48>
	if( ma->samIdx == TOT_SAMPLES ){
		ma->samIdx = 0;
     a9c:	10 82       	st	Z, r1
	}

	// return moving average - divide the sum by 2^MOVAVG_SHIFT
	return ma->sum >> MOVAVG_SHIFT;
     a9e:	68 94       	set
     aa0:	14 f8       	bld	r1, 4
     aa2:	b6 95       	lsr	r27
     aa4:	a7 95       	ror	r26
     aa6:	97 95       	ror	r25
     aa8:	87 95       	ror	r24
     aaa:	16 94       	lsr	r1
     aac:	d1 f7       	brne	.-12     	; 0xaa2 <getMovAvg+0x4c>
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <readAdc>:

// Read ADC value
uint16_t readAdc(uint8_t channel)
{
	//choose channel
	ADMUX &= ~(0x7);
     ab4:	97 b1       	in	r25, 0x07	; 7
     ab6:	98 7f       	andi	r25, 0xF8	; 248
     ab8:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
     aba:	97 b1       	in	r25, 0x07	; 7
     abc:	89 2b       	or	r24, r25
     abe:	87 b9       	out	0x07, r24	; 7
	
	//start conversion
	ADCSRA |= _BV(ADSC);
     ac0:	36 9a       	sbi	0x06, 6	; 6

	//wait until conversion completes
	while (ADCSRA & _BV(ADSC) );
     ac2:	36 99       	sbic	0x06, 6	; 6
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <readAdc+0xe>
	
	return ADCW;
     ac6:	84 b1       	in	r24, 0x04	; 4
     ac8:	95 b1       	in	r25, 0x05	; 5
}
     aca:	08 95       	ret

00000acc <init_adc>:

void init_adc()
{
	//adc enable, prescaler=64 -> clk=115200
	ADCSRA = _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1);
     acc:	86 e8       	ldi	r24, 0x86	; 134
     ace:	86 b9       	out	0x06, r24	; 6
	//2.56V reference voltage
	ADMUX = _BV(REFS0) | _BV(REFS1);
     ad0:	80 ec       	ldi	r24, 0xC0	; 192
     ad2:	87 b9       	out	0x07, r24	; 7
     ad4:	08 95       	ret

00000ad6 <init_spec_char>:
}

void init_spec_char(){
	lcd_command(0x40);	// set CGRAM address for first character
     ad6:	80 e4       	ldi	r24, 0x40	; 64
     ad8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	
	// lock icon
	lcd_data(0x0e); 
     adc:	8e e0       	ldi	r24, 0x0E	; 14
     ade:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x11); 
     ae2:	81 e1       	ldi	r24, 0x11	; 17
     ae4:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x11);
     ae8:	81 e1       	ldi	r24, 0x11	; 17
     aea:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     aee:	8f e1       	ldi	r24, 0x1F	; 31
     af0:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1b);
     af4:	8b e1       	ldi	r24, 0x1B	; 27
     af6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     afa:	8f e1       	ldi	r24, 0x1F	; 31
     afc:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     b00:	8f e1       	ldi	r24, 0x1F	; 31
     b02:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x00); 
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_putc(0);
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	
	lcd_command(0x48);	// set CGRAM address for second character
     b12:	88 e4       	ldi	r24, 0x48	; 72
     b14:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	
	// bell icon
	lcd_data(0x00); 
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x04); 
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x0e);
     b24:	8e e0       	ldi	r24, 0x0E	; 14
     b26:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x0e);
     b2a:	8e e0       	ldi	r24, 0x0E	; 14
     b2c:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x0e);
     b30:	8e e0       	ldi	r24, 0x0E	; 14
     b32:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     b36:	8f e1       	ldi	r24, 0x1F	; 31
     b38:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x04);
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x00);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_putc(1);
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     b4e:	08 95       	ret

00000b50 <main>:
}

int main(void)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	c5 54       	subi	r28, 0x45	; 69
     b5a:	d1 09       	sbc	r29, r1
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
	// Setting menu items
	menu[0] = "Variables";
     b66:	ef e9       	ldi	r30, 0x9F	; 159
     b68:	f1 e0       	ldi	r31, 0x01	; 1
     b6a:	87 ee       	ldi	r24, 0xE7	; 231
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	91 83       	std	Z+1, r25	; 0x01
     b70:	80 83       	st	Z, r24
	menu[1] = "Modes";
     b72:	81 ef       	ldi	r24, 0xF1	; 241
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	93 83       	std	Z+3, r25	; 0x03
     b78:	82 83       	std	Z+2, r24	; 0x02
	menu[2] = "Alarm";
     b7a:	87 ef       	ldi	r24, 0xF7	; 247
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	95 83       	std	Z+5, r25	; 0x05
     b80:	84 83       	std	Z+4, r24	; 0x04
	
	// Setting variables names
	variables[0] = "max temp";
     b82:	ee eb       	ldi	r30, 0xBE	; 190
     b84:	f1 e0       	ldi	r31, 0x01	; 1
     b86:	8d ef       	ldi	r24, 0xFD	; 253
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	91 83       	std	Z+1, r25	; 0x01
     b8c:	80 83       	st	Z, r24
	variables[1] = "min temp";
     b8e:	86 e0       	ldi	r24, 0x06	; 6
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	93 83       	std	Z+3, r25	; 0x03
     b94:	82 83       	std	Z+2, r24	; 0x02
	variables[2] = "set temp";
     b96:	8f e0       	ldi	r24, 0x0F	; 15
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	95 83       	std	Z+5, r25	; 0x05
     b9c:	84 83       	std	Z+4, r24	; 0x04
	variables[3] = "temp diff";
     b9e:	88 e1       	ldi	r24, 0x18	; 24
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	97 83       	std	Z+7, r25	; 0x07
     ba4:	86 83       	std	Z+6, r24	; 0x06
	variables[4] = "on time";
     ba6:	82 e2       	ldi	r24, 0x22	; 34
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	91 87       	std	Z+9, r25	; 0x09
     bac:	80 87       	std	Z+8, r24	; 0x08
	variables[5] = "off time";
     bae:	8a e2       	ldi	r24, 0x2A	; 42
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	93 87       	std	Z+11, r25	; 0x0b
     bb4:	82 87       	std	Z+10, r24	; 0x0a
	
	// Setting alarm names
	alarms[0] = "alarm diff";
     bb6:	ea ea       	ldi	r30, 0xAA	; 170
     bb8:	f1 e0       	ldi	r31, 0x01	; 1
     bba:	83 e3       	ldi	r24, 0x33	; 51
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24
	alarms[1] = "alarm high";
     bc2:	8e e3       	ldi	r24, 0x3E	; 62
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	93 83       	std	Z+3, r25	; 0x03
     bc8:	82 83       	std	Z+2, r24	; 0x02
	alarms[2] = "alarm low";
     bca:	89 e4       	ldi	r24, 0x49	; 73
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	95 83       	std	Z+5, r25	; 0x05
     bd0:	84 83       	std	Z+4, r24	; 0x04
	alarms[3] = "alarm usage";
     bd2:	83 e5       	ldi	r24, 0x53	; 83
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	97 83       	std	Z+7, r25	; 0x07
     bd8:	86 83       	std	Z+6, r24	; 0x06
	alarms[4] = "lock usage";
     bda:	8f e5       	ldi	r24, 0x5F	; 95
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	91 87       	std	Z+9, r25	; 0x09
     be0:	80 87       	std	Z+8, r24	; 0x08
	
	// Setting modes
	mode[0] = "heat";
     be2:	e6 eb       	ldi	r30, 0xB6	; 182
     be4:	f1 e0       	ldi	r31, 0x01	; 1
     be6:	8a e6       	ldi	r24, 0x6A	; 106
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	91 83       	std	Z+1, r25	; 0x01
     bec:	80 83       	st	Z, r24
	mode[1] = "cool";
     bee:	8f e6       	ldi	r24, 0x6F	; 111
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	93 83       	std	Z+3, r25	; 0x03
     bf4:	82 83       	std	Z+2, r24	; 0x02
	mode[2] = "bal ";
     bf6:	84 e7       	ldi	r24, 0x74	; 116
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	95 83       	std	Z+5, r25	; 0x05
     bfc:	84 83       	std	Z+4, r24	; 0x04
	
	// Initialize password to '0000'
	resetPsw(tmpPassword);
     bfe:	8f e8       	ldi	r24, 0x8F	; 143
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 4f 03 	call	0x69e	; 0x69e <resetPsw>
	resetPsw(password);
     c06:	83 e9       	ldi	r24, 0x93	; 147
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0e 94 4f 03 	call	0x69e	; 0x69e <resetPsw>
	
	// Initializing default variables
	var_mat[0] = 99;
     c0e:	e9 e8       	ldi	r30, 0x89	; 137
     c10:	f1 e0       	ldi	r31, 0x01	; 1
     c12:	83 e6       	ldi	r24, 0x63	; 99
     c14:	80 83       	st	Z, r24
	var_mat[1] = 0;
     c16:	11 82       	std	Z+1, r1	; 0x01
	var_mat[2] = 0;
     c18:	12 82       	std	Z+2, r1	; 0x02
	var_mat[3] = 2;
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	83 83       	std	Z+3, r24	; 0x03
	var_mat[4] = 0;
     c1e:	14 82       	std	Z+4, r1	; 0x04
	var_mat[5] = 1;
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	95 83       	std	Z+5, r25	; 0x05
	
	// Initializing default alarm
	alarms_mat[0] = 2;
     c24:	e4 e8       	ldi	r30, 0x84	; 132
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	80 83       	st	Z, r24
	alarms_mat[1] = 50;
     c2a:	92 e3       	ldi	r25, 0x32	; 50
     c2c:	91 83       	std	Z+1, r25	; 0x01
	alarms_mat[2] = 0;
     c2e:	12 82       	std	Z+2, r1	; 0x02
	alarms_mat[3] = 0;
     c30:	13 82       	std	Z+3, r1	; 0x03
	alarms_mat[4] = 0;
     c32:	14 82       	std	Z+4, r1	; 0x04

	DDRA = _BV(1) | _BV(2) | _BV(3);
     c34:	9e e0       	ldi	r25, 0x0E	; 14
     c36:	9a bb       	out	0x1a, r25	; 26
	PORTA = 0x00;
     c38:	1b ba       	out	0x1b, r1	; 27

	PORTB = _BV(0) | _BV(1) | _BV(2);
     c3a:	97 e0       	ldi	r25, 0x07	; 7
     c3c:	98 bb       	out	0x18, r25	; 24
	DDRB = 0;
     c3e:	17 ba       	out	0x17, r1	; 23

	DDRD = _BV(4);
     c40:	90 e1       	ldi	r25, 0x10	; 16
     c42:	91 bb       	out	0x11, r25	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
     c44:	91 e2       	ldi	r25, 0x21	; 33
     c46:	9f bd       	out	0x2f, r25	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
     c48:	9a e0       	ldi	r25, 0x0A	; 10
     c4a:	9e bd       	out	0x2e, r25	; 46
	OCR1B = 128;
     c4c:	20 e8       	ldi	r18, 0x80	; 128
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	39 bd       	out	0x29, r19	; 41
     c52:	28 bd       	out	0x28, r18	; 40

	TCCR0 = _BV(WGM01) | _BV(CS02) | _BV(CS00);
     c54:	9d e0       	ldi	r25, 0x0D	; 13
     c56:	93 bf       	out	0x33, r25	; 51
	OCR0 = 72;
     c58:	98 e4       	ldi	r25, 0x48	; 72
     c5a:	9c bf       	out	0x3c, r25	; 60

	TIMSK = _BV(OCIE0);
     c5c:	89 bf       	out	0x39, r24	; 57

	MCUCR = _BV(ISC01);
     c5e:	85 bf       	out	0x35, r24	; 53
	GICR = _BV(INT0);
     c60:	80 e4       	ldi	r24, 0x40	; 64
     c62:	8b bf       	out	0x3b, r24	; 59
	sei();
     c64:	78 94       	sei

	lcd_init(LCD_DISP_ON);
     c66:	8c e0       	ldi	r24, 0x0C	; 12
     c68:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_init>
	init_spec_char();
     c6c:	0e 94 6b 05 	call	0xad6	; 0xad6 <init_spec_char>
	lcd_clrscr();
     c70:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>

	writeOnLCD();
     c74:	0e 94 36 04 	call	0x86c	; 0x86c <writeOnLCD>
	uint16_t tmp;
	uint32_t lastDisplayedSum = 0;
	movAvg_t movingAverage;
	
	// Initialize moving average structure
	init_temp_ma(&movingAverage, TOT_SAMPLES);
     c78:	60 e2       	ldi	r22, 0x20	; 32
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 16 05 	call	0xa2c	; 0xa2c <init_temp_ma>
	
	// Initialize ADC
	init_adc();
     c82:	0e 94 66 05 	call	0xacc	; 0xacc <init_adc>
	
	sei();	
     c86:	78 94       	sei
	lcd_clrscr();

	writeOnLCD();
	
	uint16_t tmp;
	uint32_t lastDisplayedSum = 0;
     c88:	81 2c       	mov	r8, r1
     c8a:	91 2c       	mov	r9, r1
     c8c:	54 01       	movw	r10, r8
			update = 1;
		}
		
		if (update){
			update = 0;						
			uint16_t diff = abs(var_mat[2] - temp);
     c8e:	09 e8       	ldi	r16, 0x89	; 137
     c90:	11 e0       	ldi	r17, 0x01	; 1
			} else {
				PORTA &= _BV(0) | _BV(3);
				lock = 0;
			}
			
			if (alarms_mat[3]){
     c92:	0f 2e       	mov	r0, r31
     c94:	f4 e8       	ldi	r31, 0x84	; 132
     c96:	ef 2e       	mov	r14, r31
     c98:	f1 e0       	ldi	r31, 0x01	; 1
     c9a:	ff 2e       	mov	r15, r31
     c9c:	f0 2d       	mov	r31, r0
						if (temp < var_mat[2]) {
							PORTA &= _BV(0);
							lock = 0;
						} else {
							PORTA |=  _BV(2);
							lock = 1;
     c9e:	77 24       	eor	r7, r7
     ca0:	73 94       	inc	r7
				case 4:
					if (mSelect) {
						mSelect = 0;
					} else if (checkPsw(tmpPassword)) {
						mAccess = 1;
						fMode = 2;
     ca2:	68 94       	set
     ca4:	22 24       	eor	r2, r2
     ca6:	21 f8       	bld	r2, 1
					if (!subMenu) {								
						// switch between sub menus
						mMode = (mMode + 1) % 3;
					} else if (!mSelect) {
						// change sub menu items 0 = var, 1 = mode, 2 = alarm
						mVar = (mVar + 1) % (mMode == 0 ? 6 :  mMode == 1 ? 3 : 5);
     ca8:	0f 2e       	mov	r0, r31
     caa:	f6 e0       	ldi	r31, 0x06	; 6
     cac:	5f 2e       	mov	r5, r31
     cae:	f0 2d       	mov	r31, r0
     cb0:	61 2c       	mov	r6, r1
     cb2:	0f 2e       	mov	r0, r31
     cb4:	f3 e0       	ldi	r31, 0x03	; 3
     cb6:	cf 2e       	mov	r12, r31
     cb8:	d1 2c       	mov	r13, r1
     cba:	f0 2d       	mov	r31, r0
     cbc:	0f 2e       	mov	r0, r31
     cbe:	f5 e0       	ldi	r31, 0x05	; 5
     cc0:	3f 2e       	mov	r3, r31
     cc2:	f0 2d       	mov	r31, r0
     cc4:	41 2c       	mov	r4, r1
	init_adc();
	
	sei();	

	while (1) {
		tmp = readAdc(0);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	0e 94 5a 05 	call	0xab4	; 0xab4 <readAdc>
		curAvg = getMovAvg(tmp, &movingAverage);
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	0e 94 2b 05 	call	0xa56	; 0xa56 <getMovAvg>
     cd6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <curAvg+0x1>
     cda:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <curAvg>
		
		if(abs(lastDisplayedSum - movingAverage.sum) > SUM_DIFF_THOLD ) {
     cde:	4a 81       	ldd	r20, Y+2	; 0x02
     ce0:	5b 81       	ldd	r21, Y+3	; 0x03
     ce2:	6c 81       	ldd	r22, Y+4	; 0x04
     ce4:	7d 81       	ldd	r23, Y+5	; 0x05
     ce6:	94 01       	movw	r18, r8
     ce8:	24 1b       	sub	r18, r20
     cea:	35 0b       	sbc	r19, r21
     cec:	c9 01       	movw	r24, r18
     cee:	99 23       	and	r25, r25
     cf0:	24 f4       	brge	.+8      	; 0xcfa <main+0x1aa>
     cf2:	88 27       	eor	r24, r24
     cf4:	99 27       	eor	r25, r25
     cf6:	82 1b       	sub	r24, r18
     cf8:	93 0b       	sbc	r25, r19
     cfa:	41 97       	sbiw	r24, 0x11	; 17
     cfc:	2c f0       	brlt	.+10     	; 0xd08 <main+0x1b8>
			lastDisplayedSum = movingAverage.sum;
			updateLCD = 1;
     cfe:	70 92 a7 01 	sts	0x01A7, r7	; 0x8001a7 <updateLCD>
	while (1) {
		tmp = readAdc(0);
		curAvg = getMovAvg(tmp, &movingAverage);
		
		if(abs(lastDisplayedSum - movingAverage.sum) > SUM_DIFF_THOLD ) {
			lastDisplayedSum = movingAverage.sum;
     d02:	4a 01       	movw	r8, r20
     d04:	5b 01       	movw	r10, r22
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <main+0x1c2>
			updateLCD = 1;
			update = 1;
		}
		
		if (update){
     d08:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <update>
     d0c:	88 23       	and	r24, r24
     d0e:	09 f4       	brne	.+2      	; 0xd12 <main+0x1c2>
     d10:	5d c0       	rjmp	.+186    	; 0xdcc <main+0x27c>
			update = 0;						
     d12:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <update>
			uint16_t diff = abs(var_mat[2] - temp);
     d16:	d8 01       	movw	r26, r16
     d18:	12 96       	adiw	r26, 0x02	; 2
     d1a:	5c 91       	ld	r21, X
     d1c:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <temp>
     d20:	85 2f       	mov	r24, r21
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	84 1b       	sub	r24, r20
     d26:	91 09       	sbc	r25, r1
     d28:	9c 01       	movw	r18, r24
     d2a:	22 f4       	brpl	.+8      	; 0xd34 <main+0x1e4>
     d2c:	22 27       	eor	r18, r18
     d2e:	33 27       	eor	r19, r19
     d30:	28 1b       	sub	r18, r24
     d32:	39 0b       	sbc	r19, r25
			if (diff > var_mat[3]){ 
     d34:	f8 01       	movw	r30, r16
     d36:	83 81       	ldd	r24, Z+3	; 0x03
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	82 17       	cp	r24, r18
     d3c:	93 07       	cpc	r25, r19
     d3e:	40 f5       	brcc	.+80     	; 0xd90 <main+0x240>
				switch (modeSelect) {
     d40:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <modeSelect>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	81 f0       	breq	.+32     	; 0xd68 <main+0x218>
     d48:	18 f0       	brcs	.+6      	; 0xd50 <main+0x200>
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	c9 f0       	breq	.+50     	; 0xd80 <main+0x230>
     d4e:	25 c0       	rjmp	.+74     	; 0xd9a <main+0x24a>
					case 0:
						if (temp > var_mat[2]) {
     d50:	54 17       	cp	r21, r20
     d52:	30 f4       	brcc	.+12     	; 0xd60 <main+0x210>
							PORTA &= _BV(0);
     d54:	8b b3       	in	r24, 0x1b	; 27
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	8b bb       	out	0x1b, r24	; 27
							lock = 0;
     d5a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <lock>
     d5e:	1d c0       	rjmp	.+58     	; 0xd9a <main+0x24a>
						} else {
							PORTA |=  _BV(1);
     d60:	d9 9a       	sbi	0x1b, 1	; 27
							lock = 1;
     d62:	70 92 97 01 	sts	0x0197, r7	; 0x800197 <lock>
     d66:	19 c0       	rjmp	.+50     	; 0xd9a <main+0x24a>
						}
					break;
					case 1:
						if (temp < var_mat[2]) {
     d68:	45 17       	cp	r20, r21
     d6a:	30 f4       	brcc	.+12     	; 0xd78 <main+0x228>
							PORTA &= _BV(0);
     d6c:	8b b3       	in	r24, 0x1b	; 27
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	8b bb       	out	0x1b, r24	; 27
							lock = 0;
     d72:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <lock>
     d76:	11 c0       	rjmp	.+34     	; 0xd9a <main+0x24a>
						} else {
							PORTA |=  _BV(2);
     d78:	da 9a       	sbi	0x1b, 2	; 27
							lock = 1;
     d7a:	70 92 97 01 	sts	0x0197, r7	; 0x800197 <lock>
     d7e:	0d c0       	rjmp	.+26     	; 0xd9a <main+0x24a>
						}
					break;
					case 2:
						lock = 1;
     d80:	70 92 97 01 	sts	0x0197, r7	; 0x800197 <lock>
						if (temp < var_mat[2]) {
     d84:	45 17       	cp	r20, r21
     d86:	10 f4       	brcc	.+4      	; 0xd8c <main+0x23c>
							PORTA |=  _BV(1);
     d88:	d9 9a       	sbi	0x1b, 1	; 27
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <main+0x24a>
						} else PORTA |=  _BV(2);
     d8c:	da 9a       	sbi	0x1b, 2	; 27
     d8e:	05 c0       	rjmp	.+10     	; 0xd9a <main+0x24a>
					break;
				}
			} else {
				PORTA &= _BV(0) | _BV(3);
     d90:	8b b3       	in	r24, 0x1b	; 27
     d92:	89 70       	andi	r24, 0x09	; 9
     d94:	8b bb       	out	0x1b, r24	; 27
				lock = 0;
     d96:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <lock>
			}
			
			if (alarms_mat[3]){
     d9a:	d7 01       	movw	r26, r14
     d9c:	13 96       	adiw	r26, 0x03	; 3
     d9e:	8c 91       	ld	r24, X
     da0:	13 97       	sbiw	r26, 0x03	; 3
     da2:	88 23       	and	r24, r24
     da4:	99 f0       	breq	.+38     	; 0xdcc <main+0x27c>
				if (diff > alarms_mat[0] || temp > alarms_mat[1] || temp < alarms_mat[2]){
     da6:	8c 91       	ld	r24, X
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	58 f0       	brcs	.+22     	; 0xdc6 <main+0x276>
     db0:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <temp>
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	9c 91       	ld	r25, X
     db8:	11 97       	sbiw	r26, 0x01	; 1
     dba:	98 17       	cp	r25, r24
     dbc:	20 f0       	brcs	.+8      	; 0xdc6 <main+0x276>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	9c 91       	ld	r25, X
     dc2:	89 17       	cp	r24, r25
     dc4:	10 f4       	brcc	.+4      	; 0xdca <main+0x27a>
					PORTA |= _BV(3);
     dc6:	db 9a       	sbi	0x1b, 3	; 27
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <main+0x27c>
				} else PORTA &= ~_BV(3);
     dca:	db 98       	cbi	0x1b, 3	; 27
			}
		}
		
		// Using keys (PORTB) to control
		if (bit_is_clear(PINB, 0)) {
     dcc:	b0 99       	sbic	0x16, 0	; 22
     dce:	0e c1       	rjmp	.+540    	; 0xfec <main+0x49c>
			switch (fMode) {
     dd0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <fMode>
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	09 f4       	brne	.+2      	; 0xdda <main+0x28a>
     dd8:	d1 c0       	rjmp	.+418    	; 0xf7c <main+0x42c>
     dda:	84 30       	cpi	r24, 0x04	; 4
     ddc:	09 f4       	brne	.+2      	; 0xde0 <main+0x290>
     dde:	ea c0       	rjmp	.+468    	; 0xfb4 <main+0x464>
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	09 f0       	breq	.+2      	; 0xde6 <main+0x296>
     de4:	55 c2       	rjmp	.+1194   	; 0x1290 <main+0x740>
				case 1:
				 // key1 function on temp display screen
				break;
				case 2:											
					if (!subMenu) {								
     de6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
     dea:	81 11       	cpse	r24, r1
     dec:	0a c0       	rjmp	.+20     	; 0xe02 <main+0x2b2>
						// switch between sub menus
						mMode = (mMode + 1) % 3;
     dee:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mMode>
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	b6 01       	movw	r22, r12
     df8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__divmodhi4>
     dfc:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <mMode>
     e00:	47 c2       	rjmp	.+1166   	; 0x1290 <main+0x740>
					} else if (!mSelect) {
     e02:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     e06:	81 11       	cpse	r24, r1
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <main+0x2d8>
						// change sub menu items 0 = var, 1 = mode, 2 = alarm
						mVar = (mVar + 1) % (mMode == 0 ? 6 :  mMode == 1 ? 3 : 5);
     e0a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <mMode>
     e16:	22 23       	and	r18, r18
     e18:	09 f4       	brne	.+2      	; 0xe1c <main+0x2cc>
     e1a:	44 c2       	rjmp	.+1160   	; 0x12a4 <main+0x754>
     e1c:	21 30       	cpi	r18, 0x01	; 1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <main+0x2d2>
     e20:	48 c2       	rjmp	.+1168   	; 0x12b2 <main+0x762>
     e22:	63 2d       	mov	r22, r3
     e24:	74 2d       	mov	r23, r4
     e26:	40 c2       	rjmp	.+1152   	; 0x12a8 <main+0x758>
						// mode changes directly
						if (mMode == 1) modeSelect = mVar;
						
					// variable setup
					} else if (mMode == 0) {				
     e28:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mMode>
     e2c:	81 11       	cpse	r24, r1
     e2e:	62 c0       	rjmp	.+196    	; 0xef4 <main+0x3a4>
						var_mat[mVar] += 1;						
     e30:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	f9 01       	movw	r30, r18
     e3a:	e7 57       	subi	r30, 0x77	; 119
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	90 81       	ld	r25, Z
     e40:	9f 5f       	subi	r25, 0xFF	; 255
     e42:	90 83       	st	Z, r25
						switch (mVar) {
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	91 f1       	breq	.+100    	; 0xeac <main+0x35c>
     e48:	28 f4       	brcc	.+10     	; 0xe54 <main+0x304>
     e4a:	88 23       	and	r24, r24
     e4c:	51 f0       	breq	.+20     	; 0xe62 <main+0x312>
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	e9 f0       	breq	.+58     	; 0xe8c <main+0x33c>
     e52:	1e c2       	rjmp	.+1084   	; 0x1290 <main+0x740>
     e54:	84 30       	cpi	r24, 0x04	; 4
     e56:	f1 f1       	breq	.+124    	; 0xed4 <main+0x384>
     e58:	a8 f1       	brcs	.+106    	; 0xec4 <main+0x374>
     e5a:	85 30       	cpi	r24, 0x05	; 5
     e5c:	09 f4       	brne	.+2      	; 0xe60 <main+0x310>
     e5e:	42 c0       	rjmp	.+132    	; 0xee4 <main+0x394>
     e60:	17 c2       	rjmp	.+1070   	; 0x1290 <main+0x740>
							case 0:
								if (var_mat[mVar] > 99) var_mat[mVar] = var_mat[1] + 1;
     e62:	94 36       	cpi	r25, 0x64	; 100
     e64:	40 f0       	brcs	.+16     	; 0xe76 <main+0x326>
     e66:	f9 01       	movw	r30, r18
     e68:	e7 57       	subi	r30, 0x77	; 119
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	d8 01       	movw	r26, r16
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	8c 91       	ld	r24, X
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 83       	st	Z, r24
								if (var_mat[2] > var_mat[mVar]) var_mat[2] = var_mat[mVar];
     e76:	f9 01       	movw	r30, r18
     e78:	e7 57       	subi	r30, 0x77	; 119
     e7a:	fe 4f       	sbci	r31, 0xFE	; 254
     e7c:	80 81       	ld	r24, Z
     e7e:	f8 01       	movw	r30, r16
     e80:	92 81       	ldd	r25, Z+2	; 0x02
     e82:	89 17       	cp	r24, r25
     e84:	08 f0       	brcs	.+2      	; 0xe88 <main+0x338>
     e86:	04 c2       	rjmp	.+1032   	; 0x1290 <main+0x740>
     e88:	82 83       	std	Z+2, r24	; 0x02
     e8a:	02 c2       	rjmp	.+1028   	; 0x1290 <main+0x740>
							break;
							case 1:
								if (var_mat[mVar] >= var_mat[0]) var_mat[mVar] = 0;
     e8c:	d8 01       	movw	r26, r16
     e8e:	8c 91       	ld	r24, X
     e90:	98 17       	cp	r25, r24
     e92:	28 f0       	brcs	.+10     	; 0xe9e <main+0x34e>
     e94:	f9 01       	movw	r30, r18
     e96:	e7 57       	subi	r30, 0x77	; 119
     e98:	fe 4f       	sbci	r31, 0xFE	; 254
     e9a:	10 82       	st	Z, r1
     e9c:	f9 c1       	rjmp	.+1010   	; 0x1290 <main+0x740>
								if (var_mat[2] < var_mat[mVar]) var_mat[2] = var_mat[mVar];
     e9e:	f8 01       	movw	r30, r16
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	89 17       	cp	r24, r25
     ea4:	08 f0       	brcs	.+2      	; 0xea8 <main+0x358>
     ea6:	f4 c1       	rjmp	.+1000   	; 0x1290 <main+0x740>
     ea8:	92 83       	std	Z+2, r25	; 0x02
     eaa:	f2 c1       	rjmp	.+996    	; 0x1290 <main+0x740>
							break;
							case 2:
								if (var_mat[mVar] > var_mat[0]) var_mat[mVar] = var_mat[1];
     eac:	d8 01       	movw	r26, r16
     eae:	8c 91       	ld	r24, X
     eb0:	89 17       	cp	r24, r25
     eb2:	08 f0       	brcs	.+2      	; 0xeb6 <main+0x366>
     eb4:	ed c1       	rjmp	.+986    	; 0x1290 <main+0x740>
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	8c 91       	ld	r24, X
     eba:	f9 01       	movw	r30, r18
     ebc:	e7 57       	subi	r30, 0x77	; 119
     ebe:	fe 4f       	sbci	r31, 0xFE	; 254
     ec0:	80 83       	st	Z, r24
     ec2:	e6 c1       	rjmp	.+972    	; 0x1290 <main+0x740>
							break;
							case 3:
								if (var_mat[mVar] > 30) var_mat[mVar] = 0;
     ec4:	9f 31       	cpi	r25, 0x1F	; 31
     ec6:	08 f4       	brcc	.+2      	; 0xeca <main+0x37a>
     ec8:	e3 c1       	rjmp	.+966    	; 0x1290 <main+0x740>
     eca:	f9 01       	movw	r30, r18
     ecc:	e7 57       	subi	r30, 0x77	; 119
     ece:	fe 4f       	sbci	r31, 0xFE	; 254
     ed0:	10 82       	st	Z, r1
     ed2:	de c1       	rjmp	.+956    	; 0x1290 <main+0x740>
							break;
							case 4:
								if (var_mat[mVar] > 250) var_mat[mVar] = 0;
     ed4:	9b 3f       	cpi	r25, 0xFB	; 251
     ed6:	08 f4       	brcc	.+2      	; 0xeda <main+0x38a>
     ed8:	db c1       	rjmp	.+950    	; 0x1290 <main+0x740>
     eda:	f9 01       	movw	r30, r18
     edc:	e7 57       	subi	r30, 0x77	; 119
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	10 82       	st	Z, r1
     ee2:	d6 c1       	rjmp	.+940    	; 0x1290 <main+0x740>
							break;
							case 5:
								if (var_mat[mVar] > 250) var_mat[mVar] = 0;
     ee4:	9b 3f       	cpi	r25, 0xFB	; 251
     ee6:	08 f4       	brcc	.+2      	; 0xeea <main+0x39a>
     ee8:	d3 c1       	rjmp	.+934    	; 0x1290 <main+0x740>
     eea:	f9 01       	movw	r30, r18
     eec:	e7 57       	subi	r30, 0x77	; 119
     eee:	fe 4f       	sbci	r31, 0xFE	; 254
     ef0:	10 82       	st	Z, r1
     ef2:	ce c1       	rjmp	.+924    	; 0x1290 <main+0x740>
							break;
						}
					
					// alarm setup
					} else if (mMode == 2) {
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	09 f0       	breq	.+2      	; 0xefa <main+0x3aa>
     ef8:	cb c1       	rjmp	.+918    	; 0x1290 <main+0x740>
						alarms_mat[mVar] += 1;
     efa:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <mVar>
     efe:	29 2f       	mov	r18, r25
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	ec 57       	subi	r30, 0x7C	; 124
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	80 81       	ld	r24, Z
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 83       	st	Z, r24
						switch (mVar) {
     f0e:	92 30       	cpi	r25, 0x02	; 2
     f10:	f9 f0       	breq	.+62     	; 0xf50 <main+0x400>
     f12:	28 f4       	brcc	.+10     	; 0xf1e <main+0x3ce>
     f14:	99 23       	and	r25, r25
     f16:	41 f0       	breq	.+16     	; 0xf28 <main+0x3d8>
     f18:	91 30       	cpi	r25, 0x01	; 1
     f1a:	71 f0       	breq	.+28     	; 0xf38 <main+0x3e8>
     f1c:	b9 c1       	rjmp	.+882    	; 0x1290 <main+0x740>
     f1e:	93 30       	cpi	r25, 0x03	; 3
     f20:	09 f1       	breq	.+66     	; 0xf64 <main+0x414>
     f22:	94 30       	cpi	r25, 0x04	; 4
     f24:	29 f1       	breq	.+74     	; 0xf70 <main+0x420>
     f26:	b4 c1       	rjmp	.+872    	; 0x1290 <main+0x740>
							case 0:
								if (alarms_mat[mVar] > 50) alarms_mat[mVar] = 1;
     f28:	83 33       	cpi	r24, 0x33	; 51
     f2a:	08 f4       	brcc	.+2      	; 0xf2e <main+0x3de>
     f2c:	b1 c1       	rjmp	.+866    	; 0x1290 <main+0x740>
     f2e:	f9 01       	movw	r30, r18
     f30:	ec 57       	subi	r30, 0x7C	; 124
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	70 82       	st	Z, r7
     f36:	ac c1       	rjmp	.+856    	; 0x1290 <main+0x740>
							break;
							case 1:
								if (alarms_mat[mVar] > 99) alarms_mat[mVar] = alarms_mat[2] + 1;
     f38:	84 36       	cpi	r24, 0x64	; 100
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <main+0x3ee>
     f3c:	a9 c1       	rjmp	.+850    	; 0x1290 <main+0x740>
     f3e:	f9 01       	movw	r30, r18
     f40:	ec 57       	subi	r30, 0x7C	; 124
     f42:	fe 4f       	sbci	r31, 0xFE	; 254
     f44:	d7 01       	movw	r26, r14
     f46:	12 96       	adiw	r26, 0x02	; 2
     f48:	8c 91       	ld	r24, X
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	80 83       	st	Z, r24
     f4e:	a0 c1       	rjmp	.+832    	; 0x1290 <main+0x740>
							break;
							case 2:
								if (alarms_mat[mVar] >= alarms_mat[1]) alarms_mat[mVar] = 0;
     f50:	f7 01       	movw	r30, r14
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	89 17       	cp	r24, r25
     f56:	08 f4       	brcc	.+2      	; 0xf5a <main+0x40a>
     f58:	9b c1       	rjmp	.+822    	; 0x1290 <main+0x740>
     f5a:	f9 01       	movw	r30, r18
     f5c:	ec 57       	subi	r30, 0x7C	; 124
     f5e:	fe 4f       	sbci	r31, 0xFE	; 254
     f60:	10 82       	st	Z, r1
     f62:	96 c1       	rjmp	.+812    	; 0x1290 <main+0x740>
							break;
							case 3:
								alarms_mat[mVar] = alarms_mat[mVar] % 2;
     f64:	f9 01       	movw	r30, r18
     f66:	ec 57       	subi	r30, 0x7C	; 124
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	81 70       	andi	r24, 0x01	; 1
     f6c:	80 83       	st	Z, r24
							break;
     f6e:	90 c1       	rjmp	.+800    	; 0x1290 <main+0x740>
							case 4:
								alarms_mat[mVar] = alarms_mat[mVar] % 2;
     f70:	f9 01       	movw	r30, r18
     f72:	ec 57       	subi	r30, 0x7C	; 124
     f74:	fe 4f       	sbci	r31, 0xFE	; 254
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	80 83       	st	Z, r24
							break;
     f7a:	8a c1       	rjmp	.+788    	; 0x1290 <main+0x740>
						}					
					}
				break;
				case 3:
					if (!mSelect) {
     f7c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     f80:	81 11       	cpse	r24, r1
     f82:	0f c0       	rjmp	.+30     	; 0xfa2 <main+0x452>
						mVar = (mVar + 1) % 4;
     f84:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	83 70       	andi	r24, 0x03	; 3
     f8e:	90 78       	andi	r25, 0x80	; 128
     f90:	99 23       	and	r25, r25
     f92:	24 f4       	brge	.+8      	; 0xf9c <main+0x44c>
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	8c 6f       	ori	r24, 0xFC	; 252
     f98:	9f 6f       	ori	r25, 0xFF	; 255
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <mVar>
     fa0:	77 c1       	rjmp	.+750    	; 0x1290 <main+0x740>
					} else {
						password[mVar] += 1;
     fa2:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	ed 56       	subi	r30, 0x6D	; 109
     faa:	fe 4f       	sbci	r31, 0xFE	; 254
     fac:	80 81       	ld	r24, Z
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	80 83       	st	Z, r24
     fb2:	6e c1       	rjmp	.+732    	; 0x1290 <main+0x740>
					}
				break;
				case 4:
				if (!mSelect) {
     fb4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
     fb8:	81 11       	cpse	r24, r1
     fba:	0f c0       	rjmp	.+30     	; 0xfda <main+0x48a>
					mVar = (mVar + 1) % 4;
     fbc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <mVar>
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	83 70       	andi	r24, 0x03	; 3
     fc6:	90 78       	andi	r25, 0x80	; 128
     fc8:	99 23       	and	r25, r25
     fca:	24 f4       	brge	.+8      	; 0xfd4 <main+0x484>
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	8c 6f       	ori	r24, 0xFC	; 252
     fd0:	9f 6f       	ori	r25, 0xFF	; 255
     fd2:	01 96       	adiw	r24, 0x01	; 1
     fd4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <mVar>
     fd8:	5b c1       	rjmp	.+694    	; 0x1290 <main+0x740>
					} else {
					tmpPassword[mVar] += 1;
     fda:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	e1 57       	subi	r30, 0x71	; 113
     fe2:	fe 4f       	sbci	r31, 0xFE	; 254
     fe4:	80 81       	ld	r24, Z
     fe6:	8f 5f       	subi	r24, 0xFF	; 255
     fe8:	80 83       	st	Z, r24
     fea:	52 c1       	rjmp	.+676    	; 0x1290 <main+0x740>
				}
				break;
			}
		} else if (bit_is_clear(PINB, 1)) {
     fec:	b1 99       	sbic	0x16, 1	; 22
     fee:	f9 c0       	rjmp	.+498    	; 0x11e2 <main+0x692>
			switch (fMode) {
     ff0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <fMode>
     ff4:	83 30       	cpi	r24, 0x03	; 3
     ff6:	09 f4       	brne	.+2      	; 0xffa <main+0x4aa>
     ff8:	d4 c0       	rjmp	.+424    	; 0x11a2 <main+0x652>
     ffa:	84 30       	cpi	r24, 0x04	; 4
     ffc:	09 f4       	brne	.+2      	; 0x1000 <main+0x4b0>
     ffe:	e1 c0       	rjmp	.+450    	; 0x11c2 <main+0x672>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	09 f0       	breq	.+2      	; 0x1006 <main+0x4b6>
    1004:	45 c1       	rjmp	.+650    	; 0x1290 <main+0x740>
				case 1:
					// // key2 function on temp display screen
				break;
				case 2:
					if (!subMenu) {
    1006:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
    100a:	81 11       	cpse	r24, r1
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <main+0x4d4>
						subMenu = 1;
    100e:	70 92 7e 01 	sts	0x017E, r7	; 0x80017e <__data_end>
						mVar = mMode == 1 ? modeSelect : 0;
    1012:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <mMode>
    1016:	91 30       	cpi	r25, 0x01	; 1
    1018:	11 f4       	brne	.+4      	; 0x101e <main+0x4ce>
    101a:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <modeSelect>
    101e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <mVar>
    1022:	36 c1       	rjmp	.+620    	; 0x1290 <main+0x740>
					} else if (!mSelect) {
    1024:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
    1028:	81 11       	cpse	r24, r1
    102a:	03 c0       	rjmp	.+6      	; 0x1032 <main+0x4e2>
						mSelect = 1;
    102c:	70 92 80 01 	sts	0x0180, r7	; 0x800180 <mSelect>
    1030:	2f c1       	rjmp	.+606    	; 0x1290 <main+0x740>
						
					// variable setup
					} else if (mMode == 0) {
    1032:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <mMode>
    1036:	81 11       	cpse	r24, r1
    1038:	6f c0       	rjmp	.+222    	; 0x1118 <main+0x5c8>
						switch (mVar) {
    103a:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
    103e:	e2 30       	cpi	r30, 0x02	; 2
    1040:	c9 f1       	breq	.+114    	; 0x10b4 <main+0x564>
    1042:	28 f4       	brcc	.+10     	; 0x104e <main+0x4fe>
    1044:	ee 23       	and	r30, r30
    1046:	59 f0       	breq	.+22     	; 0x105e <main+0x50e>
    1048:	e1 30       	cpi	r30, 0x01	; 1
    104a:	f1 f0       	breq	.+60     	; 0x1088 <main+0x538>
    104c:	5e c0       	rjmp	.+188    	; 0x110a <main+0x5ba>
    104e:	e4 30       	cpi	r30, 0x04	; 4
    1050:	09 f4       	brne	.+2      	; 0x1054 <main+0x504>
    1052:	48 c0       	rjmp	.+144    	; 0x10e4 <main+0x594>
    1054:	e8 f1       	brcs	.+122    	; 0x10d0 <main+0x580>
    1056:	e5 30       	cpi	r30, 0x05	; 5
    1058:	09 f4       	brne	.+2      	; 0x105c <main+0x50c>
    105a:	4e c0       	rjmp	.+156    	; 0x10f8 <main+0x5a8>
    105c:	56 c0       	rjmp	.+172    	; 0x110a <main+0x5ba>
							case 0:
								if (var_mat[mVar] <= var_mat[1]) var_mat[mVar] = 100;
    105e:	d8 01       	movw	r26, r16
    1060:	9c 91       	ld	r25, X
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	8c 91       	ld	r24, X
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	89 17       	cp	r24, r25
    106a:	10 f0       	brcs	.+4      	; 0x1070 <main+0x520>
    106c:	f4 e6       	ldi	r31, 0x64	; 100
    106e:	fc 93       	st	X, r31
								if (var_mat[2] > var_mat[mVar]) var_mat[2] = var_mat[mVar] - 1;
    1070:	d8 01       	movw	r26, r16
    1072:	8c 91       	ld	r24, X
    1074:	12 96       	adiw	r26, 0x02	; 2
    1076:	9c 91       	ld	r25, X
    1078:	12 97       	sbiw	r26, 0x02	; 2
    107a:	89 17       	cp	r24, r25
    107c:	08 f0       	brcs	.+2      	; 0x1080 <main+0x530>
    107e:	45 c0       	rjmp	.+138    	; 0x110a <main+0x5ba>
    1080:	81 50       	subi	r24, 0x01	; 1
    1082:	12 96       	adiw	r26, 0x02	; 2
    1084:	8c 93       	st	X, r24
    1086:	41 c0       	rjmp	.+130    	; 0x110a <main+0x5ba>
							break;
							case 1:
								if (var_mat[mVar] <= 0) var_mat[mVar] = var_mat[0];
    1088:	d8 01       	movw	r26, r16
    108a:	11 96       	adiw	r26, 0x01	; 1
    108c:	8c 91       	ld	r24, X
    108e:	11 97       	sbiw	r26, 0x01	; 1
    1090:	81 11       	cpse	r24, r1
    1092:	03 c0       	rjmp	.+6      	; 0x109a <main+0x54a>
    1094:	8c 91       	ld	r24, X
    1096:	11 96       	adiw	r26, 0x01	; 1
    1098:	8c 93       	st	X, r24
								if (var_mat[2] > var_mat[mVar]) var_mat[2] = var_mat[mVar] - 1;
    109a:	d8 01       	movw	r26, r16
    109c:	11 96       	adiw	r26, 0x01	; 1
    109e:	8c 91       	ld	r24, X
    10a0:	11 97       	sbiw	r26, 0x01	; 1
    10a2:	12 96       	adiw	r26, 0x02	; 2
    10a4:	9c 91       	ld	r25, X
    10a6:	12 97       	sbiw	r26, 0x02	; 2
    10a8:	89 17       	cp	r24, r25
    10aa:	78 f5       	brcc	.+94     	; 0x110a <main+0x5ba>
    10ac:	81 50       	subi	r24, 0x01	; 1
    10ae:	12 96       	adiw	r26, 0x02	; 2
    10b0:	8c 93       	st	X, r24
    10b2:	2b c0       	rjmp	.+86     	; 0x110a <main+0x5ba>
							break;
							case 2:
								if (var_mat[mVar] <= var_mat[1]) var_mat[mVar] = var_mat[0] + 1;
    10b4:	d8 01       	movw	r26, r16
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	9c 91       	ld	r25, X
    10ba:	12 97       	sbiw	r26, 0x02	; 2
    10bc:	11 96       	adiw	r26, 0x01	; 1
    10be:	8c 91       	ld	r24, X
    10c0:	11 97       	sbiw	r26, 0x01	; 1
    10c2:	89 17       	cp	r24, r25
    10c4:	10 f1       	brcs	.+68     	; 0x110a <main+0x5ba>
    10c6:	8c 91       	ld	r24, X
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	12 96       	adiw	r26, 0x02	; 2
    10cc:	8c 93       	st	X, r24
    10ce:	1d c0       	rjmp	.+58     	; 0x110a <main+0x5ba>
							break;
							case 3:
								if (var_mat[mVar] <= 0) var_mat[mVar] = 31;
    10d0:	d8 01       	movw	r26, r16
    10d2:	13 96       	adiw	r26, 0x03	; 3
    10d4:	8c 91       	ld	r24, X
    10d6:	13 97       	sbiw	r26, 0x03	; 3
    10d8:	81 11       	cpse	r24, r1
    10da:	17 c0       	rjmp	.+46     	; 0x110a <main+0x5ba>
    10dc:	ff e1       	ldi	r31, 0x1F	; 31
    10de:	13 96       	adiw	r26, 0x03	; 3
    10e0:	fc 93       	st	X, r31
    10e2:	13 c0       	rjmp	.+38     	; 0x110a <main+0x5ba>
							break;
							case 4:
								if (var_mat[mVar] <= 0) var_mat[mVar] = 251;
    10e4:	d8 01       	movw	r26, r16
    10e6:	14 96       	adiw	r26, 0x04	; 4
    10e8:	8c 91       	ld	r24, X
    10ea:	14 97       	sbiw	r26, 0x04	; 4
    10ec:	81 11       	cpse	r24, r1
    10ee:	0d c0       	rjmp	.+26     	; 0x110a <main+0x5ba>
    10f0:	fb ef       	ldi	r31, 0xFB	; 251
    10f2:	14 96       	adiw	r26, 0x04	; 4
    10f4:	fc 93       	st	X, r31
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <main+0x5ba>
							break;
							case 5:
								if (var_mat[mVar] <= 0) var_mat[mVar] = 251;
    10f8:	d8 01       	movw	r26, r16
    10fa:	15 96       	adiw	r26, 0x05	; 5
    10fc:	8c 91       	ld	r24, X
    10fe:	15 97       	sbiw	r26, 0x05	; 5
    1100:	81 11       	cpse	r24, r1
    1102:	03 c0       	rjmp	.+6      	; 0x110a <main+0x5ba>
    1104:	fb ef       	ldi	r31, 0xFB	; 251
    1106:	15 96       	adiw	r26, 0x05	; 5
    1108:	fc 93       	st	X, r31
							break;
						}
						var_mat[mVar] -= 1;
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	e7 57       	subi	r30, 0x77	; 119
    110e:	fe 4f       	sbci	r31, 0xFE	; 254
    1110:	80 81       	ld	r24, Z
    1112:	81 50       	subi	r24, 0x01	; 1
    1114:	80 83       	st	Z, r24
    1116:	bc c0       	rjmp	.+376    	; 0x1290 <main+0x740>
						
					// alarm setup
					} else if (mMode == 2) {
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	09 f0       	breq	.+2      	; 0x111e <main+0x5ce>
    111c:	b9 c0       	rjmp	.+370    	; 0x1290 <main+0x740>
						switch (mVar) {
    111e:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
    1122:	e2 30       	cpi	r30, 0x02	; 2
    1124:	e1 f0       	breq	.+56     	; 0x115e <main+0x60e>
    1126:	28 f4       	brcc	.+10     	; 0x1132 <main+0x5e2>
    1128:	ee 23       	and	r30, r30
    112a:	41 f0       	breq	.+16     	; 0x113c <main+0x5ec>
    112c:	e1 30       	cpi	r30, 0x01	; 1
    112e:	69 f0       	breq	.+26     	; 0x114a <main+0x5fa>
    1130:	31 c0       	rjmp	.+98     	; 0x1194 <main+0x644>
    1132:	e3 30       	cpi	r30, 0x03	; 3
    1134:	f1 f0       	breq	.+60     	; 0x1172 <main+0x622>
    1136:	e4 30       	cpi	r30, 0x04	; 4
    1138:	29 f1       	breq	.+74     	; 0x1184 <main+0x634>
    113a:	2c c0       	rjmp	.+88     	; 0x1194 <main+0x644>
							case 0:
								if (alarms_mat[mVar] <= 1) alarms_mat[mVar] = 51;
    113c:	d7 01       	movw	r26, r14
    113e:	8c 91       	ld	r24, X
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	40 f5       	brcc	.+80     	; 0x1194 <main+0x644>
    1144:	f3 e3       	ldi	r31, 0x33	; 51
    1146:	fc 93       	st	X, r31
    1148:	25 c0       	rjmp	.+74     	; 0x1194 <main+0x644>
							break;
							case 1:
								if (alarms_mat[mVar] <= 0) alarms_mat[mVar] = 100;
    114a:	d7 01       	movw	r26, r14
    114c:	11 96       	adiw	r26, 0x01	; 1
    114e:	8c 91       	ld	r24, X
    1150:	11 97       	sbiw	r26, 0x01	; 1
    1152:	81 11       	cpse	r24, r1
    1154:	1f c0       	rjmp	.+62     	; 0x1194 <main+0x644>
    1156:	f4 e6       	ldi	r31, 0x64	; 100
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	fc 93       	st	X, r31
    115c:	1b c0       	rjmp	.+54     	; 0x1194 <main+0x644>
							break;
							case 2:
								if (alarms_mat[mVar] <= 0) alarms_mat[mVar] = 100;
    115e:	d7 01       	movw	r26, r14
    1160:	12 96       	adiw	r26, 0x02	; 2
    1162:	8c 91       	ld	r24, X
    1164:	12 97       	sbiw	r26, 0x02	; 2
    1166:	81 11       	cpse	r24, r1
    1168:	15 c0       	rjmp	.+42     	; 0x1194 <main+0x644>
    116a:	f4 e6       	ldi	r31, 0x64	; 100
    116c:	12 96       	adiw	r26, 0x02	; 2
    116e:	fc 93       	st	X, r31
    1170:	11 c0       	rjmp	.+34     	; 0x1194 <main+0x644>
							break;
							case 3:
								alarms_mat[mVar] = alarms_mat[mVar] % 2 + 1;
    1172:	d7 01       	movw	r26, r14
    1174:	13 96       	adiw	r26, 0x03	; 3
    1176:	8c 91       	ld	r24, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	8f 5f       	subi	r24, 0xFF	; 255
    117e:	13 96       	adiw	r26, 0x03	; 3
    1180:	8c 93       	st	X, r24
							break;
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <main+0x644>
							case 4:
								alarms_mat[mVar] = alarms_mat[mVar] % 2 + 1;
    1184:	d7 01       	movw	r26, r14
    1186:	14 96       	adiw	r26, 0x04	; 4
    1188:	8c 91       	ld	r24, X
    118a:	14 97       	sbiw	r26, 0x04	; 4
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	14 96       	adiw	r26, 0x04	; 4
    1192:	8c 93       	st	X, r24
							break;
						}
						alarms_mat[mVar] -= 1;
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	ec 57       	subi	r30, 0x7C	; 124
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	80 81       	ld	r24, Z
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	80 83       	st	Z, r24
    11a0:	77 c0       	rjmp	.+238    	; 0x1290 <main+0x740>
					}			
				break;
				case 3:
					if (!mSelect) {
    11a2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
    11a6:	81 11       	cpse	r24, r1
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <main+0x660>
						mSelect = 1;
    11aa:	70 92 80 01 	sts	0x0180, r7	; 0x800180 <mSelect>
    11ae:	70 c0       	rjmp	.+224    	; 0x1290 <main+0x740>
					} else {
						password[mVar] -= 1;
    11b0:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	ed 56       	subi	r30, 0x6D	; 109
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	80 81       	ld	r24, Z
    11bc:	81 50       	subi	r24, 0x01	; 1
    11be:	80 83       	st	Z, r24
    11c0:	67 c0       	rjmp	.+206    	; 0x1290 <main+0x740>
					}
				break;
				case 4:
					if (!mSelect) {
    11c2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
    11c6:	81 11       	cpse	r24, r1
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <main+0x680>
						mSelect = 1;
    11ca:	70 92 80 01 	sts	0x0180, r7	; 0x800180 <mSelect>
    11ce:	60 c0       	rjmp	.+192    	; 0x1290 <main+0x740>
						} else {
						tmpPassword[mVar] -= 1;
    11d0:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <mVar>
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	e1 57       	subi	r30, 0x71	; 113
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	80 81       	ld	r24, Z
    11dc:	81 50       	subi	r24, 0x01	; 1
    11de:	80 83       	st	Z, r24
    11e0:	57 c0       	rjmp	.+174    	; 0x1290 <main+0x740>
					}
				break;
			}
		} else if (bit_is_clear(PINB, 2)) {
    11e2:	b2 99       	sbic	0x16, 2	; 22
    11e4:	55 c0       	rjmp	.+170    	; 0x1290 <main+0x740>
			switch (fMode) {
    11e6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <fMode>
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	a1 f0       	breq	.+40     	; 0x1216 <main+0x6c6>
    11ee:	84 30       	cpi	r24, 0x04	; 4
    11f0:	69 f1       	breq	.+90     	; 0x124c <main+0x6fc>
    11f2:	82 30       	cpi	r24, 0x02	; 2
    11f4:	09 f0       	breq	.+2      	; 0x11f8 <main+0x6a8>
    11f6:	4c c0       	rjmp	.+152    	; 0x1290 <main+0x740>
				case 2:								
					if (mSelect){						
    11f8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
    11fc:	88 23       	and	r24, r24
    11fe:	19 f0       	breq	.+6      	; 0x1206 <main+0x6b6>
						mSelect = 0;
    1200:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <mSelect>
    1204:	45 c0       	rjmp	.+138    	; 0x1290 <main+0x740>
					} else if (subMenu){
    1206:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <main+0x6c0>
    120e:	40 c0       	rjmp	.+128    	; 0x1290 <main+0x740>
						subMenu = 0;
    1210:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
    1214:	3d c0       	rjmp	.+122    	; 0x1290 <main+0x740>
					}
				break;
				case 3:
					if (!mSelect) {
    1216:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
    121a:	81 11       	cpse	r24, r1
    121c:	14 c0       	rjmp	.+40     	; 0x1246 <main+0x6f6>
						pswSet = 1;
    121e:	70 92 9c 01 	sts	0x019C, r7	; 0x80019c <pswSet>
						pswUse = !checkPsw("0000");
    1222:	89 e7       	ldi	r24, 0x79	; 121
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	0e 94 1f 04 	call	0x83e	; 0x83e <checkPsw>
    122a:	97 2d       	mov	r25, r7
    122c:	81 11       	cpse	r24, r1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <pswUse>
						mAccess = !pswUse;
    1234:	97 2d       	mov	r25, r7
    1236:	81 11       	cpse	r24, r1
    1238:	01 c0       	rjmp	.+2      	; 0x123c <main+0x6ec>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <mAccess>
						mVar = 0;
    1240:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <mVar>
    1244:	25 c0       	rjmp	.+74     	; 0x1290 <main+0x740>
					} else {
						mSelect = 0;
    1246:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <mSelect>
    124a:	22 c0       	rjmp	.+68     	; 0x1290 <main+0x740>
					}
				break;
				case 4:
					if (mSelect) {
    124c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <mSelect>
    1250:	88 23       	and	r24, r24
    1252:	19 f0       	breq	.+6      	; 0x125a <main+0x70a>
						mSelect = 0;
    1254:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <mSelect>
    1258:	1b c0       	rjmp	.+54     	; 0x1290 <main+0x740>
					} else if (checkPsw(tmpPassword)) {
    125a:	8f e8       	ldi	r24, 0x8F	; 143
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 1f 04 	call	0x83e	; 0x83e <checkPsw>
    1262:	88 23       	and	r24, r24
    1264:	59 f0       	breq	.+22     	; 0x127c <main+0x72c>
						mAccess = 1;
    1266:	70 92 9a 01 	sts	0x019A, r7	; 0x80019a <mAccess>
						fMode = 2;
    126a:	20 92 83 01 	sts	0x0183, r2	; 0x800183 <fMode>
						mVar = 1;
    126e:	70 92 81 01 	sts	0x0181, r7	; 0x800181 <mVar>
						resetPsw(tmpPassword);
    1272:	8f e8       	ldi	r24, 0x8F	; 143
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	0e 94 4f 03 	call	0x69e	; 0x69e <resetPsw>
    127a:	0a c0       	rjmp	.+20     	; 0x1290 <main+0x740>
					} else {
						pswError = 1;
    127c:	70 92 99 01 	sts	0x0199, r7	; 0x800199 <pswError>
						mAccess = 0;
    1280:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <mAccess>
						mVar = 0;
    1284:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <mVar>
						resetPsw(tmpPassword);
    1288:	8f e8       	ldi	r24, 0x8F	; 143
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 4f 03 	call	0x69e	; 0x69e <resetPsw>
    1290:	bf ef       	ldi	r27, 0xFF	; 255
    1292:	ef e7       	ldi	r30, 0x7F	; 127
    1294:	f4 e0       	ldi	r31, 0x04	; 4
    1296:	b1 50       	subi	r27, 0x01	; 1
    1298:	e0 40       	sbci	r30, 0x00	; 0
    129a:	f0 40       	sbci	r31, 0x00	; 0
    129c:	e1 f7       	brne	.-8      	; 0x1296 <main+0x746>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <main+0x750>
    12a0:	00 00       	nop
    12a2:	11 cd       	rjmp	.-1502   	; 0xcc6 <main+0x176>
					if (!subMenu) {								
						// switch between sub menus
						mMode = (mMode + 1) % 3;
					} else if (!mSelect) {
						// change sub menu items 0 = var, 1 = mode, 2 = alarm
						mVar = (mVar + 1) % (mMode == 0 ? 6 :  mMode == 1 ? 3 : 5);
    12a4:	65 2d       	mov	r22, r5
    12a6:	76 2d       	mov	r23, r6
    12a8:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__divmodhi4>
    12ac:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <mVar>
    12b0:	ef cf       	rjmp	.-34     	; 0x1290 <main+0x740>
    12b2:	b6 01       	movw	r22, r12
    12b4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__divmodhi4>
    12b8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <mVar>
						// mode changes directly
						if (mMode == 1) modeSelect = mVar;
    12bc:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <modeSelect>
    12c0:	e7 cf       	rjmp	.-50     	; 0x1290 <main+0x740>

000012c2 <__divmodhi4>:
    12c2:	97 fb       	bst	r25, 7
    12c4:	07 2e       	mov	r0, r23
    12c6:	16 f4       	brtc	.+4      	; 0x12cc <__divmodhi4+0xa>
    12c8:	00 94       	com	r0
    12ca:	07 d0       	rcall	.+14     	; 0x12da <__divmodhi4_neg1>
    12cc:	77 fd       	sbrc	r23, 7
    12ce:	09 d0       	rcall	.+18     	; 0x12e2 <__divmodhi4_neg2>
    12d0:	0e 94 75 09 	call	0x12ea	; 0x12ea <__udivmodhi4>
    12d4:	07 fc       	sbrc	r0, 7
    12d6:	05 d0       	rcall	.+10     	; 0x12e2 <__divmodhi4_neg2>
    12d8:	3e f4       	brtc	.+14     	; 0x12e8 <__divmodhi4_exit>

000012da <__divmodhi4_neg1>:
    12da:	90 95       	com	r25
    12dc:	81 95       	neg	r24
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__divmodhi4_neg2>:
    12e2:	70 95       	com	r23
    12e4:	61 95       	neg	r22
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255

000012e8 <__divmodhi4_exit>:
    12e8:	08 95       	ret

000012ea <__udivmodhi4>:
    12ea:	aa 1b       	sub	r26, r26
    12ec:	bb 1b       	sub	r27, r27
    12ee:	51 e1       	ldi	r21, 0x11	; 17
    12f0:	07 c0       	rjmp	.+14     	; 0x1300 <__udivmodhi4_ep>

000012f2 <__udivmodhi4_loop>:
    12f2:	aa 1f       	adc	r26, r26
    12f4:	bb 1f       	adc	r27, r27
    12f6:	a6 17       	cp	r26, r22
    12f8:	b7 07       	cpc	r27, r23
    12fa:	10 f0       	brcs	.+4      	; 0x1300 <__udivmodhi4_ep>
    12fc:	a6 1b       	sub	r26, r22
    12fe:	b7 0b       	sbc	r27, r23

00001300 <__udivmodhi4_ep>:
    1300:	88 1f       	adc	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	5a 95       	dec	r21
    1306:	a9 f7       	brne	.-22     	; 0x12f2 <__udivmodhi4_loop>
    1308:	80 95       	com	r24
    130a:	90 95       	com	r25
    130c:	bc 01       	movw	r22, r24
    130e:	cd 01       	movw	r24, r26
    1310:	08 95       	ret

00001312 <__itoa_ncheck>:
    1312:	bb 27       	eor	r27, r27
    1314:	4a 30       	cpi	r20, 0x0A	; 10
    1316:	31 f4       	brne	.+12     	; 0x1324 <__itoa_ncheck+0x12>
    1318:	99 23       	and	r25, r25
    131a:	22 f4       	brpl	.+8      	; 0x1324 <__itoa_ncheck+0x12>
    131c:	bd e2       	ldi	r27, 0x2D	; 45
    131e:	90 95       	com	r25
    1320:	81 95       	neg	r24
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	0c 94 95 09 	jmp	0x132a	; 0x132a <__utoa_common>

00001328 <__utoa_ncheck>:
    1328:	bb 27       	eor	r27, r27

0000132a <__utoa_common>:
    132a:	fb 01       	movw	r30, r22
    132c:	55 27       	eor	r21, r21
    132e:	aa 27       	eor	r26, r26
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	aa 1f       	adc	r26, r26
    1336:	a4 17       	cp	r26, r20
    1338:	10 f0       	brcs	.+4      	; 0x133e <__utoa_common+0x14>
    133a:	a4 1b       	sub	r26, r20
    133c:	83 95       	inc	r24
    133e:	50 51       	subi	r21, 0x10	; 16
    1340:	b9 f7       	brne	.-18     	; 0x1330 <__utoa_common+0x6>
    1342:	a0 5d       	subi	r26, 0xD0	; 208
    1344:	aa 33       	cpi	r26, 0x3A	; 58
    1346:	08 f0       	brcs	.+2      	; 0x134a <__utoa_common+0x20>
    1348:	a9 5d       	subi	r26, 0xD9	; 217
    134a:	a1 93       	st	Z+, r26
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	79 f7       	brne	.-34     	; 0x132e <__utoa_common+0x4>
    1350:	b1 11       	cpse	r27, r1
    1352:	b1 93       	st	Z+, r27
    1354:	11 92       	st	Z+, r1
    1356:	cb 01       	movw	r24, r22
    1358:	0c 94 ae 09 	jmp	0x135c	; 0x135c <strrev>

0000135c <strrev>:
    135c:	dc 01       	movw	r26, r24
    135e:	fc 01       	movw	r30, r24
    1360:	67 2f       	mov	r22, r23
    1362:	71 91       	ld	r23, Z+
    1364:	77 23       	and	r23, r23
    1366:	e1 f7       	brne	.-8      	; 0x1360 <strrev+0x4>
    1368:	32 97       	sbiw	r30, 0x02	; 2
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <strrev+0x18>
    136c:	7c 91       	ld	r23, X
    136e:	6d 93       	st	X+, r22
    1370:	70 83       	st	Z, r23
    1372:	62 91       	ld	r22, -Z
    1374:	ae 17       	cp	r26, r30
    1376:	bf 07       	cpc	r27, r31
    1378:	c8 f3       	brcs	.-14     	; 0x136c <strrev+0x10>
    137a:	08 95       	ret

0000137c <_exit>:
    137c:	f8 94       	cli

0000137e <__stop_program>:
    137e:	ff cf       	rjmp	.-2      	; 0x137e <__stop_program>
