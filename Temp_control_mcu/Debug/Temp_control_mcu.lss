
Temp_control_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001306  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00001306  0000139a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  0080016e  0080016e  000014a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002033  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a51  00000000  00000000  0000366f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c4  00000000  00000000  000040c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00005484  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a0  00000000  00000000  000057d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f61  00000000  00000000  00005e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006dd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 04 	call	0x9da	; 0x9da <main>
      8a:	0c 94 81 09 	jmp	0x1302	; 0x1302 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:
      92:	97 9a       	sbi	0x12, 7	; 18
      94:	00 c0       	rjmp	.+0      	; 0x96 <toggle_e+0x4>
      96:	97 98       	cbi	0x12, 7	; 18
      98:	08 95       	ret

0000009a <lcd_write>:
      9a:	cf 93       	push	r28
      9c:	c8 2f       	mov	r28, r24
      9e:	66 23       	and	r22, r22
      a0:	11 f0       	breq	.+4      	; 0xa6 <lcd_write+0xc>
      a2:	95 9a       	sbi	0x12, 5	; 18
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <lcd_write+0xe>
      a6:	95 98       	cbi	0x12, 5	; 18
      a8:	96 98       	cbi	0x12, 6	; 18
      aa:	bc 9a       	sbi	0x17, 4	; 23
      ac:	bd 9a       	sbi	0x17, 5	; 23
      ae:	be 9a       	sbi	0x17, 6	; 23
      b0:	bf 9a       	sbi	0x17, 7	; 23
      b2:	c7 98       	cbi	0x18, 7	; 24
      b4:	c6 98       	cbi	0x18, 6	; 24
      b6:	c5 98       	cbi	0x18, 5	; 24
      b8:	c4 98       	cbi	0x18, 4	; 24
      ba:	cc 23       	and	r28, r28
      bc:	0c f4       	brge	.+2      	; 0xc0 <lcd_write+0x26>
      be:	c7 9a       	sbi	0x18, 7	; 24
      c0:	c6 fd       	sbrc	r28, 6
      c2:	c6 9a       	sbi	0x18, 6	; 24
      c4:	c5 fd       	sbrc	r28, 5
      c6:	c5 9a       	sbi	0x18, 5	; 24
      c8:	c4 fd       	sbrc	r28, 4
      ca:	c4 9a       	sbi	0x18, 4	; 24
      cc:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
      d0:	c7 98       	cbi	0x18, 7	; 24
      d2:	c6 98       	cbi	0x18, 6	; 24
      d4:	c5 98       	cbi	0x18, 5	; 24
      d6:	c4 98       	cbi	0x18, 4	; 24
      d8:	c3 fd       	sbrc	r28, 3
      da:	c7 9a       	sbi	0x18, 7	; 24
      dc:	c2 fd       	sbrc	r28, 2
      de:	c6 9a       	sbi	0x18, 6	; 24
      e0:	c1 fd       	sbrc	r28, 1
      e2:	c5 9a       	sbi	0x18, 5	; 24
      e4:	c0 fd       	sbrc	r28, 0
      e6:	c4 9a       	sbi	0x18, 4	; 24
      e8:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
      ec:	c4 9a       	sbi	0x18, 4	; 24
      ee:	c5 9a       	sbi	0x18, 5	; 24
      f0:	c6 9a       	sbi	0x18, 6	; 24
      f2:	c7 9a       	sbi	0x18, 7	; 24
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <lcd_read>:
      f8:	88 23       	and	r24, r24
      fa:	11 f0       	breq	.+4      	; 0x100 <lcd_read+0x8>
      fc:	95 9a       	sbi	0x12, 5	; 18
      fe:	01 c0       	rjmp	.+2      	; 0x102 <lcd_read+0xa>
     100:	95 98       	cbi	0x12, 5	; 18
     102:	96 9a       	sbi	0x12, 6	; 18
     104:	bc 98       	cbi	0x17, 4	; 23
     106:	bd 98       	cbi	0x17, 5	; 23
     108:	be 98       	cbi	0x17, 6	; 23
     10a:	bf 98       	cbi	0x17, 7	; 23
     10c:	97 9a       	sbi	0x12, 7	; 18
     10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_read+0x18>
     110:	b4 9b       	sbis	0x16, 4	; 22
     112:	02 c0       	rjmp	.+4      	; 0x118 <lcd_read+0x20>
     114:	80 e1       	ldi	r24, 0x10	; 16
     116:	01 c0       	rjmp	.+2      	; 0x11a <lcd_read+0x22>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	b5 99       	sbic	0x16, 5	; 22
     11c:	80 62       	ori	r24, 0x20	; 32
     11e:	b6 99       	sbic	0x16, 6	; 22
     120:	80 64       	ori	r24, 0x40	; 64
     122:	b7 99       	sbic	0x16, 7	; 22
     124:	80 68       	ori	r24, 0x80	; 128
     126:	97 98       	cbi	0x12, 7	; 18
     128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x32>
     12a:	97 9a       	sbi	0x12, 7	; 18
     12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_read+0x36>
     12e:	b4 99       	sbic	0x16, 4	; 22
     130:	81 60       	ori	r24, 0x01	; 1
     132:	b5 99       	sbic	0x16, 5	; 22
     134:	82 60       	ori	r24, 0x02	; 2
     136:	b6 99       	sbic	0x16, 6	; 22
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	b7 99       	sbic	0x16, 7	; 22
     13c:	88 60       	ori	r24, 0x08	; 8
     13e:	97 98       	cbi	0x12, 7	; 18
     140:	08 95       	ret

00000142 <lcd_waitbusy>:
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
     148:	88 23       	and	r24, r24
     14a:	dc f3       	brlt	.-10     	; 0x142 <lcd_waitbusy>
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_waitbusy+0xe>
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_read>
     15a:	08 95       	ret

0000015c <lcd_command>:
     15c:	cf 93       	push	r28
     15e:	c8 2f       	mov	r28, r24
     160:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	8c 2f       	mov	r24, r28
     168:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
     16c:	cf 91       	pop	r28
     16e:	08 95       	ret

00000170 <lcd_data>:
     170:	cf 93       	push	r28
     172:	c8 2f       	mov	r28, r24
     174:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <lcd_gotoxy>:
     184:	61 11       	cpse	r22, r1
     186:	04 c0       	rjmp	.+8      	; 0x190 <lcd_gotoxy+0xc>
     188:	80 58       	subi	r24, 0x80	; 128
     18a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     18e:	08 95       	ret
     190:	80 54       	subi	r24, 0x40	; 64
     192:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     196:	08 95       	ret

00000198 <lcd_clrscr>:
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     19e:	08 95       	ret

000001a0 <lcd_putc>:
     1a0:	cf 93       	push	r28
     1a2:	c8 2f       	mov	r28, r24
     1a4:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_waitbusy>
     1a8:	ca 30       	cpi	r28, 0x0A	; 10
     1aa:	49 f4       	brne	.+18     	; 0x1be <lcd_putc+0x1e>
     1ac:	80 34       	cpi	r24, 0x40	; 64
     1ae:	10 f0       	brcs	.+4      	; 0x1b4 <lcd_putc+0x14>
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd_putc+0x16>
     1b4:	80 e4       	ldi	r24, 0x40	; 64
     1b6:	80 58       	subi	r24, 0x80	; 128
     1b8:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <lcd_putc+0x26>
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	8c 2f       	mov	r24, r28
     1c2:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_write>
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <lcd_puts>:
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	ec 01       	movw	r28, r24
     1d0:	21 96       	adiw	r28, 0x01	; 1
     1d2:	fc 01       	movw	r30, r24
     1d4:	80 81       	ld	r24, Z
     1d6:	88 23       	and	r24, r24
     1d8:	29 f0       	breq	.+10     	; 0x1e4 <lcd_puts+0x1a>
     1da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     1de:	89 91       	ld	r24, Y+
     1e0:	81 11       	cpse	r24, r1
     1e2:	fb cf       	rjmp	.-10     	; 0x1da <lcd_puts+0x10>
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <lcd_init>:
     1ea:	1f 93       	push	r17
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	18 2f       	mov	r17, r24
     1f2:	8d 9a       	sbi	0x11, 5	; 17
     1f4:	8e 9a       	sbi	0x11, 6	; 17
     1f6:	8f 9a       	sbi	0x11, 7	; 17
     1f8:	bc 9a       	sbi	0x17, 4	; 23
     1fa:	bd 9a       	sbi	0x17, 5	; 23
     1fc:	be 9a       	sbi	0x17, 6	; 23
     1fe:	bf 9a       	sbi	0x17, 7	; 23
     200:	80 e3       	ldi	r24, 0x30	; 48
     202:	93 e7       	ldi	r25, 0x73	; 115
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x1a>
     208:	c5 9a       	sbi	0x18, 5	; 24
     20a:	c4 9a       	sbi	0x18, 4	; 24
     20c:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     210:	80 ef       	ldi	r24, 0xF0	; 240
     212:	93 e2       	ldi	r25, 0x23	; 35
     214:	01 97       	sbiw	r24, 0x01	; 1
     216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init+0x2a>
     218:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     21c:	c5 e7       	ldi	r28, 0x75	; 117
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	ce 01       	movw	r24, r28
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x38>
     226:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     22a:	ce 01       	movw	r24, r28
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_init+0x42>
     230:	c4 98       	cbi	0x18, 4	; 24
     232:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
     236:	21 97       	sbiw	r28, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <lcd_init+0x4c>
     23a:	88 e2       	ldi	r24, 0x28	; 40
     23c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     240:	88 e0       	ldi	r24, 0x08	; 8
     242:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     246:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
     24a:	86 e0       	ldi	r24, 0x06	; 6
     24c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     250:	81 2f       	mov	r24, r17
     252:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	08 95       	ret

0000025e <showTemperature>:
/*
** Display functions
*/

// Main display
void showTemperature() {
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
     266:	60 97       	sbiw	r28, 0x10	; 16
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	f8 94       	cli
     26c:	de bf       	out	0x3e, r29	; 62
     26e:	0f be       	out	0x3f, r0	; 63
     270:	cd bf       	out	0x3d, r28	; 61
	lcd_clrscr();
     272:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     276:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <temp>
     27a:	4a e0       	ldi	r20, 0x0A	; 10
     27c:	be 01       	movw	r22, r28
     27e:	6f 5f       	subi	r22, 0xFF	; 255
     280:	7f 4f       	sbci	r23, 0xFF	; 255
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>

	char adcStr[16];
	itoa(temp, adcStr, 10);
	
	lcd_puts("Temp: ");
     288:	80 e6       	ldi	r24, 0x60	; 96
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_puts(adcStr);
     290:	ce 01       	movw	r24, r28
     292:	01 96       	adiw	r24, 0x01	; 1
     294:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_putc('.');
     298:	8e e2       	ldi	r24, 0x2E	; 46
     29a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	halfCelsius ? lcd_putc('5') : lcd_putc('0');
     29e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <halfCelsius>
     2a2:	88 23       	and	r24, r24
     2a4:	21 f0       	breq	.+8      	; 0x2ae <showTemperature+0x50>
     2a6:	85 e3       	ldi	r24, 0x35	; 53
     2a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <showTemperature+0x56>
     2ae:	80 e3       	ldi	r24, 0x30	; 48
     2b0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	lcd_putc(223);        //degree symbol
     2b4:	8f ed       	ldi	r24, 0xDF	; 223
     2b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	lcd_puts("C  ");
     2ba:	87 e6       	ldi	r24, 0x67	; 103
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_gotoxy(0, 1);
     2c2:	61 e0       	ldi	r22, 0x01	; 1
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_puts("Mode: ");
     2ca:	8b e6       	ldi	r24, 0x6B	; 107
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_puts(mode[modeSelect]);
     2d2:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <modeSelect>
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	ed 55       	subi	r30, 0x5D	; 93
     2de:	fe 4f       	sbci	r31, 0xFE	; 254
     2e0:	80 81       	ld	r24, Z
     2e2:	91 81       	ldd	r25, Z+1	; 0x01
     2e4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_gotoxy(11, 1);
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	8b e0       	ldi	r24, 0x0B	; 11
     2ec:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	if (alarms_mat[4]) lcd_putc(0); // lock icon
     2f0:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <alarms_mat+0x4>
     2f4:	88 23       	and	r24, r24
     2f6:	19 f0       	breq	.+6      	; 0x2fe <showTemperature+0xa0>
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	lcd_gotoxy(13, 1);
     2fe:	61 e0       	ldi	r22, 0x01	; 1
     300:	8d e0       	ldi	r24, 0x0D	; 13
     302:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	if (alarms_mat[3]) lcd_putc(1); // bell icon
     306:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <alarms_mat+0x3>
     30a:	88 23       	and	r24, r24
     30c:	19 f0       	breq	.+6      	; 0x314 <showTemperature+0xb6>
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
}
     314:	60 96       	adiw	r28, 0x10	; 16
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <showMsg>:

// Starting message
void showMsg() {
	lcd_clrscr();
     326:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
	lcd_gotoxy(3, 0);
     32a:	60 e0       	ldi	r22, 0x00	; 0
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_puts("Welcome to");
     332:	82 e7       	ldi	r24, 0x72	; 114
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	lcd_gotoxy(1, 1);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_puts("temp. control");
     342:	8d e7       	ldi	r24, 0x7D	; 125
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     34a:	08 95       	ret

0000034c <showMenu>:
}

// Menu display
void showMenu() {
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <showMenu+0x6>
     352:	00 d0       	rcall	.+0      	; 0x354 <showMenu+0x8>
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	lcd_clrscr();
     358:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
	lcd_putc('<');
     35c:	8c e3       	ldi	r24, 0x3C	; 60
     35e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	
	// Menu items
	if (!subMenu){
     362:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     366:	81 11       	cpse	r24, r1
     368:	23 c0       	rjmp	.+70     	; 0x3b0 <showMenu+0x64>
		lcd_gotoxy((16 - strlen(menu[mMode])) / 2, 0);
     36a:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <mMode>
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	ee 0f       	add	r30, r30
     372:	ff 1f       	adc	r31, r31
     374:	e4 57       	subi	r30, 0x74	; 116
     376:	fe 4f       	sbci	r31, 0xFE	; 254
     378:	01 90       	ld	r0, Z+
     37a:	f0 81       	ld	r31, Z
     37c:	e0 2d       	mov	r30, r0
     37e:	df 01       	movw	r26, r30
     380:	0d 90       	ld	r0, X+
     382:	00 20       	and	r0, r0
     384:	e9 f7       	brne	.-6      	; 0x380 <showMenu+0x34>
     386:	cf 01       	movw	r24, r30
     388:	8a 1b       	sub	r24, r26
     38a:	9b 0b       	sbc	r25, r27
     38c:	41 96       	adiw	r24, 0x11	; 17
     38e:	96 95       	lsr	r25
     390:	87 95       	ror	r24
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts(menu[mMode]);
     398:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <mMode>
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	ee 0f       	add	r30, r30
     3a0:	ff 1f       	adc	r31, r31
     3a2:	e4 57       	subi	r30, 0x74	; 116
     3a4:	fe 4f       	sbci	r31, 0xFE	; 254
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     3ae:	5a c1       	rjmp	.+692    	; 0x664 <__stack+0x205>
		
	// 'Variables' subMenu items
	} else if (mMode == 0) {
     3b0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <mMode>
     3b4:	81 11       	cpse	r24, r1
     3b6:	90 c0       	rjmp	.+288    	; 0x4d8 <__stack+0x79>
		lcd_gotoxy((16 - strlen(variables[mVar])) / 2, 0);
     3b8:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	e5 55       	subi	r30, 0x55	; 85
     3c4:	fe 4f       	sbci	r31, 0xFE	; 254
     3c6:	01 90       	ld	r0, Z+
     3c8:	f0 81       	ld	r31, Z
     3ca:	e0 2d       	mov	r30, r0
     3cc:	df 01       	movw	r26, r30
     3ce:	0d 90       	ld	r0, X+
     3d0:	00 20       	and	r0, r0
     3d2:	e9 f7       	brne	.-6      	; 0x3ce <showMenu+0x82>
     3d4:	cf 01       	movw	r24, r30
     3d6:	8a 1b       	sub	r24, r26
     3d8:	9b 0b       	sbc	r25, r27
     3da:	41 96       	adiw	r24, 0x11	; 17
     3dc:	96 95       	lsr	r25
     3de:	87 95       	ror	r24
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts(variables[mVar]);
     3e6:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	ee 0f       	add	r30, r30
     3ee:	ff 1f       	adc	r31, r31
     3f0:	e5 55       	subi	r30, 0x55	; 85
     3f2:	fe 4f       	sbci	r31, 0xFE	; 254
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		char buffer[4];
		
		if (!mSelect) {
     3fc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     400:	81 11       	cpse	r24, r1
     402:	32 c0       	rjmp	.+100    	; 0x468 <__stack+0x9>
			lcd_gotoxy(6, 1);
     404:	61 e0       	ldi	r22, 0x01	; 1
     406:	86 e0       	ldi	r24, 0x06	; 6
     408:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			if (mVar == 0 || mVar == 1 || mVar == 2) {
     40c:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     410:	e3 30       	cpi	r30, 0x03	; 3
     412:	a0 f4       	brcc	.+40     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	e7 58       	subi	r30, 0x87	; 135
     418:	fe 4f       	sbci	r31, 0xFE	; 254
     41a:	80 81       	ld	r24, Z
     41c:	4a e0       	ldi	r20, 0x0A	; 10
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     42a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     42e:	8f ed       	ldi	r24, 0xDF	; 223
     430:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     434:	83 e4       	ldi	r24, 0x43	; 67
     436:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     43a:	14 c1       	rjmp	.+552    	; 0x664 <__stack+0x205>
			} else {
				lcd_putc(' ');
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     442:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	e7 58       	subi	r30, 0x87	; 135
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	80 81       	ld	r24, Z
     44e:	4a e0       	ldi	r20, 0x0A	; 10
     450:	be 01       	movw	r22, r28
     452:	6f 5f       	subi	r22, 0xFF	; 255
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     45c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     460:	80 e2       	ldi	r24, 0x20	; 32
     462:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     466:	fe c0       	rjmp	.+508    	; 0x664 <__stack+0x205>
			}
		} else {
			lcd_gotoxy(5, 1);
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			lcd_putc('<');
     470:	8c e3       	ldi	r24, 0x3C	; 60
     472:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			if (mVar == 0 || mVar == 1 || mVar == 2) {
     476:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     47a:	e3 30       	cpi	r30, 0x03	; 3
     47c:	a0 f4       	brcc	.+40     	; 0x4a6 <__stack+0x47>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	e7 58       	subi	r30, 0x87	; 135
     482:	fe 4f       	sbci	r31, 0xFE	; 254
     484:	80 81       	ld	r24, Z
     486:	4a e0       	ldi	r20, 0x0A	; 10
     488:	be 01       	movw	r22, r28
     48a:	6f 5f       	subi	r22, 0xFF	; 255
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     494:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     498:	8f ed       	ldi	r24, 0xDF	; 223
     49a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     49e:	83 e4       	ldi	r24, 0x43	; 67
     4a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     4a4:	15 c0       	rjmp	.+42     	; 0x4d0 <__stack+0x71>
			} else {
				lcd_putc(' ');
     4a6:	80 e2       	ldi	r24, 0x20	; 32
     4a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(var_mat[mVar], buffer, 10));
     4ac:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	e7 58       	subi	r30, 0x87	; 135
     4b4:	fe 4f       	sbci	r31, 0xFE	; 254
     4b6:	80 81       	ld	r24, Z
     4b8:	4a e0       	ldi	r20, 0x0A	; 10
     4ba:	be 01       	movw	r22, r28
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     4c6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     4ca:	80 e2       	ldi	r24, 0x20	; 32
     4cc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			}
			lcd_putc('>');
     4d0:	8e e3       	ldi	r24, 0x3E	; 62
     4d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     4d6:	c6 c0       	rjmp	.+396    	; 0x664 <__stack+0x205>
		}
		
	// 'Modes' subMenu items
	} else if (mMode == 1) {
     4d8:	81 30       	cpi	r24, 0x01	; 1
     4da:	89 f5       	brne	.+98     	; 0x53e <__stack+0xdf>
		lcd_gotoxy(5, 0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	85 e0       	ldi	r24, 0x05	; 5
     4e0:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Mode:");
     4e4:	8b e8       	ldi	r24, 0x8B	; 139
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy((14 - strlen(mode[mVar])) / 2, 1);
     4ec:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	ed 55       	subi	r30, 0x5D	; 93
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	01 90       	ld	r0, Z+
     4fc:	f0 81       	ld	r31, Z
     4fe:	e0 2d       	mov	r30, r0
     500:	df 01       	movw	r26, r30
     502:	0d 90       	ld	r0, X+
     504:	00 20       	and	r0, r0
     506:	e9 f7       	brne	.-6      	; 0x502 <__stack+0xa3>
     508:	cf 01       	movw	r24, r30
     50a:	8a 1b       	sub	r24, r26
     50c:	9b 0b       	sbc	r25, r27
     50e:	0f 96       	adiw	r24, 0x0f	; 15
     510:	96 95       	lsr	r25
     512:	87 95       	ror	r24
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_putc('<');
     51a:	8c e3       	ldi	r24, 0x3C	; 60
     51c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		lcd_puts(mode[mVar]);
     520:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	ed 55       	subi	r30, 0x5D	; 93
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_putc('>');
     536:	8e e3       	ldi	r24, 0x3E	; 62
     538:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     53c:	93 c0       	rjmp	.+294    	; 0x664 <__stack+0x205>
		
	// 'Alarms' subMenu items
	} else {
		lcd_gotoxy((16 - strlen(alarms[mVar])) / 2, 0);
     53e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ee 0f       	add	r30, r30
     546:	ff 1f       	adc	r31, r31
     548:	e9 56       	subi	r30, 0x69	; 105
     54a:	fe 4f       	sbci	r31, 0xFE	; 254
     54c:	01 90       	ld	r0, Z+
     54e:	f0 81       	ld	r31, Z
     550:	e0 2d       	mov	r30, r0
     552:	df 01       	movw	r26, r30
     554:	0d 90       	ld	r0, X+
     556:	00 20       	and	r0, r0
     558:	e9 f7       	brne	.-6      	; 0x554 <__stack+0xf5>
     55a:	cf 01       	movw	r24, r30
     55c:	8a 1b       	sub	r24, r26
     55e:	9b 0b       	sbc	r25, r27
     560:	41 96       	adiw	r24, 0x11	; 17
     562:	96 95       	lsr	r25
     564:	87 95       	ror	r24
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts(alarms[mVar]);
     56c:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e9 56       	subi	r30, 0x69	; 105
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	80 81       	ld	r24, Z
     57c:	91 81       	ldd	r25, Z+1	; 0x01
     57e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		char buffer[4];
		
		if (!mSelect) {
     582:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     586:	81 11       	cpse	r24, r1
     588:	34 c0       	rjmp	.+104    	; 0x5f2 <__stack+0x193>
			lcd_gotoxy(6, 1);
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	86 e0       	ldi	r24, 0x06	; 6
     58e:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			if (mVar == 1 || mVar == 2) {
     592:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     596:	8f ef       	ldi	r24, 0xFF	; 255
     598:	8e 0f       	add	r24, r30
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	a0 f4       	brcc	.+40     	; 0x5c6 <__stack+0x167>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	ec 58       	subi	r30, 0x8C	; 140
     5a2:	fe 4f       	sbci	r31, 0xFE	; 254
     5a4:	80 81       	ld	r24, Z
     5a6:	4a e0       	ldi	r20, 0x0A	; 10
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     5b4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     5b8:	8f ed       	ldi	r24, 0xDF	; 223
     5ba:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     5be:	83 e4       	ldi	r24, 0x43	; 67
     5c0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     5c4:	4f c0       	rjmp	.+158    	; 0x664 <__stack+0x205>
			} else {
				lcd_putc(' ');
     5c6:	80 e2       	ldi	r24, 0x20	; 32
     5c8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     5cc:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	ec 58       	subi	r30, 0x8C	; 140
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	80 81       	ld	r24, Z
     5d8:	4a e0       	ldi	r20, 0x0A	; 10
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     5e6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     5ea:	80 e2       	ldi	r24, 0x20	; 32
     5ec:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     5f0:	39 c0       	rjmp	.+114    	; 0x664 <__stack+0x205>
			}
		} else {
			lcd_gotoxy(5, 1);
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	85 e0       	ldi	r24, 0x05	; 5
     5f6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
			lcd_putc('<');
     5fa:	8c e3       	ldi	r24, 0x3C	; 60
     5fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			if (mVar == 1 || mVar == 2) {
     600:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	8e 0f       	add	r24, r30
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	a0 f4       	brcc	.+40     	; 0x634 <__stack+0x1d5>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ec 58       	subi	r30, 0x8C	; 140
     610:	fe 4f       	sbci	r31, 0xFE	; 254
     612:	80 81       	ld	r24, Z
     614:	4a e0       	ldi	r20, 0x0A	; 10
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     622:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(223);
     626:	8f ed       	ldi	r24, 0xDF	; 223
     628:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc('C');
     62c:	83 e4       	ldi	r24, 0x43	; 67
     62e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     632:	15 c0       	rjmp	.+42     	; 0x65e <__stack+0x1ff>
			} else {
				lcd_putc(' ');
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_puts(itoa(alarms_mat[mVar], buffer, 10));
     63a:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	ec 58       	subi	r30, 0x8C	; 140
     642:	fe 4f       	sbci	r31, 0xFE	; 254
     644:	80 81       	ld	r24, Z
     646:	4a e0       	ldi	r20, 0x0A	; 10
     648:	be 01       	movw	r22, r28
     64a:	6f 5f       	subi	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 4c 09 	call	0x1298	; 0x1298 <__itoa_ncheck>
     654:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
				lcd_putc(' ');
     658:	80 e2       	ldi	r24, 0x20	; 32
     65a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
			}
			lcd_putc('>');
     65e:	8e e3       	ldi	r24, 0x3E	; 62
     660:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		}
	}
	
	lcd_gotoxy(15, 0);
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	8f e0       	ldi	r24, 0x0F	; 15
     668:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
	lcd_putc('>');
     66c:	8e e3       	ldi	r24, 0x3E	; 62
     66e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	08 95       	ret

00000680 <resetPsw>:

/*
** Password functions
*/

void resetPsw(char *tmpPsw){
     680:	fc 01       	movw	r30, r24
	for (uint8_t i = 0; i < 4; i++){
		tmpPsw[i] = '0';
     682:	80 e3       	ldi	r24, 0x30	; 48
     684:	80 83       	st	Z, r24
     686:	81 83       	std	Z+1, r24	; 0x01
     688:	82 83       	std	Z+2, r24	; 0x02
     68a:	83 83       	std	Z+3, r24	; 0x03
     68c:	08 95       	ret

0000068e <setPsw>:
	}
}

void setPsw() {
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
	if (!pswSet) {
     696:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <pswSet>
     69a:	81 11       	cpse	r24, r1
     69c:	36 c0       	rjmp	.+108    	; 0x70a <setPsw+0x7c>
		lcd_clrscr();
     69e:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(1, 0);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Set password:");
     6aa:	81 e9       	ldi	r24, 0x91	; 145
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	84 e0       	ldi	r24, 0x04	; 4
     6b6:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
     6ba:	01 e8       	ldi	r16, 0x81	; 129
     6bc:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t i = 0; i < 4; i++){
     6be:	c0 e0       	ldi	r28, 0x00	; 0
			if (mVar == i) {
     6c0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <mVar>
     6c4:	8c 13       	cpse	r24, r28
     6c6:	17 c0       	rjmp	.+46     	; 0x6f6 <setPsw+0x68>
				lcd_putc(mSelect ? '<' : ' ');
     6c8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     6cc:	81 11       	cpse	r24, r1
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <setPsw+0x46>
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <setPsw+0x48>
     6d4:	8c e3       	ldi	r24, 0x3C	; 60
     6d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(password[i]);
     6da:	f8 01       	movw	r30, r16
     6dc:	80 81       	ld	r24, Z
     6de:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(mSelect ? '>' : ' ');
     6e2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     6e6:	81 11       	cpse	r24, r1
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <setPsw+0x60>
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <setPsw+0x62>
     6ee:	8e e3       	ldi	r24, 0x3E	; 62
     6f0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <setPsw+0x70>
			} else lcd_putc(password[i]);
     6f6:	f8 01       	movw	r30, r16
     6f8:	80 81       	ld	r24, Z
     6fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		lcd_clrscr();
		lcd_gotoxy(1, 0);
		lcd_puts("Set password:");
		lcd_gotoxy(4, 1);
		
		for (uint8_t i = 0; i < 4; i++){
     6fe:	cf 5f       	subi	r28, 0xFF	; 255
     700:	0f 5f       	subi	r16, 0xFF	; 255
     702:	1f 4f       	sbci	r17, 0xFF	; 255
     704:	c4 30       	cpi	r28, 0x04	; 4
     706:	e1 f6       	brne	.-72     	; 0x6c0 <setPsw+0x32>
     708:	37 c0       	rjmp	.+110    	; 0x778 <setPsw+0xea>
				lcd_putc(mSelect ? '<' : ' ');
				lcd_putc(password[i]);
				lcd_putc(mSelect ? '>' : ' ');
			} else lcd_putc(password[i]);
		}
	} else if (pswUse) {
     70a:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <pswUse>
     70e:	88 23       	and	r24, r24
     710:	09 f1       	breq	.+66     	; 0x754 <setPsw+0xc6>
		lcd_clrscr();
     712:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(2, 0);
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Password set");
     71e:	8f e9       	ldi	r24, 0x9F	; 159
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	84 e0       	ldi	r24, 0x04	; 4
     72a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("->");
     72e:	8c ea       	ldi	r24, 0xAC	; 172
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     736:	c1 e8       	ldi	r28, 0x81	; 129
     738:	d1 e0       	ldi	r29, 0x01	; 1
     73a:	05 e8       	ldi	r16, 0x85	; 133
     73c:	11 e0       	ldi	r17, 0x01	; 1
		for (uint8_t i = 0; i < 4; i++){
			lcd_putc(password[i]);
     73e:	89 91       	ld	r24, Y+
     740:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
		lcd_clrscr();
		lcd_gotoxy(2, 0);
		lcd_puts("Password set");
		lcd_gotoxy(4, 1);
		lcd_puts("->");
		for (uint8_t i = 0; i < 4; i++){
     744:	c0 17       	cp	r28, r16
     746:	d1 07       	cpc	r29, r17
     748:	d1 f7       	brne	.-12     	; 0x73e <setPsw+0xb0>
			lcd_putc(password[i]);
		}
		lcd_puts("<-");
     74a:	8f ea       	ldi	r24, 0xAF	; 175
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
     752:	12 c0       	rjmp	.+36     	; 0x778 <setPsw+0xea>
	} else {
		lcd_clrscr();
     754:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(2, 0);
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Password not");
     760:	82 eb       	ldi	r24, 0xB2	; 178
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(6, 1);
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	86 e0       	ldi	r24, 0x06	; 6
     76c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("used");
     770:	8f eb       	ldi	r24, 0xBF	; 191
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	}
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	0f 91       	pop	r16
     780:	08 95       	ret

00000782 <enterPsw>:

void enterPsw() {
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
	if (!pswError) {
     788:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <pswError>
     78c:	81 11       	cpse	r24, r1
     78e:	32 c0       	rjmp	.+100    	; 0x7f4 <enterPsw+0x72>
		lcd_clrscr();
     790:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_puts("Enter password:");
     794:	84 ec       	ldi	r24, 0xC4	; 196
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	84 e0       	ldi	r24, 0x04	; 4
     7a0:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
     7a4:	0d e7       	ldi	r16, 0x7D	; 125
     7a6:	11 e0       	ldi	r17, 0x01	; 1
		
		for (uint8_t i = 0; i < 4; i++){
     7a8:	c0 e0       	ldi	r28, 0x00	; 0
			if (mVar == i) {
     7aa:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <mVar>
     7ae:	8c 13       	cpse	r24, r28
     7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <enterPsw+0x5e>
				lcd_putc(mSelect ? '<' : ' ');
     7b2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     7b6:	81 11       	cpse	r24, r1
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <enterPsw+0x3c>
     7ba:	80 e2       	ldi	r24, 0x20	; 32
     7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <enterPsw+0x3e>
     7be:	8c e3       	ldi	r24, 0x3C	; 60
     7c0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(tmpPassword[i]);
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 81       	ld	r24, Z
     7c8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
				lcd_putc(mSelect ? '>' : ' ');
     7cc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     7d0:	81 11       	cpse	r24, r1
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <enterPsw+0x56>
     7d4:	80 e2       	ldi	r24, 0x20	; 32
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <enterPsw+0x58>
     7d8:	8e e3       	ldi	r24, 0x3E	; 62
     7da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <enterPsw+0x66>
			} else lcd_putc(tmpPassword[i]);
     7e0:	f8 01       	movw	r30, r16
     7e2:	80 81       	ld	r24, Z
     7e4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	if (!pswError) {
		lcd_clrscr();
		lcd_puts("Enter password:");
		lcd_gotoxy(4, 1);
		
		for (uint8_t i = 0; i < 4; i++){
     7e8:	cf 5f       	subi	r28, 0xFF	; 255
     7ea:	0f 5f       	subi	r16, 0xFF	; 255
     7ec:	1f 4f       	sbci	r17, 0xFF	; 255
     7ee:	c4 30       	cpi	r28, 0x04	; 4
     7f0:	e1 f6       	brne	.-72     	; 0x7aa <enterPsw+0x28>
     7f2:	12 c0       	rjmp	.+36     	; 0x818 <enterPsw+0x96>
				lcd_putc(tmpPassword[i]);
				lcd_putc(mSelect ? '>' : ' ');
			} else lcd_putc(tmpPassword[i]);
		}
	} else {
		lcd_clrscr();
     7f4:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
		lcd_gotoxy(3, 0);
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	83 e0       	ldi	r24, 0x03	; 3
     7fc:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("Incorrect");
     800:	84 ed       	ldi	r24, 0xD4	; 212
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
		lcd_gotoxy(4, 1);
     808:	61 e0       	ldi	r22, 0x01	; 1
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_gotoxy>
		lcd_puts("password");
     810:	8e ed       	ldi	r24, 0xDE	; 222
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 e5 00 	call	0x1ca	; 0x1ca <lcd_puts>
	}
}
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <checkPsw>:

uint8_t checkPsw(const char *toCheck) {
	for (uint8_t i = 0; i < 4; i++) {
		if (toCheck[i] != password[i]) return 0;
     820:	fc 01       	movw	r30, r24
     822:	30 81       	ld	r19, Z
     824:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <password>
     828:	32 13       	cpse	r19, r18
     82a:	0d c0       	rjmp	.+26     	; 0x846 <checkPsw+0x26>
     82c:	31 96       	adiw	r30, 0x01	; 1
     82e:	a2 e8       	ldi	r26, 0x82	; 130
     830:	b1 e0       	ldi	r27, 0x01	; 1
     832:	04 96       	adiw	r24, 0x04	; 4
     834:	31 91       	ld	r19, Z+
     836:	2d 91       	ld	r18, X+
     838:	32 13       	cpse	r19, r18
     83a:	07 c0       	rjmp	.+14     	; 0x84a <checkPsw+0x2a>
		lcd_puts("password");
	}
}

uint8_t checkPsw(const char *toCheck) {
	for (uint8_t i = 0; i < 4; i++) {
     83c:	e8 17       	cp	r30, r24
     83e:	f9 07       	cpc	r31, r25
     840:	c9 f7       	brne	.-14     	; 0x834 <checkPsw+0x14>
		if (toCheck[i] != password[i]) return 0;
	}
	return 1;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	08 95       	ret
	}
}

uint8_t checkPsw(const char *toCheck) {
	for (uint8_t i = 0; i < 4; i++) {
		if (toCheck[i] != password[i]) return 0;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
     84a:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
     84c:	08 95       	ret

0000084e <getMovAvg>:
** ADC and moving average functions
*/

// Calculate moving average
uint16_t getMovAvg(uint16_t newSample, movAvg_t *ma)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	9c 01       	movw	r18, r24
     854:	fb 01       	movw	r30, r22
	// Remove oldest sample from the sum
	ma->sum -= ma->samples[ma->samIdx];
     856:	40 81       	ld	r20, Z
	// Add the new sample to the sum and to samples array
	ma->sum += newSample;
     858:	81 81       	ldd	r24, Z+1	; 0x01
     85a:	92 81       	ldd	r25, Z+2	; 0x02
     85c:	a3 81       	ldd	r26, Z+3	; 0x03
     85e:	b4 81       	ldd	r27, Z+4	; 0x04
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	a1 1d       	adc	r26, r1
     866:	b1 1d       	adc	r27, r1

// Calculate moving average
uint16_t getMovAvg(uint16_t newSample, movAvg_t *ma)
{
	// Remove oldest sample from the sum
	ma->sum -= ma->samples[ma->samIdx];
     868:	c4 2f       	mov	r28, r20
     86a:	cc 0f       	add	r28, r28
     86c:	dd 0b       	sbc	r29, r29
     86e:	c6 0f       	add	r28, r22
     870:	d7 1f       	adc	r29, r23
	// Add the new sample to the sum and to samples array
	ma->sum += newSample;
     872:	6d 81       	ldd	r22, Y+5	; 0x05
     874:	7e 81       	ldd	r23, Y+6	; 0x06
     876:	86 1b       	sub	r24, r22
     878:	97 0b       	sbc	r25, r23
     87a:	a1 09       	sbc	r26, r1
     87c:	b1 09       	sbc	r27, r1
     87e:	81 83       	std	Z+1, r24	; 0x01
     880:	92 83       	std	Z+2, r25	; 0x02
     882:	a3 83       	std	Z+3, r26	; 0x03
     884:	b4 83       	std	Z+4, r27	; 0x04
	ma->samples[ma->samIdx] = newSample;
     886:	3e 83       	std	Y+6, r19	; 0x06
     888:	2d 83       	std	Y+5, r18	; 0x05
	// Increment index and roll down to 0 if necessary
	ma->samIdx++;
     88a:	4f 5f       	subi	r20, 0xFF	; 255
	if( ma->samIdx == TOT_SAMPLES ){
     88c:	40 32       	cpi	r20, 0x20	; 32
     88e:	11 f0       	breq	.+4      	; 0x894 <getMovAvg+0x46>
	ma->sum -= ma->samples[ma->samIdx];
	// Add the new sample to the sum and to samples array
	ma->sum += newSample;
	ma->samples[ma->samIdx] = newSample;
	// Increment index and roll down to 0 if necessary
	ma->samIdx++;
     890:	40 83       	st	Z, r20
     892:	01 c0       	rjmp	.+2      	; 0x896 <getMovAvg+0x48>
	if( ma->samIdx == TOT_SAMPLES ){
		ma->samIdx = 0;
     894:	10 82       	st	Z, r1
	}

	// return moving average - divide the sum by 2^MOVAVG_SHIFT
	return ma->sum >> MOVAVG_SHIFT;
     896:	68 94       	set
     898:	14 f8       	bld	r1, 4
     89a:	b6 95       	lsr	r27
     89c:	a7 95       	ror	r26
     89e:	97 95       	ror	r25
     8a0:	87 95       	ror	r24
     8a2:	16 94       	lsr	r1
     8a4:	d1 f7       	brne	.-12     	; 0x89a <getMovAvg+0x4c>
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <readAdc>:

// Read ADC value
uint16_t readAdc(uint8_t channel)
{
	//choose channel
	ADMUX &= ~(0x7);
     8ac:	97 b1       	in	r25, 0x07	; 7
     8ae:	98 7f       	andi	r25, 0xF8	; 248
     8b0:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
     8b2:	97 b1       	in	r25, 0x07	; 7
     8b4:	89 2b       	or	r24, r25
     8b6:	87 b9       	out	0x07, r24	; 7
	
	//start conversion
	ADCSRA |= _BV(ADSC);
     8b8:	36 9a       	sbi	0x06, 6	; 6

	//wait until conversion completes
	while (ADCSRA & _BV(ADSC) );
     8ba:	36 99       	sbic	0x06, 6	; 6
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <readAdc+0xe>
	
	return ADCW;
     8be:	84 b1       	in	r24, 0x04	; 4
     8c0:	95 b1       	in	r25, 0x05	; 5
}
     8c2:	08 95       	ret

000008c4 <init_temp_ma>:
// Initialize moving average structure
void init_temp_ma(movAvg_t *ma, int8_t totSamples)
{
	int i;
	
	ma->samIdx = 0;
     8c4:	fc 01       	movw	r30, r24
     8c6:	10 82       	st	Z, r1
	ma->sum = 0;
     8c8:	11 82       	std	Z+1, r1	; 0x01
     8ca:	12 82       	std	Z+2, r1	; 0x02
     8cc:	13 82       	std	Z+3, r1	; 0x03
     8ce:	14 82       	std	Z+4, r1	; 0x04
	for(i=0; i<totSamples; i++){
     8d0:	16 16       	cp	r1, r22
     8d2:	64 f4       	brge	.+24     	; 0x8ec <init_temp_ma+0x28>
     8d4:	35 96       	adiw	r30, 0x05	; 5
     8d6:	66 0f       	add	r22, r22
     8d8:	77 0b       	sbc	r23, r23
     8da:	6b 5f       	subi	r22, 0xFB	; 251
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	86 0f       	add	r24, r22
     8e0:	97 1f       	adc	r25, r23
		ma->samples[i] = 0;
     8e2:	11 92       	st	Z+, r1
     8e4:	11 92       	st	Z+, r1
{
	int i;
	
	ma->samIdx = 0;
	ma->sum = 0;
	for(i=0; i<totSamples; i++){
     8e6:	e8 17       	cp	r30, r24
     8e8:	f9 07       	cpc	r31, r25
     8ea:	d9 f7       	brne	.-10     	; 0x8e2 <init_temp_ma+0x1e>
     8ec:	08 95       	ret

000008ee <init_adc>:
}

void init_adc()
{
	//adc enable, prescaler=64 -> clk=115200
	ADCSRA = _BV(ADEN)|_BV(ADPS2)|_BV(ADPS1);
     8ee:	86 e8       	ldi	r24, 0x86	; 134
     8f0:	86 b9       	out	0x06, r24	; 6
	//2.56V reference voltage
	ADMUX = _BV(REFS0) | _BV(REFS1);
     8f2:	80 ec       	ldi	r24, 0xC0	; 192
     8f4:	87 b9       	out	0x07, r24	; 7
     8f6:	08 95       	ret

000008f8 <init_spec_char>:
}

void init_spec_char(){
	lcd_command(0x40);	// set CGRAM address for first character
     8f8:	80 e4       	ldi	r24, 0x40	; 64
     8fa:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	
	// lock icon
	lcd_data(0x0e); 
     8fe:	8e e0       	ldi	r24, 0x0E	; 14
     900:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x11); 
     904:	81 e1       	ldi	r24, 0x11	; 17
     906:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x11);
     90a:	81 e1       	ldi	r24, 0x11	; 17
     90c:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     910:	8f e1       	ldi	r24, 0x1F	; 31
     912:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1b);
     916:	8b e1       	ldi	r24, 0x1B	; 27
     918:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     91c:	8f e1       	ldi	r24, 0x1F	; 31
     91e:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     922:	8f e1       	ldi	r24, 0x1F	; 31
     924:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x00); 
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_putc(0);
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
	
	lcd_command(0x48);	// set CGRAM address for second character
     934:	88 e4       	ldi	r24, 0x48	; 72
     936:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_command>
	
	// bell icon
	lcd_data(0x00); 
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x04); 
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x0e);
     946:	8e e0       	ldi	r24, 0x0E	; 14
     948:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x0e);
     94c:	8e e0       	ldi	r24, 0x0E	; 14
     94e:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x0e);
     952:	8e e0       	ldi	r24, 0x0E	; 14
     954:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x1f);
     958:	8f e1       	ldi	r24, 0x1F	; 31
     95a:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x04);
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_data(0x00);
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_data>
	lcd_putc(1);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_putc>
     970:	08 95       	ret

00000972 <nonBlockingDebounce>:
}

void nonBlockingDebounce() {
	GICR &= ~_BV(INT0);
     972:	8b b7       	in	r24, 0x3b	; 59
     974:	8f 7b       	andi	r24, 0xBF	; 191
     976:	8b bf       	out	0x3b, r24	; 59
	sei();
     978:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	8f e3       	ldi	r24, 0x3F	; 63
     97e:	9b e0       	ldi	r25, 0x0B	; 11
     980:	21 50       	subi	r18, 0x01	; 1
     982:	80 40       	sbci	r24, 0x00	; 0
     984:	90 40       	sbci	r25, 0x00	; 0
     986:	e1 f7       	brne	.-8      	; 0x980 <nonBlockingDebounce+0xe>
     988:	00 c0       	rjmp	.+0      	; 0x98a <nonBlockingDebounce+0x18>
     98a:	00 00       	nop

	_delay_ms(500);
	GIFR = _BV(INTF0);
     98c:	80 e4       	ldi	r24, 0x40	; 64
     98e:	8a bf       	out	0x3a, r24	; 58
	GICR |= _BV(INT0);
     990:	8b b7       	in	r24, 0x3b	; 59
     992:	80 64       	ori	r24, 0x40	; 64
     994:	8b bf       	out	0x3b, r24	; 59

	cli();
     996:	f8 94       	cli
     998:	08 95       	ret

0000099a <writeOnLCD>:
}

void writeOnLCD() {
	lcd_clrscr();
     99a:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>
	
	switch (dMode){
     99e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <dMode>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	89 f0       	breq	.+34     	; 0x9c8 <writeOnLCD+0x2e>
     9a6:	28 f4       	brcc	.+10     	; 0x9b2 <writeOnLCD+0x18>
     9a8:	88 23       	and	r24, r24
     9aa:	41 f0       	breq	.+16     	; 0x9bc <writeOnLCD+0x22>
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	49 f0       	breq	.+18     	; 0x9c2 <writeOnLCD+0x28>
     9b0:	08 95       	ret
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	61 f0       	breq	.+24     	; 0x9ce <writeOnLCD+0x34>
     9b6:	84 30       	cpi	r24, 0x04	; 4
     9b8:	69 f0       	breq	.+26     	; 0x9d4 <writeOnLCD+0x3a>
     9ba:	08 95       	ret
		case 0:
		showMsg();
     9bc:	0e 94 93 01 	call	0x326	; 0x326 <showMsg>
		break;
     9c0:	08 95       	ret
		case 1:
		showTemperature();
     9c2:	0e 94 2f 01 	call	0x25e	; 0x25e <showTemperature>
		break;
     9c6:	08 95       	ret
		case 2:
		showMenu();
     9c8:	0e 94 a6 01 	call	0x34c	; 0x34c <showMenu>
		break;
     9cc:	08 95       	ret
		case 3:
		setPsw();
     9ce:	0e 94 47 03 	call	0x68e	; 0x68e <setPsw>
		break;
     9d2:	08 95       	ret
		case 4:
		enterPsw();
     9d4:	0e 94 c1 03 	call	0x782	; 0x782 <enterPsw>
     9d8:	08 95       	ret

000009da <main>:
void init_spec_char();
void nonBlockingDebounce();
void writeOnLCD();

int main(void)
{
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	c5 54       	subi	r28, 0x45	; 69
     9e4:	d1 09       	sbc	r29, r1
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
	// Setting menu items
	menu[0] = "Variables";
     9f0:	ec e8       	ldi	r30, 0x8C	; 140
     9f2:	f1 e0       	ldi	r31, 0x01	; 1
     9f4:	87 ee       	ldi	r24, 0xE7	; 231
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
	menu[1] = "Modes";
     9fc:	81 ef       	ldi	r24, 0xF1	; 241
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	93 83       	std	Z+3, r25	; 0x03
     a02:	82 83       	std	Z+2, r24	; 0x02
	menu[2] = "Alarm";
     a04:	87 ef       	ldi	r24, 0xF7	; 247
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	95 83       	std	Z+5, r25	; 0x05
     a0a:	84 83       	std	Z+4, r24	; 0x04
	
	// Setting variables names
	variables[0] = "max temp";
     a0c:	eb ea       	ldi	r30, 0xAB	; 171
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	8d ef       	ldi	r24, 0xFD	; 253
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	91 83       	std	Z+1, r25	; 0x01
     a16:	80 83       	st	Z, r24
	variables[1] = "min temp";
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	93 83       	std	Z+3, r25	; 0x03
     a1e:	82 83       	std	Z+2, r24	; 0x02
	variables[2] = "set temp";
     a20:	8f e0       	ldi	r24, 0x0F	; 15
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	95 83       	std	Z+5, r25	; 0x05
     a26:	84 83       	std	Z+4, r24	; 0x04
	variables[3] = "temp diff";
     a28:	88 e1       	ldi	r24, 0x18	; 24
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	97 83       	std	Z+7, r25	; 0x07
     a2e:	86 83       	std	Z+6, r24	; 0x06
	
	// Setting alarm names
	alarms[0] = "alarm diff";
     a30:	e7 e9       	ldi	r30, 0x97	; 151
     a32:	f1 e0       	ldi	r31, 0x01	; 1
     a34:	82 e2       	ldi	r24, 0x22	; 34
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
	alarms[1] = "alarm high";
     a3c:	8d e2       	ldi	r24, 0x2D	; 45
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	93 83       	std	Z+3, r25	; 0x03
     a42:	82 83       	std	Z+2, r24	; 0x02
	alarms[2] = "alarm low";
     a44:	88 e3       	ldi	r24, 0x38	; 56
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	95 83       	std	Z+5, r25	; 0x05
     a4a:	84 83       	std	Z+4, r24	; 0x04
	alarms[3] = "alarm usage";
     a4c:	82 e4       	ldi	r24, 0x42	; 66
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	97 83       	std	Z+7, r25	; 0x07
     a52:	86 83       	std	Z+6, r24	; 0x06
	alarms[4] = "lock usage";
     a54:	8e e4       	ldi	r24, 0x4E	; 78
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	91 87       	std	Z+9, r25	; 0x09
     a5a:	80 87       	std	Z+8, r24	; 0x08
	
	// Setting modes
	mode[0] = "heat";
     a5c:	e3 ea       	ldi	r30, 0xA3	; 163
     a5e:	f1 e0       	ldi	r31, 0x01	; 1
     a60:	89 e5       	ldi	r24, 0x59	; 89
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	91 83       	std	Z+1, r25	; 0x01
     a66:	80 83       	st	Z, r24
	mode[1] = "cool";
     a68:	8e e5       	ldi	r24, 0x5E	; 94
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	93 83       	std	Z+3, r25	; 0x03
     a6e:	82 83       	std	Z+2, r24	; 0x02
	mode[2] = "bal ";
     a70:	83 e6       	ldi	r24, 0x63	; 99
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	95 83       	std	Z+5, r25	; 0x05
     a76:	84 83       	std	Z+4, r24	; 0x04
	
	// Initialize password to '0000'
	resetPsw(tmpPassword);
     a78:	8d e7       	ldi	r24, 0x7D	; 125
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 40 03 	call	0x680	; 0x680 <resetPsw>
	resetPsw(password);
     a80:	81 e8       	ldi	r24, 0x81	; 129
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 40 03 	call	0x680	; 0x680 <resetPsw>
	
	// Initializing default variables
	var_mat[0] = 99;
     a88:	e9 e7       	ldi	r30, 0x79	; 121
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	83 e6       	ldi	r24, 0x63	; 99
     a8e:	80 83       	st	Z, r24
	var_mat[1] = 0;
     a90:	11 82       	std	Z+1, r1	; 0x01
	var_mat[2] = 0;
     a92:	12 82       	std	Z+2, r1	; 0x02
	var_mat[3] = 2;
     a94:	82 e0       	ldi	r24, 0x02	; 2
     a96:	83 83       	std	Z+3, r24	; 0x03
	
	// Initializing default alarm
	alarms_mat[0] = 2;
     a98:	e4 e7       	ldi	r30, 0x74	; 116
     a9a:	f1 e0       	ldi	r31, 0x01	; 1
     a9c:	80 83       	st	Z, r24
	alarms_mat[1] = 50;
     a9e:	92 e3       	ldi	r25, 0x32	; 50
     aa0:	91 83       	std	Z+1, r25	; 0x01
	alarms_mat[2] = 0;
     aa2:	12 82       	std	Z+2, r1	; 0x02
	alarms_mat[3] = 0;
     aa4:	13 82       	std	Z+3, r1	; 0x03
	alarms_mat[4] = 0;
     aa6:	14 82       	std	Z+4, r1	; 0x04

	// PORT/DDR/registers setup
	DDRA = _BV(1) | _BV(2) | _BV(3);
     aa8:	9e e0       	ldi	r25, 0x0E	; 14
     aaa:	9a bb       	out	0x1a, r25	; 26
	PORTA = 0x00;
     aac:	1b ba       	out	0x1b, r1	; 27

	PORTB = _BV(0) | _BV(1) | _BV(2);
     aae:	97 e0       	ldi	r25, 0x07	; 7
     ab0:	98 bb       	out	0x18, r25	; 24
	DDRB = 0;
     ab2:	17 ba       	out	0x17, r1	; 23

	DDRD = _BV(4);
     ab4:	90 e1       	ldi	r25, 0x10	; 16
     ab6:	91 bb       	out	0x11, r25	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
     ab8:	91 e2       	ldi	r25, 0x21	; 33
     aba:	9f bd       	out	0x2f, r25	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
     abc:	9a e0       	ldi	r25, 0x0A	; 10
     abe:	9e bd       	out	0x2e, r25	; 46
	OCR1B = 128;
     ac0:	20 e8       	ldi	r18, 0x80	; 128
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	39 bd       	out	0x29, r19	; 41
     ac6:	28 bd       	out	0x28, r18	; 40

	TCCR0 = _BV(WGM01) | _BV(CS02) | _BV(CS00);
     ac8:	9d e0       	ldi	r25, 0x0D	; 13
     aca:	93 bf       	out	0x33, r25	; 51
	OCR0 = 72;
     acc:	98 e4       	ldi	r25, 0x48	; 72
     ace:	9c bf       	out	0x3c, r25	; 60

	TIMSK = _BV(OCIE0);
     ad0:	89 bf       	out	0x39, r24	; 57

	MCUCR = _BV(ISC01);
     ad2:	85 bf       	out	0x35, r24	; 53
	GICR = _BV(INT0);
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	8b bf       	out	0x3b, r24	; 59
	sei();
     ad8:	78 94       	sei
	
	// Initialize LCD and custom characters
	lcd_init(LCD_DISP_ON);
     ada:	8c e0       	ldi	r24, 0x0C	; 12
     adc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <lcd_init>
	init_spec_char();
     ae0:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <init_spec_char>
	lcd_clrscr();
     ae4:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_clrscr>

	writeOnLCD();
     ae8:	0e 94 cd 04 	call	0x99a	; 0x99a <writeOnLCD>
	uint16_t tmp;
	uint32_t lastDisplayedSum = 0;
	movAvg_t movingAverage;
	
	// Initialize moving average structure
	init_temp_ma(&movingAverage, TOT_SAMPLES);
     aec:	60 e2       	ldi	r22, 0x20	; 32
     aee:	ce 01       	movw	r24, r28
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <init_temp_ma>
	
	// Initialize ADC
	init_adc();
     af6:	0e 94 77 04 	call	0x8ee	; 0x8ee <init_adc>
	
	sei();
     afa:	78 94       	sei
	lcd_clrscr();

	writeOnLCD();
	
	uint16_t tmp;
	uint32_t lastDisplayedSum = 0;
     afc:	81 2c       	mov	r8, r1
     afe:	91 2c       	mov	r9, r1
     b00:	54 01       	movw	r10, r8
		}
		
		// update after change
		if (update){
			update = 0;
			uint16_t diff = abs(var_mat[2] - temp);
     b02:	09 e7       	ldi	r16, 0x79	; 121
     b04:	11 e0       	ldi	r17, 0x01	; 1
				PORTA &= _BV(0) | _BV(3);
				lock = 0;
			}
			
			// alarm update
			if (alarms_mat[3]){
     b06:	0f 2e       	mov	r0, r31
     b08:	f4 e7       	ldi	r31, 0x74	; 116
     b0a:	ef 2e       	mov	r14, r31
     b0c:	f1 e0       	ldi	r31, 0x01	; 1
     b0e:	ff 2e       	mov	r15, r31
     b10:	f0 2d       	mov	r31, r0
					if (temp < var_mat[2]) {
						PORTA &= _BV(0);
						lock = 0;
						} else {
						PORTA |=  _BV(2);
						lock = 1;
     b12:	77 24       	eor	r7, r7
     b14:	73 94       	inc	r7
				case 4:
				if (mSelect) {
					mSelect = 0;
					} else if (checkPsw(tmpPassword)) {
					mAccess = 1;
					dMode = 2;
     b16:	68 94       	set
     b18:	22 24       	eor	r2, r2
     b1a:	21 f8       	bld	r2, 1
				if (!subMenu) {
					// switch between sub menus
					mMode = (mMode + 1) % 3;
					} else if (!mSelect) {
					// change sub menu items 0 = var, 1 = mode, 2 = alarm
					mVar = (mVar + 1) % (mMode == 0 ? 4 :  mMode == 1 ? 3 : 5);
     b1c:	68 94       	set
     b1e:	55 24       	eor	r5, r5
     b20:	52 f8       	bld	r5, 2
     b22:	61 2c       	mov	r6, r1
     b24:	0f 2e       	mov	r0, r31
     b26:	f3 e0       	ldi	r31, 0x03	; 3
     b28:	cf 2e       	mov	r12, r31
     b2a:	d1 2c       	mov	r13, r1
     b2c:	f0 2d       	mov	r31, r0
     b2e:	0f 2e       	mov	r0, r31
     b30:	f5 e0       	ldi	r31, 0x05	; 5
     b32:	3f 2e       	mov	r3, r31
     b34:	f0 2d       	mov	r31, r0
     b36:	41 2c       	mov	r4, r1
	init_adc();
	
	sei();

	while (1) {
		tmp = readAdc(0);
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 56 04 	call	0x8ac	; 0x8ac <readAdc>
		curAvg = getMovAvg(tmp, &movingAverage);
     b3e:	be 01       	movw	r22, r28
     b40:	6f 5f       	subi	r22, 0xFF	; 255
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	0e 94 27 04 	call	0x84e	; 0x84e <getMovAvg>
     b48:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <curAvg+0x1>
     b4c:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <curAvg>
		
		if(abs(lastDisplayedSum - movingAverage.sum) > SUM_DIFF_THOLD ) {
     b50:	4a 81       	ldd	r20, Y+2	; 0x02
     b52:	5b 81       	ldd	r21, Y+3	; 0x03
     b54:	6c 81       	ldd	r22, Y+4	; 0x04
     b56:	7d 81       	ldd	r23, Y+5	; 0x05
     b58:	94 01       	movw	r18, r8
     b5a:	24 1b       	sub	r18, r20
     b5c:	35 0b       	sbc	r19, r21
     b5e:	c9 01       	movw	r24, r18
     b60:	99 23       	and	r25, r25
     b62:	24 f4       	brge	.+8      	; 0xb6c <main+0x192>
     b64:	88 27       	eor	r24, r24
     b66:	99 27       	eor	r25, r25
     b68:	82 1b       	sub	r24, r18
     b6a:	93 0b       	sbc	r25, r19
     b6c:	41 97       	sbiw	r24, 0x11	; 17
     b6e:	2c f0       	brlt	.+10     	; 0xb7a <main+0x1a0>
			lastDisplayedSum = movingAverage.sum;
			updateLCD = 1;
     b70:	70 92 94 01 	sts	0x0194, r7	; 0x800194 <updateLCD>
	while (1) {
		tmp = readAdc(0);
		curAvg = getMovAvg(tmp, &movingAverage);
		
		if(abs(lastDisplayedSum - movingAverage.sum) > SUM_DIFF_THOLD ) {
			lastDisplayedSum = movingAverage.sum;
     b74:	4a 01       	movw	r8, r20
     b76:	5b 01       	movw	r10, r22
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <main+0x1aa>
			updateLCD = 1;
			update = 1;
		}
		
		// update after change
		if (update){
     b7a:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <update>
     b7e:	88 23       	and	r24, r24
     b80:	09 f4       	brne	.+2      	; 0xb84 <main+0x1aa>
     b82:	5d c0       	rjmp	.+186    	; 0xc3e <main+0x264>
			update = 0;
     b84:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <update>
			uint16_t diff = abs(var_mat[2] - temp);
     b88:	d8 01       	movw	r26, r16
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	5c 91       	ld	r21, X
     b8e:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <temp>
     b92:	85 2f       	mov	r24, r21
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	84 1b       	sub	r24, r20
     b98:	91 09       	sbc	r25, r1
     b9a:	9c 01       	movw	r18, r24
     b9c:	22 f4       	brpl	.+8      	; 0xba6 <main+0x1cc>
     b9e:	22 27       	eor	r18, r18
     ba0:	33 27       	eor	r19, r19
     ba2:	28 1b       	sub	r18, r24
     ba4:	39 0b       	sbc	r19, r25
			
			// modes update
			if (diff > var_mat[3]){
     ba6:	f8 01       	movw	r30, r16
     ba8:	83 81       	ldd	r24, Z+3	; 0x03
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	82 17       	cp	r24, r18
     bae:	93 07       	cpc	r25, r19
     bb0:	40 f5       	brcc	.+80     	; 0xc02 <main+0x228>
				switch (modeSelect) {
     bb2:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <modeSelect>
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	81 f0       	breq	.+32     	; 0xbda <main+0x200>
     bba:	18 f0       	brcs	.+6      	; 0xbc2 <main+0x1e8>
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	c9 f0       	breq	.+50     	; 0xbf2 <main+0x218>
     bc0:	25 c0       	rjmp	.+74     	; 0xc0c <main+0x232>
					case 0:
					if (temp > var_mat[2]) {
     bc2:	54 17       	cp	r21, r20
     bc4:	30 f4       	brcc	.+12     	; 0xbd2 <main+0x1f8>
						PORTA &= _BV(0);
     bc6:	8b b3       	in	r24, 0x1b	; 27
     bc8:	81 70       	andi	r24, 0x01	; 1
     bca:	8b bb       	out	0x1b, r24	; 27
						lock = 0;
     bcc:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <lock>
     bd0:	1d c0       	rjmp	.+58     	; 0xc0c <main+0x232>
						} else {
						PORTA |=  _BV(1);
     bd2:	d9 9a       	sbi	0x1b, 1	; 27
						lock = 1;
     bd4:	70 92 85 01 	sts	0x0185, r7	; 0x800185 <lock>
     bd8:	19 c0       	rjmp	.+50     	; 0xc0c <main+0x232>
					}
					break;
					case 1:
					if (temp < var_mat[2]) {
     bda:	45 17       	cp	r20, r21
     bdc:	30 f4       	brcc	.+12     	; 0xbea <main+0x210>
						PORTA &= _BV(0);
     bde:	8b b3       	in	r24, 0x1b	; 27
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	8b bb       	out	0x1b, r24	; 27
						lock = 0;
     be4:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <lock>
     be8:	11 c0       	rjmp	.+34     	; 0xc0c <main+0x232>
						} else {
						PORTA |=  _BV(2);
     bea:	da 9a       	sbi	0x1b, 2	; 27
						lock = 1;
     bec:	70 92 85 01 	sts	0x0185, r7	; 0x800185 <lock>
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <main+0x232>
					}
					break;
					case 2:
					lock = 1;
     bf2:	70 92 85 01 	sts	0x0185, r7	; 0x800185 <lock>
					if (temp < var_mat[2]) {
     bf6:	45 17       	cp	r20, r21
     bf8:	10 f4       	brcc	.+4      	; 0xbfe <main+0x224>
						PORTA |=  _BV(1);
     bfa:	d9 9a       	sbi	0x1b, 1	; 27
     bfc:	07 c0       	rjmp	.+14     	; 0xc0c <main+0x232>
					} else PORTA |=  _BV(2);
     bfe:	da 9a       	sbi	0x1b, 2	; 27
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <main+0x232>
					break;
				}
				} else {
				PORTA &= _BV(0) | _BV(3);
     c02:	8b b3       	in	r24, 0x1b	; 27
     c04:	89 70       	andi	r24, 0x09	; 9
     c06:	8b bb       	out	0x1b, r24	; 27
				lock = 0;
     c08:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <lock>
			}
			
			// alarm update
			if (alarms_mat[3]){
     c0c:	d7 01       	movw	r26, r14
     c0e:	13 96       	adiw	r26, 0x03	; 3
     c10:	8c 91       	ld	r24, X
     c12:	13 97       	sbiw	r26, 0x03	; 3
     c14:	88 23       	and	r24, r24
     c16:	99 f0       	breq	.+38     	; 0xc3e <main+0x264>
				if (diff > alarms_mat[0] || temp > alarms_mat[1] || temp < alarms_mat[2]){
     c18:	8c 91       	ld	r24, X
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	58 f0       	brcs	.+22     	; 0xc38 <main+0x25e>
     c22:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <temp>
     c26:	11 96       	adiw	r26, 0x01	; 1
     c28:	9c 91       	ld	r25, X
     c2a:	11 97       	sbiw	r26, 0x01	; 1
     c2c:	98 17       	cp	r25, r24
     c2e:	20 f0       	brcs	.+8      	; 0xc38 <main+0x25e>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	9c 91       	ld	r25, X
     c34:	89 17       	cp	r24, r25
     c36:	10 f4       	brcc	.+4      	; 0xc3c <main+0x262>
					PORTA |= _BV(3);
     c38:	db 9a       	sbi	0x1b, 3	; 27
     c3a:	01 c0       	rjmp	.+2      	; 0xc3e <main+0x264>
				} else PORTA &= ~_BV(3);
     c3c:	db 98       	cbi	0x1b, 3	; 27
			}
		}
		
		// Using keys (PORTB) to control
		if (bit_is_clear(PINB, 0)) {
     c3e:	b0 99       	sbic	0x16, 0	; 22
     c40:	f7 c0       	rjmp	.+494    	; 0xe30 <main+0x456>
			switch (dMode) {
     c42:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <dMode>
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	09 f4       	brne	.+2      	; 0xc4c <main+0x272>
     c4a:	ba c0       	rjmp	.+372    	; 0xdc0 <main+0x3e6>
     c4c:	84 30       	cpi	r24, 0x04	; 4
     c4e:	09 f4       	brne	.+2      	; 0xc52 <main+0x278>
     c50:	d3 c0       	rjmp	.+422    	; 0xdf8 <main+0x41e>
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	09 f0       	breq	.+2      	; 0xc58 <main+0x27e>
     c56:	33 c2       	rjmp	.+1126   	; 0x10be <main+0x6e4>
				case 1:
				// key1 function on temp display screen
				break;
				case 2:
				if (!subMenu) {
     c58:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     c5c:	81 11       	cpse	r24, r1
     c5e:	0a c0       	rjmp	.+20     	; 0xc74 <main+0x29a>
					// switch between sub menus
					mMode = (mMode + 1) % 3;
     c60:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <mMode>
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	b6 01       	movw	r22, r12
     c6a:	0e 94 24 09 	call	0x1248	; 0x1248 <__divmodhi4>
     c6e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <mMode>
     c72:	25 c2       	rjmp	.+1098   	; 0x10be <main+0x6e4>
					} else if (!mSelect) {
     c74:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     c78:	81 11       	cpse	r24, r1
     c7a:	0f c0       	rjmp	.+30     	; 0xc9a <main+0x2c0>
					// change sub menu items 0 = var, 1 = mode, 2 = alarm
					mVar = (mVar + 1) % (mMode == 0 ? 4 :  mMode == 1 ? 3 : 5);
     c7c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <mVar>
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <mMode>
     c88:	22 23       	and	r18, r18
     c8a:	09 f4       	brne	.+2      	; 0xc8e <main+0x2b4>
     c8c:	2a c2       	rjmp	.+1108   	; 0x10e2 <main+0x708>
     c8e:	21 30       	cpi	r18, 0x01	; 1
     c90:	09 f4       	brne	.+2      	; 0xc94 <main+0x2ba>
     c92:	1f c2       	rjmp	.+1086   	; 0x10d2 <main+0x6f8>
     c94:	63 2d       	mov	r22, r3
     c96:	74 2d       	mov	r23, r4
     c98:	26 c2       	rjmp	.+1100   	; 0x10e6 <main+0x70c>
					// mode changes directly
					if (mMode == 1) modeSelect = mVar;
					
					// variable setup
					} else if (mMode == 0) {
     c9a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <mMode>
     c9e:	81 11       	cpse	r24, r1
     ca0:	4b c0       	rjmp	.+150    	; 0xd38 <main+0x35e>
					var_mat[mVar] += 1;
     ca2:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <mVar>
     ca6:	29 2f       	mov	r18, r25
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	e7 58       	subi	r30, 0x87	; 135
     cae:	fe 4f       	sbci	r31, 0xFE	; 254
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
					switch (mVar) {
     cb6:	91 30       	cpi	r25, 0x01	; 1
     cb8:	d9 f0       	breq	.+54     	; 0xcf0 <main+0x316>
     cba:	28 f0       	brcs	.+10     	; 0xcc6 <main+0x2ec>
     cbc:	92 30       	cpi	r25, 0x02	; 2
     cbe:	41 f1       	breq	.+80     	; 0xd10 <main+0x336>
     cc0:	93 30       	cpi	r25, 0x03	; 3
     cc2:	91 f1       	breq	.+100    	; 0xd28 <main+0x34e>
     cc4:	fc c1       	rjmp	.+1016   	; 0x10be <main+0x6e4>
						case 0:
						if (var_mat[mVar] > 99) var_mat[mVar] = var_mat[1] + 1;
     cc6:	84 36       	cpi	r24, 0x64	; 100
     cc8:	40 f0       	brcs	.+16     	; 0xcda <main+0x300>
     cca:	f9 01       	movw	r30, r18
     ccc:	e7 58       	subi	r30, 0x87	; 135
     cce:	fe 4f       	sbci	r31, 0xFE	; 254
     cd0:	d8 01       	movw	r26, r16
     cd2:	11 96       	adiw	r26, 0x01	; 1
     cd4:	8c 91       	ld	r24, X
     cd6:	8f 5f       	subi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
						if (var_mat[2] > var_mat[mVar]) var_mat[2] = var_mat[mVar];
     cda:	f9 01       	movw	r30, r18
     cdc:	e7 58       	subi	r30, 0x87	; 135
     cde:	fe 4f       	sbci	r31, 0xFE	; 254
     ce0:	80 81       	ld	r24, Z
     ce2:	f8 01       	movw	r30, r16
     ce4:	92 81       	ldd	r25, Z+2	; 0x02
     ce6:	89 17       	cp	r24, r25
     ce8:	08 f0       	brcs	.+2      	; 0xcec <main+0x312>
     cea:	e9 c1       	rjmp	.+978    	; 0x10be <main+0x6e4>
     cec:	82 83       	std	Z+2, r24	; 0x02
     cee:	e7 c1       	rjmp	.+974    	; 0x10be <main+0x6e4>
						break;
						case 1:
						if (var_mat[mVar] >= var_mat[0]) var_mat[mVar] = 0;
     cf0:	d8 01       	movw	r26, r16
     cf2:	9c 91       	ld	r25, X
     cf4:	89 17       	cp	r24, r25
     cf6:	28 f0       	brcs	.+10     	; 0xd02 <main+0x328>
     cf8:	f9 01       	movw	r30, r18
     cfa:	e7 58       	subi	r30, 0x87	; 135
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	10 82       	st	Z, r1
     d00:	de c1       	rjmp	.+956    	; 0x10be <main+0x6e4>
						if (var_mat[2] < var_mat[mVar]) var_mat[2] = var_mat[mVar];
     d02:	f8 01       	movw	r30, r16
     d04:	92 81       	ldd	r25, Z+2	; 0x02
     d06:	98 17       	cp	r25, r24
     d08:	08 f0       	brcs	.+2      	; 0xd0c <main+0x332>
     d0a:	d9 c1       	rjmp	.+946    	; 0x10be <main+0x6e4>
     d0c:	82 83       	std	Z+2, r24	; 0x02
     d0e:	d7 c1       	rjmp	.+942    	; 0x10be <main+0x6e4>
						break;
						case 2:
						if (var_mat[mVar] > var_mat[0]) var_mat[mVar] = var_mat[1];
     d10:	d8 01       	movw	r26, r16
     d12:	9c 91       	ld	r25, X
     d14:	98 17       	cp	r25, r24
     d16:	08 f0       	brcs	.+2      	; 0xd1a <main+0x340>
     d18:	d2 c1       	rjmp	.+932    	; 0x10be <main+0x6e4>
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	8c 91       	ld	r24, X
     d1e:	f9 01       	movw	r30, r18
     d20:	e7 58       	subi	r30, 0x87	; 135
     d22:	fe 4f       	sbci	r31, 0xFE	; 254
     d24:	80 83       	st	Z, r24
     d26:	cb c1       	rjmp	.+918    	; 0x10be <main+0x6e4>
						break;
						case 3:
						if (var_mat[mVar] > 30) var_mat[mVar] = 0;
     d28:	8f 31       	cpi	r24, 0x1F	; 31
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <main+0x354>
     d2c:	c8 c1       	rjmp	.+912    	; 0x10be <main+0x6e4>
     d2e:	f9 01       	movw	r30, r18
     d30:	e7 58       	subi	r30, 0x87	; 135
     d32:	fe 4f       	sbci	r31, 0xFE	; 254
     d34:	10 82       	st	Z, r1
     d36:	c3 c1       	rjmp	.+902    	; 0x10be <main+0x6e4>
						break;
					}
					
					// alarm setup
					} else if (mMode == 2) {
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	09 f0       	breq	.+2      	; 0xd3e <main+0x364>
     d3c:	c0 c1       	rjmp	.+896    	; 0x10be <main+0x6e4>
					alarms_mat[mVar] += 1;
     d3e:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <mVar>
     d42:	29 2f       	mov	r18, r25
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	f9 01       	movw	r30, r18
     d48:	ec 58       	subi	r30, 0x8C	; 140
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 5f       	subi	r24, 0xFF	; 255
     d50:	80 83       	st	Z, r24
					switch (mVar) {
     d52:	92 30       	cpi	r25, 0x02	; 2
     d54:	f9 f0       	breq	.+62     	; 0xd94 <main+0x3ba>
     d56:	28 f4       	brcc	.+10     	; 0xd62 <main+0x388>
     d58:	99 23       	and	r25, r25
     d5a:	41 f0       	breq	.+16     	; 0xd6c <main+0x392>
     d5c:	91 30       	cpi	r25, 0x01	; 1
     d5e:	71 f0       	breq	.+28     	; 0xd7c <main+0x3a2>
     d60:	ae c1       	rjmp	.+860    	; 0x10be <main+0x6e4>
     d62:	93 30       	cpi	r25, 0x03	; 3
     d64:	09 f1       	breq	.+66     	; 0xda8 <main+0x3ce>
     d66:	94 30       	cpi	r25, 0x04	; 4
     d68:	29 f1       	breq	.+74     	; 0xdb4 <main+0x3da>
     d6a:	a9 c1       	rjmp	.+850    	; 0x10be <main+0x6e4>
						case 0:
						if (alarms_mat[mVar] > 50) alarms_mat[mVar] = 1;
     d6c:	83 33       	cpi	r24, 0x33	; 51
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <main+0x398>
     d70:	a6 c1       	rjmp	.+844    	; 0x10be <main+0x6e4>
     d72:	f9 01       	movw	r30, r18
     d74:	ec 58       	subi	r30, 0x8C	; 140
     d76:	fe 4f       	sbci	r31, 0xFE	; 254
     d78:	70 82       	st	Z, r7
     d7a:	a1 c1       	rjmp	.+834    	; 0x10be <main+0x6e4>
						break;
						case 1:
						if (alarms_mat[mVar] > 99) alarms_mat[mVar] = alarms_mat[2] + 1;
     d7c:	84 36       	cpi	r24, 0x64	; 100
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <main+0x3a8>
     d80:	9e c1       	rjmp	.+828    	; 0x10be <main+0x6e4>
     d82:	f9 01       	movw	r30, r18
     d84:	ec 58       	subi	r30, 0x8C	; 140
     d86:	fe 4f       	sbci	r31, 0xFE	; 254
     d88:	d7 01       	movw	r26, r14
     d8a:	12 96       	adiw	r26, 0x02	; 2
     d8c:	8c 91       	ld	r24, X
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	80 83       	st	Z, r24
     d92:	95 c1       	rjmp	.+810    	; 0x10be <main+0x6e4>
						break;
						case 2:
						if (alarms_mat[mVar] >= alarms_mat[1]) alarms_mat[mVar] = 0;
     d94:	f7 01       	movw	r30, r14
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	89 17       	cp	r24, r25
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <main+0x3c4>
     d9c:	90 c1       	rjmp	.+800    	; 0x10be <main+0x6e4>
     d9e:	f9 01       	movw	r30, r18
     da0:	ec 58       	subi	r30, 0x8C	; 140
     da2:	fe 4f       	sbci	r31, 0xFE	; 254
     da4:	10 82       	st	Z, r1
     da6:	8b c1       	rjmp	.+790    	; 0x10be <main+0x6e4>
						break;
						case 3:
						alarms_mat[mVar] = alarms_mat[mVar] % 2;
     da8:	f9 01       	movw	r30, r18
     daa:	ec 58       	subi	r30, 0x8C	; 140
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	81 70       	andi	r24, 0x01	; 1
     db0:	80 83       	st	Z, r24
						break;
     db2:	85 c1       	rjmp	.+778    	; 0x10be <main+0x6e4>
						case 4:
						alarms_mat[mVar] = alarms_mat[mVar] % 2;
     db4:	f9 01       	movw	r30, r18
     db6:	ec 58       	subi	r30, 0x8C	; 140
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	80 83       	st	Z, r24
						break;
     dbe:	7f c1       	rjmp	.+766    	; 0x10be <main+0x6e4>
					}
				}
				break;
				case 3:
				if (!mSelect) {
     dc0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     dc4:	81 11       	cpse	r24, r1
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <main+0x40c>
					mVar = (mVar + 1) % 4;
     dc8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <mVar>
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	01 96       	adiw	r24, 0x01	; 1
     dd0:	83 70       	andi	r24, 0x03	; 3
     dd2:	90 78       	andi	r25, 0x80	; 128
     dd4:	99 23       	and	r25, r25
     dd6:	24 f4       	brge	.+8      	; 0xde0 <main+0x406>
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	8c 6f       	ori	r24, 0xFC	; 252
     ddc:	9f 6f       	ori	r25, 0xFF	; 255
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mVar>
     de4:	6c c1       	rjmp	.+728    	; 0x10be <main+0x6e4>
					} else {
					password[mVar] += 1;
     de6:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	ef 57       	subi	r30, 0x7F	; 127
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	80 81       	ld	r24, Z
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	80 83       	st	Z, r24
     df6:	63 c1       	rjmp	.+710    	; 0x10be <main+0x6e4>
				}
				break;
				case 4:
				if (!mSelect) {
     df8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     dfc:	81 11       	cpse	r24, r1
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <main+0x444>
					mVar = (mVar + 1) % 4;
     e00:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <mVar>
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	83 70       	andi	r24, 0x03	; 3
     e0a:	90 78       	andi	r25, 0x80	; 128
     e0c:	99 23       	and	r25, r25
     e0e:	24 f4       	brge	.+8      	; 0xe18 <main+0x43e>
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	8c 6f       	ori	r24, 0xFC	; 252
     e14:	9f 6f       	ori	r25, 0xFF	; 255
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mVar>
     e1c:	50 c1       	rjmp	.+672    	; 0x10be <main+0x6e4>
					} else {
					tmpPassword[mVar] += 1;
     e1e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	e3 58       	subi	r30, 0x83	; 131
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	80 81       	ld	r24, Z
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 83       	st	Z, r24
     e2e:	47 c1       	rjmp	.+654    	; 0x10be <main+0x6e4>
				}
				break;
			}
			} else if (bit_is_clear(PINB, 1)) {
     e30:	b1 99       	sbic	0x16, 1	; 22
     e32:	ee c0       	rjmp	.+476    	; 0x1010 <main+0x636>
			switch (dMode) {
     e34:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <dMode>
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	09 f4       	brne	.+2      	; 0xe3e <main+0x464>
     e3c:	c9 c0       	rjmp	.+402    	; 0xfd0 <main+0x5f6>
     e3e:	84 30       	cpi	r24, 0x04	; 4
     e40:	09 f4       	brne	.+2      	; 0xe44 <main+0x46a>
     e42:	d6 c0       	rjmp	.+428    	; 0xff0 <main+0x616>
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	09 f0       	breq	.+2      	; 0xe4a <main+0x470>
     e48:	3a c1       	rjmp	.+628    	; 0x10be <main+0x6e4>
				case 1:
				// // key2 function on temp display screen
				break;
				case 2:
				if (!subMenu) {
     e4a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
     e4e:	81 11       	cpse	r24, r1
     e50:	0b c0       	rjmp	.+22     	; 0xe68 <main+0x48e>
					subMenu = 1;
     e52:	70 92 6e 01 	sts	0x016E, r7	; 0x80016e <__data_end>
					mVar = mMode == 1 ? modeSelect : 0;
     e56:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <mMode>
     e5a:	91 30       	cpi	r25, 0x01	; 1
     e5c:	11 f4       	brne	.+4      	; 0xe62 <main+0x488>
     e5e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <modeSelect>
     e62:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mVar>
     e66:	2b c1       	rjmp	.+598    	; 0x10be <main+0x6e4>
					} else if (!mSelect) {
     e68:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     e6c:	81 11       	cpse	r24, r1
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <main+0x49c>
					mSelect = 1;
     e70:	70 92 70 01 	sts	0x0170, r7	; 0x800170 <mSelect>
     e74:	24 c1       	rjmp	.+584    	; 0x10be <main+0x6e4>
					
					// variable setup
					} else if (mMode == 0) {
     e76:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <mMode>
     e7a:	81 11       	cpse	r24, r1
     e7c:	52 c0       	rjmp	.+164    	; 0xf22 <main+0x548>
					switch (mVar) {
     e7e:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     e82:	e1 30       	cpi	r30, 0x01	; 1
     e84:	d1 f0       	breq	.+52     	; 0xeba <main+0x4e0>
     e86:	28 f0       	brcs	.+10     	; 0xe92 <main+0x4b8>
     e88:	e2 30       	cpi	r30, 0x02	; 2
     e8a:	69 f1       	breq	.+90     	; 0xee6 <main+0x50c>
     e8c:	e3 30       	cpi	r30, 0x03	; 3
     e8e:	c9 f1       	breq	.+114    	; 0xf02 <main+0x528>
     e90:	41 c0       	rjmp	.+130    	; 0xf14 <main+0x53a>
						case 0:
						if (var_mat[mVar] <= var_mat[1]) var_mat[mVar] = 100;
     e92:	d8 01       	movw	r26, r16
     e94:	9c 91       	ld	r25, X
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	8c 91       	ld	r24, X
     e9a:	11 97       	sbiw	r26, 0x01	; 1
     e9c:	89 17       	cp	r24, r25
     e9e:	10 f0       	brcs	.+4      	; 0xea4 <main+0x4ca>
     ea0:	f4 e6       	ldi	r31, 0x64	; 100
     ea2:	fc 93       	st	X, r31
						if (var_mat[2] > var_mat[mVar]) var_mat[2] = var_mat[mVar] - 1;
     ea4:	d8 01       	movw	r26, r16
     ea6:	8c 91       	ld	r24, X
     ea8:	12 96       	adiw	r26, 0x02	; 2
     eaa:	9c 91       	ld	r25, X
     eac:	12 97       	sbiw	r26, 0x02	; 2
     eae:	89 17       	cp	r24, r25
     eb0:	88 f5       	brcc	.+98     	; 0xf14 <main+0x53a>
     eb2:	81 50       	subi	r24, 0x01	; 1
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	8c 93       	st	X, r24
     eb8:	2d c0       	rjmp	.+90     	; 0xf14 <main+0x53a>
						break;
						case 1:
						if (var_mat[mVar] <= 0) var_mat[mVar] = var_mat[0];
     eba:	d8 01       	movw	r26, r16
     ebc:	11 96       	adiw	r26, 0x01	; 1
     ebe:	8c 91       	ld	r24, X
     ec0:	11 97       	sbiw	r26, 0x01	; 1
     ec2:	81 11       	cpse	r24, r1
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <main+0x4f2>
     ec6:	8c 91       	ld	r24, X
     ec8:	11 96       	adiw	r26, 0x01	; 1
     eca:	8c 93       	st	X, r24
						if (var_mat[2] > var_mat[mVar]) var_mat[2] = var_mat[mVar] - 1;
     ecc:	d8 01       	movw	r26, r16
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	8c 91       	ld	r24, X
     ed2:	11 97       	sbiw	r26, 0x01	; 1
     ed4:	12 96       	adiw	r26, 0x02	; 2
     ed6:	9c 91       	ld	r25, X
     ed8:	12 97       	sbiw	r26, 0x02	; 2
     eda:	89 17       	cp	r24, r25
     edc:	d8 f4       	brcc	.+54     	; 0xf14 <main+0x53a>
     ede:	81 50       	subi	r24, 0x01	; 1
     ee0:	12 96       	adiw	r26, 0x02	; 2
     ee2:	8c 93       	st	X, r24
     ee4:	17 c0       	rjmp	.+46     	; 0xf14 <main+0x53a>
						break;
						case 2:
						if (var_mat[mVar] <= var_mat[1]) var_mat[mVar] = var_mat[0] + 1;
     ee6:	d8 01       	movw	r26, r16
     ee8:	12 96       	adiw	r26, 0x02	; 2
     eea:	9c 91       	ld	r25, X
     eec:	12 97       	sbiw	r26, 0x02	; 2
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	8c 91       	ld	r24, X
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	89 17       	cp	r24, r25
     ef6:	70 f0       	brcs	.+28     	; 0xf14 <main+0x53a>
     ef8:	8c 91       	ld	r24, X
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	8c 93       	st	X, r24
     f00:	09 c0       	rjmp	.+18     	; 0xf14 <main+0x53a>
						break;
						case 3:
						if (var_mat[mVar] <= 0) var_mat[mVar] = 31;
     f02:	d8 01       	movw	r26, r16
     f04:	13 96       	adiw	r26, 0x03	; 3
     f06:	8c 91       	ld	r24, X
     f08:	13 97       	sbiw	r26, 0x03	; 3
     f0a:	81 11       	cpse	r24, r1
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <main+0x53a>
     f0e:	ff e1       	ldi	r31, 0x1F	; 31
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	fc 93       	st	X, r31
						break;
					}
					var_mat[mVar] -= 1;
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	e7 58       	subi	r30, 0x87	; 135
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	80 81       	ld	r24, Z
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	80 83       	st	Z, r24
     f20:	ce c0       	rjmp	.+412    	; 0x10be <main+0x6e4>
					
					// alarm setup
					} else if (mMode == 2) {
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	09 f0       	breq	.+2      	; 0xf28 <main+0x54e>
     f26:	cb c0       	rjmp	.+406    	; 0x10be <main+0x6e4>
					switch (mVar) {
     f28:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     f2c:	e2 30       	cpi	r30, 0x02	; 2
     f2e:	e1 f0       	breq	.+56     	; 0xf68 <main+0x58e>
     f30:	28 f4       	brcc	.+10     	; 0xf3c <main+0x562>
     f32:	ee 23       	and	r30, r30
     f34:	41 f0       	breq	.+16     	; 0xf46 <main+0x56c>
     f36:	e1 30       	cpi	r30, 0x01	; 1
     f38:	69 f0       	breq	.+26     	; 0xf54 <main+0x57a>
     f3a:	43 c0       	rjmp	.+134    	; 0xfc2 <main+0x5e8>
     f3c:	e3 30       	cpi	r30, 0x03	; 3
     f3e:	f1 f0       	breq	.+60     	; 0xf7c <main+0x5a2>
     f40:	e4 30       	cpi	r30, 0x04	; 4
     f42:	71 f1       	breq	.+92     	; 0xfa0 <main+0x5c6>
     f44:	3e c0       	rjmp	.+124    	; 0xfc2 <main+0x5e8>
						case 0:
						if (alarms_mat[mVar] <= 1) alarms_mat[mVar] = 51;
     f46:	d7 01       	movw	r26, r14
     f48:	8c 91       	ld	r24, X
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	d0 f5       	brcc	.+116    	; 0xfc2 <main+0x5e8>
     f4e:	f3 e3       	ldi	r31, 0x33	; 51
     f50:	fc 93       	st	X, r31
     f52:	37 c0       	rjmp	.+110    	; 0xfc2 <main+0x5e8>
						break;
						case 1:
						if (alarms_mat[mVar] <= 0) alarms_mat[mVar] = 100;
     f54:	d7 01       	movw	r26, r14
     f56:	11 96       	adiw	r26, 0x01	; 1
     f58:	8c 91       	ld	r24, X
     f5a:	11 97       	sbiw	r26, 0x01	; 1
     f5c:	81 11       	cpse	r24, r1
     f5e:	31 c0       	rjmp	.+98     	; 0xfc2 <main+0x5e8>
     f60:	f4 e6       	ldi	r31, 0x64	; 100
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	fc 93       	st	X, r31
     f66:	2d c0       	rjmp	.+90     	; 0xfc2 <main+0x5e8>
						break;
						case 2:
						if (alarms_mat[mVar] <= 0) alarms_mat[mVar] = 100;
     f68:	d7 01       	movw	r26, r14
     f6a:	12 96       	adiw	r26, 0x02	; 2
     f6c:	8c 91       	ld	r24, X
     f6e:	12 97       	sbiw	r26, 0x02	; 2
     f70:	81 11       	cpse	r24, r1
     f72:	27 c0       	rjmp	.+78     	; 0xfc2 <main+0x5e8>
     f74:	f4 e6       	ldi	r31, 0x64	; 100
     f76:	12 96       	adiw	r26, 0x02	; 2
     f78:	fc 93       	st	X, r31
     f7a:	23 c0       	rjmp	.+70     	; 0xfc2 <main+0x5e8>
						break;
						case 3:
						alarms_mat[mVar] = (alarms_mat[mVar] + 1) % 2 + 1;
     f7c:	d7 01       	movw	r26, r14
     f7e:	13 96       	adiw	r26, 0x03	; 3
     f80:	8c 91       	ld	r24, X
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	81 70       	andi	r24, 0x01	; 1
     f88:	90 78       	andi	r25, 0x80	; 128
     f8a:	99 23       	and	r25, r25
     f8c:	24 f4       	brge	.+8      	; 0xf96 <main+0x5bc>
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	8e 6f       	ori	r24, 0xFE	; 254
     f92:	9f 6f       	ori	r25, 0xFF	; 255
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	d7 01       	movw	r26, r14
     f9a:	13 96       	adiw	r26, 0x03	; 3
     f9c:	8c 93       	st	X, r24
						break;
     f9e:	11 c0       	rjmp	.+34     	; 0xfc2 <main+0x5e8>
						case 4:
						alarms_mat[mVar] = (alarms_mat[mVar] + 1) % 2 + 1;
     fa0:	d7 01       	movw	r26, r14
     fa2:	14 96       	adiw	r26, 0x04	; 4
     fa4:	8c 91       	ld	r24, X
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	81 70       	andi	r24, 0x01	; 1
     fac:	90 78       	andi	r25, 0x80	; 128
     fae:	99 23       	and	r25, r25
     fb0:	24 f4       	brge	.+8      	; 0xfba <main+0x5e0>
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	8e 6f       	ori	r24, 0xFE	; 254
     fb6:	9f 6f       	ori	r25, 0xFF	; 255
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	8f 5f       	subi	r24, 0xFF	; 255
     fbc:	d7 01       	movw	r26, r14
     fbe:	14 96       	adiw	r26, 0x04	; 4
     fc0:	8c 93       	st	X, r24
						break;
					}
					alarms_mat[mVar] -= 1;
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	ec 58       	subi	r30, 0x8C	; 140
     fc6:	fe 4f       	sbci	r31, 0xFE	; 254
     fc8:	80 81       	ld	r24, Z
     fca:	81 50       	subi	r24, 0x01	; 1
     fcc:	80 83       	st	Z, r24
     fce:	77 c0       	rjmp	.+238    	; 0x10be <main+0x6e4>
				}
				break;
				case 3:
				if (!mSelect) {
     fd0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     fd4:	81 11       	cpse	r24, r1
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <main+0x604>
					mSelect = 1;
     fd8:	70 92 70 01 	sts	0x0170, r7	; 0x800170 <mSelect>
     fdc:	70 c0       	rjmp	.+224    	; 0x10be <main+0x6e4>
					} else {
					password[mVar] -= 1;
     fde:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	ef 57       	subi	r30, 0x7F	; 127
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	80 81       	ld	r24, Z
     fea:	81 50       	subi	r24, 0x01	; 1
     fec:	80 83       	st	Z, r24
     fee:	67 c0       	rjmp	.+206    	; 0x10be <main+0x6e4>
				}
				break;
				case 4:
				if (!mSelect) {
     ff0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
     ff4:	81 11       	cpse	r24, r1
     ff6:	03 c0       	rjmp	.+6      	; 0xffe <main+0x624>
					mSelect = 1;
     ff8:	70 92 70 01 	sts	0x0170, r7	; 0x800170 <mSelect>
     ffc:	60 c0       	rjmp	.+192    	; 0x10be <main+0x6e4>
					} else {
					tmpPassword[mVar] -= 1;
     ffe:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <mVar>
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	e3 58       	subi	r30, 0x83	; 131
    1006:	fe 4f       	sbci	r31, 0xFE	; 254
    1008:	80 81       	ld	r24, Z
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	80 83       	st	Z, r24
    100e:	57 c0       	rjmp	.+174    	; 0x10be <main+0x6e4>
				}
				break;
			}
			} else if (bit_is_clear(PINB, 2)) {
    1010:	b2 99       	sbic	0x16, 2	; 22
    1012:	55 c0       	rjmp	.+170    	; 0x10be <main+0x6e4>
			switch (dMode) {
    1014:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <dMode>
    1018:	83 30       	cpi	r24, 0x03	; 3
    101a:	a1 f0       	breq	.+40     	; 0x1044 <main+0x66a>
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	69 f1       	breq	.+90     	; 0x107a <main+0x6a0>
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	09 f0       	breq	.+2      	; 0x1026 <main+0x64c>
    1024:	4c c0       	rjmp	.+152    	; 0x10be <main+0x6e4>
				case 2:
				if (mSelect){
    1026:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
    102a:	88 23       	and	r24, r24
    102c:	19 f0       	breq	.+6      	; 0x1034 <main+0x65a>
					mSelect = 0;
    102e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <mSelect>
    1032:	45 c0       	rjmp	.+138    	; 0x10be <main+0x6e4>
					} else if (subMenu){
    1034:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <__data_end>
    1038:	88 23       	and	r24, r24
    103a:	09 f4       	brne	.+2      	; 0x103e <main+0x664>
    103c:	40 c0       	rjmp	.+128    	; 0x10be <main+0x6e4>
					subMenu = 0;
    103e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
    1042:	3d c0       	rjmp	.+122    	; 0x10be <main+0x6e4>
				}
				break;
				case 3:
				if (!mSelect) {
    1044:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
    1048:	81 11       	cpse	r24, r1
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <main+0x69a>
					pswSet = 1;
    104c:	70 92 8a 01 	sts	0x018A, r7	; 0x80018a <pswSet>
					pswUse = !checkPsw("0000");
    1050:	88 e6       	ldi	r24, 0x68	; 104
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	0e 94 10 04 	call	0x820	; 0x820 <checkPsw>
    1058:	97 2d       	mov	r25, r7
    105a:	81 11       	cpse	r24, r1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <pswUse>
					mAccess = !pswUse;
    1062:	97 2d       	mov	r25, r7
    1064:	81 11       	cpse	r24, r1
    1066:	01 c0       	rjmp	.+2      	; 0x106a <main+0x690>
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <mAccess>
					mVar = 0;
    106e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <mVar>
    1072:	25 c0       	rjmp	.+74     	; 0x10be <main+0x6e4>
					} else {
					mSelect = 0;
    1074:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <mSelect>
    1078:	22 c0       	rjmp	.+68     	; 0x10be <main+0x6e4>
				}
				break;
				case 4:
				if (mSelect) {
    107a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <mSelect>
    107e:	88 23       	and	r24, r24
    1080:	19 f0       	breq	.+6      	; 0x1088 <main+0x6ae>
					mSelect = 0;
    1082:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <mSelect>
    1086:	1b c0       	rjmp	.+54     	; 0x10be <main+0x6e4>
					} else if (checkPsw(tmpPassword)) {
    1088:	8d e7       	ldi	r24, 0x7D	; 125
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	0e 94 10 04 	call	0x820	; 0x820 <checkPsw>
    1090:	88 23       	and	r24, r24
    1092:	59 f0       	breq	.+22     	; 0x10aa <main+0x6d0>
					mAccess = 1;
    1094:	70 92 88 01 	sts	0x0188, r7	; 0x800188 <mAccess>
					dMode = 2;
    1098:	20 92 73 01 	sts	0x0173, r2	; 0x800173 <dMode>
					mVar = 1;
    109c:	70 92 71 01 	sts	0x0171, r7	; 0x800171 <mVar>
					resetPsw(tmpPassword);
    10a0:	8d e7       	ldi	r24, 0x7D	; 125
    10a2:	91 e0       	ldi	r25, 0x01	; 1
    10a4:	0e 94 40 03 	call	0x680	; 0x680 <resetPsw>
    10a8:	0a c0       	rjmp	.+20     	; 0x10be <main+0x6e4>
					} else {
					pswError = 1;
    10aa:	70 92 87 01 	sts	0x0187, r7	; 0x800187 <pswError>
					mAccess = 0;
    10ae:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <mAccess>
					mVar = 0;
    10b2:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <mVar>
					resetPsw(tmpPassword);
    10b6:	8d e7       	ldi	r24, 0x7D	; 125
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 40 03 	call	0x680	; 0x680 <resetPsw>
    10be:	bf ef       	ldi	r27, 0xFF	; 255
    10c0:	ef e7       	ldi	r30, 0x7F	; 127
    10c2:	f4 e0       	ldi	r31, 0x04	; 4
    10c4:	b1 50       	subi	r27, 0x01	; 1
    10c6:	e0 40       	sbci	r30, 0x00	; 0
    10c8:	f0 40       	sbci	r31, 0x00	; 0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <main+0x6ea>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <main+0x6f4>
    10ce:	00 00       	nop
    10d0:	33 cd       	rjmp	.-1434   	; 0xb38 <main+0x15e>
				if (!subMenu) {
					// switch between sub menus
					mMode = (mMode + 1) % 3;
					} else if (!mSelect) {
					// change sub menu items 0 = var, 1 = mode, 2 = alarm
					mVar = (mVar + 1) % (mMode == 0 ? 4 :  mMode == 1 ? 3 : 5);
    10d2:	b6 01       	movw	r22, r12
    10d4:	0e 94 24 09 	call	0x1248	; 0x1248 <__divmodhi4>
    10d8:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mVar>
					// mode changes directly
					if (mMode == 1) modeSelect = mVar;
    10dc:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <modeSelect>
    10e0:	ee cf       	rjmp	.-36     	; 0x10be <main+0x6e4>
				if (!subMenu) {
					// switch between sub menus
					mMode = (mMode + 1) % 3;
					} else if (!mSelect) {
					// change sub menu items 0 = var, 1 = mode, 2 = alarm
					mVar = (mVar + 1) % (mMode == 0 ? 4 :  mMode == 1 ? 3 : 5);
    10e2:	65 2d       	mov	r22, r5
    10e4:	76 2d       	mov	r23, r6
    10e6:	0e 94 24 09 	call	0x1248	; 0x1248 <__divmodhi4>
    10ea:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mVar>
    10ee:	e7 cf       	rjmp	.-50     	; 0x10be <main+0x6e4>

000010f0 <__vector_19>:

/*
** ISR
*/

ISR(TIMER0_COMP_vect) {
    10f0:	1f 92       	push	r1
    10f2:	0f 92       	push	r0
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	writeOnLCD();
    1112:	0e 94 cd 04 	call	0x99a	; 0x99a <writeOnLCD>
	
	if(updateLCD == 1) {
    1116:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <updateLCD>
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	d9 f4       	brne	.+54     	; 0x1154 <__vector_19+0x64>
		uint32_t temperature;

		temperature = curAvg << 8;
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <curAvg>
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e0       	ldi	r27, 0x00	; 0
		temperature >>= 9;
    112a:	07 2e       	mov	r0, r23
    112c:	79 e0       	ldi	r23, 0x09	; 9
    112e:	b6 95       	lsr	r27
    1130:	a7 95       	ror	r26
    1132:	97 95       	ror	r25
    1134:	87 95       	ror	r24
    1136:	7a 95       	dec	r23
    1138:	d1 f7       	brne	.-12     	; 0x112e <__vector_19+0x3e>
    113a:	70 2d       	mov	r23, r0
		halfCelsius = temperature & 1;
    113c:	28 2f       	mov	r18, r24
    113e:	21 70       	andi	r18, 0x01	; 1
    1140:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <halfCelsius>
		temperature >>= 1;
		temp = temperature;
    1144:	b6 95       	lsr	r27
    1146:	a7 95       	ror	r26
    1148:	97 95       	ror	r25
    114a:	87 95       	ror	r24
    114c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <temp>
		updateLCD = 0;
    1150:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <updateLCD>
	}
}
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	bf 91       	pop	r27
    115a:	af 91       	pop	r26
    115c:	9f 91       	pop	r25
    115e:	8f 91       	pop	r24
    1160:	7f 91       	pop	r23
    1162:	6f 91       	pop	r22
    1164:	5f 91       	pop	r21
    1166:	4f 91       	pop	r20
    1168:	3f 91       	pop	r19
    116a:	2f 91       	pop	r18
    116c:	0f 90       	pop	r0
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	0f 90       	pop	r0
    1172:	1f 90       	pop	r1
    1174:	18 95       	reti

00001176 <__vector_1>:

ISR(INT0_vect) {
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
	
	switch (dMode) {
    1198:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <dMode>
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	f9 f0       	breq	.+62     	; 0x11de <__vector_1+0x68>
    11a0:	28 f4       	brcc	.+10     	; 0x11ac <__vector_1+0x36>
    11a2:	88 23       	and	r24, r24
    11a4:	41 f0       	breq	.+16     	; 0x11b6 <__vector_1+0x40>
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	51 f0       	breq	.+20     	; 0x11be <__vector_1+0x48>
    11aa:	39 c0       	rjmp	.+114    	; 0x121e <__vector_1+0xa8>
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	51 f1       	breq	.+84     	; 0x1204 <__vector_1+0x8e>
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	81 f1       	breq	.+96     	; 0x1214 <__vector_1+0x9e>
    11b4:	34 c0       	rjmp	.+104    	; 0x121e <__vector_1+0xa8>
		// dMode 0 is only at the start
		// Set up password
		case 0:
		dMode = 3;
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <dMode>
		break;
    11bc:	30 c0       	rjmp	.+96     	; 0x121e <__vector_1+0xa8>
		
		// Switch between main and menu display
		case 1:
		if (alarms_mat[4] & lock) break;
    11be:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <alarms_mat+0x4>
    11c2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <lock>
    11c6:	89 23       	and	r24, r25
    11c8:	51 f5       	brne	.+84     	; 0x121e <__vector_1+0xa8>
		dMode = !mAccess ? 4 : 2;
    11ca:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <mAccess>
    11ce:	88 23       	and	r24, r24
    11d0:	11 f0       	breq	.+4      	; 0x11d6 <__vector_1+0x60>
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <__vector_1+0x62>
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <dMode>
		break;
    11dc:	20 c0       	rjmp	.+64     	; 0x121e <__vector_1+0xa8>
		case 2:
		dMode = 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <dMode>
		mAccess = !pswUse;
    11e4:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <pswUse>
    11e8:	91 11       	cpse	r25, r1
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <mAccess>
		mMode = 0;
    11f0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <mMode>
		mSelect = 0;
    11f4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <mSelect>
		subMenu = 0;
    11f8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <__data_end>
		update = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <update>
		break;
    1202:	0d c0       	rjmp	.+26     	; 0x121e <__vector_1+0xa8>
		
		// After password go to main display
		case 3:
		if (pswSet) dMode = 1;
    1204:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <pswSet>
    1208:	88 23       	and	r24, r24
    120a:	49 f0       	breq	.+18     	; 0x121e <__vector_1+0xa8>
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <dMode>
    1212:	05 c0       	rjmp	.+10     	; 0x121e <__vector_1+0xa8>
		break;
		
		// Exit error screen
		case 4:
		pswError = 0;
    1214:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <pswError>
		dMode = 1;
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <dMode>
		break;
	}

	writeOnLCD();
    121e:	0e 94 cd 04 	call	0x99a	; 0x99a <writeOnLCD>

	nonBlockingDebounce();
    1222:	0e 94 b9 04 	call	0x972	; 0x972 <nonBlockingDebounce>
}
    1226:	ff 91       	pop	r31
    1228:	ef 91       	pop	r30
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__divmodhi4>:
    1248:	97 fb       	bst	r25, 7
    124a:	07 2e       	mov	r0, r23
    124c:	16 f4       	brtc	.+4      	; 0x1252 <__divmodhi4+0xa>
    124e:	00 94       	com	r0
    1250:	07 d0       	rcall	.+14     	; 0x1260 <__divmodhi4_neg1>
    1252:	77 fd       	sbrc	r23, 7
    1254:	09 d0       	rcall	.+18     	; 0x1268 <__divmodhi4_neg2>
    1256:	0e 94 38 09 	call	0x1270	; 0x1270 <__udivmodhi4>
    125a:	07 fc       	sbrc	r0, 7
    125c:	05 d0       	rcall	.+10     	; 0x1268 <__divmodhi4_neg2>
    125e:	3e f4       	brtc	.+14     	; 0x126e <__divmodhi4_exit>

00001260 <__divmodhi4_neg1>:
    1260:	90 95       	com	r25
    1262:	81 95       	neg	r24
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	08 95       	ret

00001268 <__divmodhi4_neg2>:
    1268:	70 95       	com	r23
    126a:	61 95       	neg	r22
    126c:	7f 4f       	sbci	r23, 0xFF	; 255

0000126e <__divmodhi4_exit>:
    126e:	08 95       	ret

00001270 <__udivmodhi4>:
    1270:	aa 1b       	sub	r26, r26
    1272:	bb 1b       	sub	r27, r27
    1274:	51 e1       	ldi	r21, 0x11	; 17
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <__udivmodhi4_ep>

00001278 <__udivmodhi4_loop>:
    1278:	aa 1f       	adc	r26, r26
    127a:	bb 1f       	adc	r27, r27
    127c:	a6 17       	cp	r26, r22
    127e:	b7 07       	cpc	r27, r23
    1280:	10 f0       	brcs	.+4      	; 0x1286 <__udivmodhi4_ep>
    1282:	a6 1b       	sub	r26, r22
    1284:	b7 0b       	sbc	r27, r23

00001286 <__udivmodhi4_ep>:
    1286:	88 1f       	adc	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	5a 95       	dec	r21
    128c:	a9 f7       	brne	.-22     	; 0x1278 <__udivmodhi4_loop>
    128e:	80 95       	com	r24
    1290:	90 95       	com	r25
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	08 95       	ret

00001298 <__itoa_ncheck>:
    1298:	bb 27       	eor	r27, r27
    129a:	4a 30       	cpi	r20, 0x0A	; 10
    129c:	31 f4       	brne	.+12     	; 0x12aa <__itoa_ncheck+0x12>
    129e:	99 23       	and	r25, r25
    12a0:	22 f4       	brpl	.+8      	; 0x12aa <__itoa_ncheck+0x12>
    12a2:	bd e2       	ldi	r27, 0x2D	; 45
    12a4:	90 95       	com	r25
    12a6:	81 95       	neg	r24
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__utoa_common>

000012ae <__utoa_ncheck>:
    12ae:	bb 27       	eor	r27, r27

000012b0 <__utoa_common>:
    12b0:	fb 01       	movw	r30, r22
    12b2:	55 27       	eor	r21, r21
    12b4:	aa 27       	eor	r26, r26
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	aa 1f       	adc	r26, r26
    12bc:	a4 17       	cp	r26, r20
    12be:	10 f0       	brcs	.+4      	; 0x12c4 <__utoa_common+0x14>
    12c0:	a4 1b       	sub	r26, r20
    12c2:	83 95       	inc	r24
    12c4:	50 51       	subi	r21, 0x10	; 16
    12c6:	b9 f7       	brne	.-18     	; 0x12b6 <__utoa_common+0x6>
    12c8:	a0 5d       	subi	r26, 0xD0	; 208
    12ca:	aa 33       	cpi	r26, 0x3A	; 58
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <__utoa_common+0x20>
    12ce:	a9 5d       	subi	r26, 0xD9	; 217
    12d0:	a1 93       	st	Z+, r26
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	79 f7       	brne	.-34     	; 0x12b4 <__utoa_common+0x4>
    12d6:	b1 11       	cpse	r27, r1
    12d8:	b1 93       	st	Z+, r27
    12da:	11 92       	st	Z+, r1
    12dc:	cb 01       	movw	r24, r22
    12de:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <strrev>

000012e2 <strrev>:
    12e2:	dc 01       	movw	r26, r24
    12e4:	fc 01       	movw	r30, r24
    12e6:	67 2f       	mov	r22, r23
    12e8:	71 91       	ld	r23, Z+
    12ea:	77 23       	and	r23, r23
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <strrev+0x4>
    12ee:	32 97       	sbiw	r30, 0x02	; 2
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <strrev+0x18>
    12f2:	7c 91       	ld	r23, X
    12f4:	6d 93       	st	X+, r22
    12f6:	70 83       	st	Z, r23
    12f8:	62 91       	ld	r22, -Z
    12fa:	ae 17       	cp	r26, r30
    12fc:	bf 07       	cpc	r27, r31
    12fe:	c8 f3       	brcs	.-14     	; 0x12f2 <strrev+0x10>
    1300:	08 95       	ret

00001302 <_exit>:
    1302:	f8 94       	cli

00001304 <__stop_program>:
    1304:	ff cf       	rjmp	.-2      	; 0x1304 <__stop_program>
