
Temp_control_mcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000008ae  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008000cc  008000cc  000009ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b3  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fd  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0b  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ed  00000000  00000000  00003344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078c  00000000  00000000  00003831  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003fbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_1>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_19>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	74 65       	ori	r23, 0x54	; 84
  56:	6d 70       	andi	r22, 0x0D	; 13
  58:	2e 20       	and	r2, r14
  5a:	63 6f       	ori	r22, 0xF3	; 243
  5c:	6e 74       	andi	r22, 0x4E	; 78
  5e:	72 6f       	ori	r23, 0xF2	; 242
  60:	6c 00       	.word	0x006c	; ????

00000062 <__c.2054>:
  62:	57 65 6c 63 6f 6d 65 20 74 6f 00 00                 Welcome to..

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf e5       	ldi	r28, 0x5F	; 95
  74:	d4 e0       	ldi	r29, 0x04	; 4
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	10 e0       	ldi	r17, 0x00	; 0
  7c:	a0 e6       	ldi	r26, 0x60	; 96
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	ee ea       	ldi	r30, 0xAE	; 174
  82:	f8 e0       	ldi	r31, 0x08	; 8
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	ac 3c       	cpi	r26, 0xCC	; 204
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	ac ec       	ldi	r26, 0xCC	; 204
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a7 3e       	cpi	r26, 0xE7	; 231
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
  a0:	0e 94 6d 03 	call	0x6da	; 0x6da <main>
  a4:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <toggle_e>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
  ac:	d8 9a       	sbi	0x1b, 0	; 27
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <toggle_e+0x4>
  b0:	d8 98       	cbi	0x1b, 0	; 27
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	da 9a       	sbi	0x1b, 2	; 27
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	da 98       	cbi	0x1b, 2	; 27
  c2:	d9 98       	cbi	0x1b, 1	; 27
  c4:	d7 9a       	sbi	0x1a, 7	; 26
  c6:	d6 9a       	sbi	0x1a, 6	; 26
  c8:	d5 9a       	sbi	0x1a, 5	; 26
  ca:	d4 9a       	sbi	0x1a, 4	; 26
  cc:	dc 98       	cbi	0x1b, 4	; 27
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	de 98       	cbi	0x1b, 6	; 27
  d2:	df 98       	cbi	0x1b, 7	; 27
  d4:	cc 23       	and	r28, r28
  d6:	0c f4       	brge	.+2      	; 0xda <lcd_write+0x26>
  d8:	dc 9a       	sbi	0x1b, 4	; 27
  da:	c6 fd       	sbrc	r28, 6
  dc:	dd 9a       	sbi	0x1b, 5	; 27
  de:	c5 fd       	sbrc	r28, 5
  e0:	de 9a       	sbi	0x1b, 6	; 27
  e2:	c4 fd       	sbrc	r28, 4
  e4:	df 9a       	sbi	0x1b, 7	; 27
  e6:	0e 94 56 00 	call	0xac	; 0xac <toggle_e>
  ea:	dc 98       	cbi	0x1b, 4	; 27
  ec:	dd 98       	cbi	0x1b, 5	; 27
  ee:	de 98       	cbi	0x1b, 6	; 27
  f0:	df 98       	cbi	0x1b, 7	; 27
  f2:	c3 fd       	sbrc	r28, 3
  f4:	dc 9a       	sbi	0x1b, 4	; 27
  f6:	c2 fd       	sbrc	r28, 2
  f8:	dd 9a       	sbi	0x1b, 5	; 27
  fa:	c1 fd       	sbrc	r28, 1
  fc:	de 9a       	sbi	0x1b, 6	; 27
  fe:	c0 fd       	sbrc	r28, 0
 100:	df 9a       	sbi	0x1b, 7	; 27
 102:	0e 94 56 00 	call	0xac	; 0xac <toggle_e>
 106:	df 9a       	sbi	0x1b, 7	; 27
 108:	de 9a       	sbi	0x1b, 6	; 27
 10a:	dd 9a       	sbi	0x1b, 5	; 27
 10c:	dc 9a       	sbi	0x1b, 4	; 27
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <lcd_read>:
 112:	88 23       	and	r24, r24
 114:	11 f0       	breq	.+4      	; 0x11a <lcd_read+0x8>
 116:	da 9a       	sbi	0x1b, 2	; 27
 118:	01 c0       	rjmp	.+2      	; 0x11c <lcd_read+0xa>
 11a:	da 98       	cbi	0x1b, 2	; 27
 11c:	d9 9a       	sbi	0x1b, 1	; 27
 11e:	d7 98       	cbi	0x1a, 7	; 26
 120:	d6 98       	cbi	0x1a, 6	; 26
 122:	d5 98       	cbi	0x1a, 5	; 26
 124:	d4 98       	cbi	0x1a, 4	; 26
 126:	d8 9a       	sbi	0x1b, 0	; 27
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_read+0x18>
 12a:	89 b3       	in	r24, 0x19	; 25
 12c:	88 1f       	adc	r24, r24
 12e:	88 27       	eor	r24, r24
 130:	88 1f       	adc	r24, r24
 132:	82 95       	swap	r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	ce 99       	sbic	0x19, 6	; 25
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	cd 99       	sbic	0x19, 5	; 25
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	cc 99       	sbic	0x19, 4	; 25
 140:	80 68       	ori	r24, 0x80	; 128
 142:	d8 98       	cbi	0x1b, 0	; 27
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_read+0x34>
 146:	d8 9a       	sbi	0x1b, 0	; 27
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_read+0x38>
 14a:	cf 99       	sbic	0x19, 7	; 25
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	ce 99       	sbic	0x19, 6	; 25
 150:	82 60       	ori	r24, 0x02	; 2
 152:	cd 99       	sbic	0x19, 5	; 25
 154:	84 60       	ori	r24, 0x04	; 4
 156:	cc 99       	sbic	0x19, 4	; 25
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	d8 98       	cbi	0x1b, 0	; 27
 15c:	08 95       	ret

0000015e <lcd_waitbusy>:
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 89 00 	call	0x112	; 0x112 <lcd_read>
 164:	88 23       	and	r24, r24
 166:	dc f3       	brlt	.-10     	; 0x15e <lcd_waitbusy>
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_waitbusy+0xe>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 89 00 	call	0x112	; 0x112 <lcd_read>
 176:	08 95       	ret

00000178 <lcd_command>:
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
 17c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
 180:	60 e0       	ldi	r22, 0x00	; 0
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_gotoxy>:
 18c:	61 11       	cpse	r22, r1
 18e:	04 c0       	rjmp	.+8      	; 0x198 <lcd_gotoxy+0xc>
 190:	80 58       	subi	r24, 0x80	; 128
 192:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
 196:	08 95       	ret
 198:	80 54       	subi	r24, 0x40	; 64
 19a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
 19e:	08 95       	ret

000001a0 <lcd_clrscr>:
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
 1a6:	08 95       	ret

000001a8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 1ac:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_waitbusy>
    if (c=='\n')
 1b0:	ca 30       	cpi	r28, 0x0A	; 10
 1b2:	49 f4       	brne	.+18     	; 0x1c6 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 1b4:	80 34       	cpi	r24, 0x40	; 64
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <lcd_putc+0x16>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 1bc:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 1be:	80 58       	subi	r24, 0x80	; 128
 1c0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	8c 2f       	mov	r24, r28
 1ca:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
    }

}/* lcd_putc */
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 1d6:	ec 01       	movw	r28, r24
 1d8:	21 96       	adiw	r28, 0x01	; 1
 1da:	fc 01       	movw	r30, r24
 1dc:	80 81       	ld	r24, Z
 1de:	88 23       	and	r24, r24
 1e0:	29 f0       	breq	.+10     	; 0x1ec <lcd_puts+0x1a>
        lcd_putc(c);
 1e2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 1e6:	89 91       	ld	r24, Y+
 1e8:	81 11       	cpse	r24, r1
 1ea:	fb cf       	rjmp	.-10     	; 0x1e2 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	08 95       	ret

000001f2 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 1f6:	ec 01       	movw	r28, r24
 1f8:	21 96       	adiw	r28, 0x01	; 1
 1fa:	fc 01       	movw	r30, r24
 1fc:	84 91       	lpm	r24, Z
 1fe:	88 23       	and	r24, r24
 200:	39 f0       	breq	.+14     	; 0x210 <lcd_puts_p+0x1e>
        lcd_putc(c);
 202:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 206:	fe 01       	movw	r30, r28
 208:	84 91       	lpm	r24, Z
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	81 11       	cpse	r24, r1
 20e:	f9 cf       	rjmp	.-14     	; 0x202 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 21e:	d2 9a       	sbi	0x1a, 2	; 26
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 220:	d1 9a       	sbi	0x1a, 1	; 26
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 222:	d0 9a       	sbi	0x1a, 0	; 26
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 224:	d7 9a       	sbi	0x1a, 7	; 26
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 226:	d6 9a       	sbi	0x1a, 6	; 26
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 228:	d5 9a       	sbi	0x1a, 5	; 26
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 22a:	d4 9a       	sbi	0x1a, 4	; 26
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22c:	80 e3       	ldi	r24, 0x30	; 48
 22e:	93 e7       	ldi	r25, 0x73	; 115
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 234:	de 9a       	sbi	0x1b, 6	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 236:	df 9a       	sbi	0x1b, 7	; 27
    lcd_e_toggle();
 238:	0e 94 56 00 	call	0xac	; 0xac <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23c:	80 ef       	ldi	r24, 0xF0	; 240
 23e:	93 e2       	ldi	r25, 0x23	; 35
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 244:	0e 94 56 00 	call	0xac	; 0xac <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 248:	c5 e7       	ldi	r28, 0x75	; 117
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	ce 01       	movw	r24, r28
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 252:	0e 94 56 00 	call	0xac	; 0xac <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 256:	ce 01       	movw	r24, r28
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 25c:	df 98       	cbi	0x1b, 7	; 27
    lcd_e_toggle();
 25e:	0e 94 56 00 	call	0xac	; 0xac <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 262:	21 97       	sbiw	r28, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 26c:	88 e0       	ldi	r24, 0x08	; 8
 26e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 272:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 276:	86 e0       	ldi	r24, 0x06	; 6
 278:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 27c:	81 2f       	mov	r24, r17
 27e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_command>

}/* lcd_init */
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	08 95       	ret

0000028a <showTemperature>:
static uint8_t mMode = 0;
static uint8_t mVar = 1;
static uint8_t mSelect = 0;


void showTemperature() {
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	00 d0       	rcall	.+0      	; 0x290 <showTemperature+0x6>
 290:	1f 92       	push	r1
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	char tmp[3];
	tmp[0] = ' ' + temp / 10;
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	89 83       	std	Y+1, r24	; 0x01
	tmp[1] = '0' + temp % 10;
 29a:	80 e3       	ldi	r24, 0x30	; 48
 29c:	8a 83       	std	Y+2, r24	; 0x02
	tmp[2] = '\0';
 29e:	1b 82       	std	Y+3, r1	; 0x03
	lcd_puts("Temperatura: ");
 2a0:	81 e6       	ldi	r24, 0x61	; 97
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
	lcd_puts(tmp);
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
	lcd_gotoxy(0, 1);
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
	lcd_puts("Mode: ");
 2b8:	8f e6       	ldi	r24, 0x6F	; 111
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
	lcd_puts(mode[mSelect]);
 2c0:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <__data_end>
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	e5 52       	subi	r30, 0x25	; 37
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	80 81       	ld	r24, Z
 2d0:	91 81       	ldd	r25, Z+1	; 0x01
 2d2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
}
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <showMsg>:

// Starting message
void showMsg() {
	lcd_clrscr();
 2e2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>
	lcd_gotoxy(3, 0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
	lcd_puts_P("Welcome to");
 2ee:	82 e6       	ldi	r24, 0x62	; 98
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_puts_p>
	lcd_gotoxy(1, 1);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
	lcd_puts_P("temp. control");
 2fe:	84 e5       	ldi	r24, 0x54	; 84
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_puts_p>
 306:	08 95       	ret

00000308 <showMenu>:
}

void showMenu() {
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	00 d0       	rcall	.+0      	; 0x312 <showMenu+0xa>
 312:	1f 92       	push	r1
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
	lcd_putc('<');
 318:	8c e3       	ldi	r24, 0x3C	; 60
 31a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
	
	if (!subMenu){
 31e:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <subMenu>
 322:	81 11       	cpse	r24, r1
 324:	7f c0       	rjmp	.+254    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		switch (mMode) {
 326:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <mMode>
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	21 f1       	breq	.+72     	; 0x376 <showMenu+0x6e>
 32e:	30 f0       	brcs	.+12     	; 0x33c <showMenu+0x34>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	f1 f1       	breq	.+124    	; 0x3b0 <showMenu+0xa8>
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	09 f4       	brne	.+2      	; 0x33a <showMenu+0x32>
 338:	58 c0       	rjmp	.+176    	; 0x3ea <showMenu+0xe2>
 33a:	41 c1       	rjmp	.+642    	; 0x5be <__stack+0x15f>
			case 0:
			lcd_gotoxy((16 - strlen(menu[mMode])) / 2, 0);
 33c:	e0 91 d3 00 	lds	r30, 0x00D3	; 0x8000d3 <menu>
 340:	f0 91 d4 00 	lds	r31, 0x00D4	; 0x8000d4 <menu+0x1>
 344:	df 01       	movw	r26, r30
 346:	0d 90       	ld	r0, X+
 348:	00 20       	and	r0, r0
 34a:	e9 f7       	brne	.-6      	; 0x346 <showMenu+0x3e>
 34c:	cf 01       	movw	r24, r30
 34e:	8a 1b       	sub	r24, r26
 350:	9b 0b       	sbc	r25, r27
 352:	41 96       	adiw	r24, 0x11	; 17
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_puts(menu[mMode]);
 35e:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <mMode>
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ed 52       	subi	r30, 0x2D	; 45
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	80 81       	ld	r24, Z
 36e:	91 81       	ldd	r25, Z+1	; 0x01
 370:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
			break;
 374:	24 c1       	rjmp	.+584    	; 0x5be <__stack+0x15f>
			case 1:
			lcd_gotoxy((16 - strlen(menu[mMode])) / 2, 0);
 376:	e0 91 d5 00 	lds	r30, 0x00D5	; 0x8000d5 <menu+0x2>
 37a:	f0 91 d6 00 	lds	r31, 0x00D6	; 0x8000d6 <menu+0x3>
 37e:	df 01       	movw	r26, r30
 380:	0d 90       	ld	r0, X+
 382:	00 20       	and	r0, r0
 384:	e9 f7       	brne	.-6      	; 0x380 <showMenu+0x78>
 386:	cf 01       	movw	r24, r30
 388:	8a 1b       	sub	r24, r26
 38a:	9b 0b       	sbc	r25, r27
 38c:	41 96       	adiw	r24, 0x11	; 17
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_puts(menu[mMode]);
 398:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <mMode>
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ed 52       	subi	r30, 0x2D	; 45
 3a4:	ff 4f       	sbci	r31, 0xFF	; 255
 3a6:	80 81       	ld	r24, Z
 3a8:	91 81       	ldd	r25, Z+1	; 0x01
 3aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
			break;
 3ae:	07 c1       	rjmp	.+526    	; 0x5be <__stack+0x15f>
			case 2:
			lcd_gotoxy((16 - strlen(menu[mMode])) / 2, 0);
 3b0:	e0 91 d7 00 	lds	r30, 0x00D7	; 0x8000d7 <menu+0x4>
 3b4:	f0 91 d8 00 	lds	r31, 0x00D8	; 0x8000d8 <menu+0x5>
 3b8:	df 01       	movw	r26, r30
 3ba:	0d 90       	ld	r0, X+
 3bc:	00 20       	and	r0, r0
 3be:	e9 f7       	brne	.-6      	; 0x3ba <showMenu+0xb2>
 3c0:	cf 01       	movw	r24, r30
 3c2:	8a 1b       	sub	r24, r26
 3c4:	9b 0b       	sbc	r25, r27
 3c6:	41 96       	adiw	r24, 0x11	; 17
 3c8:	96 95       	lsr	r25
 3ca:	87 95       	ror	r24
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_puts(menu[mMode]);
 3d2:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <mMode>
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	ed 52       	subi	r30, 0x2D	; 45
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
			break;
 3e8:	ea c0       	rjmp	.+468    	; 0x5be <__stack+0x15f>
			case 3:
			lcd_gotoxy((16 - strlen(menu[mMode])) / 2, 0);
 3ea:	e0 91 d9 00 	lds	r30, 0x00D9	; 0x8000d9 <menu+0x6>
 3ee:	f0 91 da 00 	lds	r31, 0x00DA	; 0x8000da <menu+0x7>
 3f2:	df 01       	movw	r26, r30
 3f4:	0d 90       	ld	r0, X+
 3f6:	00 20       	and	r0, r0
 3f8:	e9 f7       	brne	.-6      	; 0x3f4 <showMenu+0xec>
 3fa:	cf 01       	movw	r24, r30
 3fc:	8a 1b       	sub	r24, r26
 3fe:	9b 0b       	sbc	r25, r27
 400:	41 96       	adiw	r24, 0x11	; 17
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_puts(menu[mMode]);
 40c:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <mMode>
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	ed 52       	subi	r30, 0x2D	; 45
 418:	ff 4f       	sbci	r31, 0xFF	; 255
 41a:	80 81       	ld	r24, Z
 41c:	91 81       	ldd	r25, Z+1	; 0x01
 41e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
			break;
 422:	cd c0       	rjmp	.+410    	; 0x5be <__stack+0x15f>
		}
	}else {
		switch (mVar) {
 424:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	21 f0       	breq	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 42c:	82 30       	cpi	r24, 0x02	; 2
 42e:	09 f4       	brne	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 430:	64 c0       	rjmp	.+200    	; 0x4fa <__stack+0x9b>
 432:	c5 c0       	rjmp	.+394    	; 0x5be <__stack+0x15f>
			case 1:
			lcd_gotoxy((16 - strlen(variables[mVar - 1])) / 2, 0);
 434:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <variables>
 438:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <variables+0x1>
 43c:	df 01       	movw	r26, r30
 43e:	0d 90       	ld	r0, X+
 440:	00 20       	and	r0, r0
 442:	e9 f7       	brne	.-6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 444:	cf 01       	movw	r24, r30
 446:	8a 1b       	sub	r24, r26
 448:	9b 0b       	sbc	r25, r27
 44a:	41 96       	adiw	r24, 0x11	; 17
 44c:	96 95       	lsr	r25
 44e:	87 95       	ror	r24
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_puts(variables[mVar - 1]);
 456:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	ee 0f       	add	r30, r30
 45e:	ff 1f       	adc	r31, r31
 460:	ef 51       	subi	r30, 0x1F	; 31
 462:	ff 4f       	sbci	r31, 0xFF	; 255
 464:	80 81       	ld	r24, Z
 466:	91 81       	ldd	r25, Z+1	; 0x01
 468:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
			
			char tmp[3];
			tmp[0] = '0' + max_temp / 10;
 46c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <max_temp>
 470:	8d ec       	ldi	r24, 0xCD	; 205
 472:	98 9f       	mul	r25, r24
 474:	81 2d       	mov	r24, r1
 476:	11 24       	eor	r1, r1
 478:	86 95       	lsr	r24
 47a:	86 95       	lsr	r24
 47c:	86 95       	lsr	r24
 47e:	20 e3       	ldi	r18, 0x30	; 48
 480:	28 0f       	add	r18, r24
 482:	29 83       	std	Y+1, r18	; 0x01
			tmp[1] = '0' + max_temp % 10;
 484:	88 0f       	add	r24, r24
 486:	28 2f       	mov	r18, r24
 488:	22 0f       	add	r18, r18
 48a:	22 0f       	add	r18, r18
 48c:	82 0f       	add	r24, r18
 48e:	98 1b       	sub	r25, r24
 490:	90 5d       	subi	r25, 0xD0	; 208
 492:	9a 83       	std	Y+2, r25	; 0x02
			tmp[2] = '\0';
 494:	1b 82       	std	Y+3, r1	; 0x03
			
			if (!mSelect) {
 496:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 49a:	81 11       	cpse	r24, r1
 49c:	14 c0       	rjmp	.+40     	; 0x4c6 <__stack+0x67>
				lcd_gotoxy((16 - strlen(tmp)) / 2, 1);
 49e:	8e 01       	movw	r16, r28
 4a0:	0f 5f       	subi	r16, 0xFF	; 255
 4a2:	1f 4f       	sbci	r17, 0xFF	; 255
 4a4:	f8 01       	movw	r30, r16
 4a6:	01 90       	ld	r0, Z+
 4a8:	00 20       	and	r0, r0
 4aa:	e9 f7       	brne	.-6      	; 0x4a6 <__stack+0x47>
 4ac:	c8 01       	movw	r24, r16
 4ae:	8e 1b       	sub	r24, r30
 4b0:	9f 0b       	sbc	r25, r31
 4b2:	41 96       	adiw	r24, 0x11	; 17
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	61 e0       	ldi	r22, 0x01	; 1
 4ba:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
				lcd_puts(tmp);
 4be:	c8 01       	movw	r24, r16
 4c0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
 4c4:	7c c0       	rjmp	.+248    	; 0x5be <__stack+0x15f>
			} else {
				lcd_gotoxy((15 - strlen(tmp)) / 2, 1);
 4c6:	8e 01       	movw	r16, r28
 4c8:	0f 5f       	subi	r16, 0xFF	; 255
 4ca:	1f 4f       	sbci	r17, 0xFF	; 255
 4cc:	f8 01       	movw	r30, r16
 4ce:	01 90       	ld	r0, Z+
 4d0:	00 20       	and	r0, r0
 4d2:	e9 f7       	brne	.-6      	; 0x4ce <__stack+0x6f>
 4d4:	c8 01       	movw	r24, r16
 4d6:	8e 1b       	sub	r24, r30
 4d8:	9f 0b       	sbc	r25, r31
 4da:	40 96       	adiw	r24, 0x10	; 16
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
				lcd_putc('<');
 4e6:	8c e3       	ldi	r24, 0x3C	; 60
 4e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
				lcd_puts(tmp);
 4ec:	c8 01       	movw	r24, r16
 4ee:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
				lcd_putc('>');
 4f2:	8e e3       	ldi	r24, 0x3E	; 62
 4f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
 4f8:	62 c0       	rjmp	.+196    	; 0x5be <__stack+0x15f>
			}
			break;
			case 2:
			lcd_gotoxy((16 - strlen(variables[mVar - 1])) / 2, 0);
 4fa:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <variables+0x2>
 4fe:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <variables+0x3>
 502:	df 01       	movw	r26, r30
 504:	0d 90       	ld	r0, X+
 506:	00 20       	and	r0, r0
 508:	e9 f7       	brne	.-6      	; 0x504 <__stack+0xa5>
 50a:	cf 01       	movw	r24, r30
 50c:	8a 1b       	sub	r24, r26
 50e:	9b 0b       	sbc	r25, r27
 510:	41 96       	adiw	r24, 0x11	; 17
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
			lcd_puts(variables[mVar - 1]);
 51c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ef 51       	subi	r30, 0x1F	; 31
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	80 81       	ld	r24, Z
 52c:	91 81       	ldd	r25, Z+1	; 0x01
 52e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
			
			//char tmp[3];
			tmp[0] = '0' + min_temp / 10;
 532:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <min_temp>
 536:	8d ec       	ldi	r24, 0xCD	; 205
 538:	98 9f       	mul	r25, r24
 53a:	81 2d       	mov	r24, r1
 53c:	11 24       	eor	r1, r1
 53e:	86 95       	lsr	r24
 540:	86 95       	lsr	r24
 542:	86 95       	lsr	r24
 544:	20 e3       	ldi	r18, 0x30	; 48
 546:	28 0f       	add	r18, r24
 548:	29 83       	std	Y+1, r18	; 0x01
			tmp[1] = '0' + min_temp % 10;
 54a:	88 0f       	add	r24, r24
 54c:	28 2f       	mov	r18, r24
 54e:	22 0f       	add	r18, r18
 550:	22 0f       	add	r18, r18
 552:	82 0f       	add	r24, r18
 554:	98 1b       	sub	r25, r24
 556:	90 5d       	subi	r25, 0xD0	; 208
 558:	9a 83       	std	Y+2, r25	; 0x02
			tmp[2] = '\0';
 55a:	1b 82       	std	Y+3, r1	; 0x03
			
			if (!mSelect) {
 55c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 560:	81 11       	cpse	r24, r1
 562:	14 c0       	rjmp	.+40     	; 0x58c <__stack+0x12d>
				lcd_gotoxy((16 - strlen(tmp)) / 2, 1);
 564:	8e 01       	movw	r16, r28
 566:	0f 5f       	subi	r16, 0xFF	; 255
 568:	1f 4f       	sbci	r17, 0xFF	; 255
 56a:	f8 01       	movw	r30, r16
 56c:	01 90       	ld	r0, Z+
 56e:	00 20       	and	r0, r0
 570:	e9 f7       	brne	.-6      	; 0x56c <__stack+0x10d>
 572:	c8 01       	movw	r24, r16
 574:	8e 1b       	sub	r24, r30
 576:	9f 0b       	sbc	r25, r31
 578:	41 96       	adiw	r24, 0x11	; 17
 57a:	96 95       	lsr	r25
 57c:	87 95       	ror	r24
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
				lcd_puts(tmp);
 584:	c8 01       	movw	r24, r16
 586:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
 58a:	19 c0       	rjmp	.+50     	; 0x5be <__stack+0x15f>
				} else {
				lcd_gotoxy((15 - strlen(tmp)) / 2, 1);
 58c:	8e 01       	movw	r16, r28
 58e:	0f 5f       	subi	r16, 0xFF	; 255
 590:	1f 4f       	sbci	r17, 0xFF	; 255
 592:	f8 01       	movw	r30, r16
 594:	01 90       	ld	r0, Z+
 596:	00 20       	and	r0, r0
 598:	e9 f7       	brne	.-6      	; 0x594 <__stack+0x135>
 59a:	c8 01       	movw	r24, r16
 59c:	8e 1b       	sub	r24, r30
 59e:	9f 0b       	sbc	r25, r31
 5a0:	40 96       	adiw	r24, 0x10	; 16
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
				lcd_putc('<');
 5ac:	8c e3       	ldi	r24, 0x3C	; 60
 5ae:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
				lcd_puts(tmp);
 5b2:	c8 01       	movw	r24, r16
 5b4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <lcd_puts>
				lcd_putc('>');
 5b8:	8e e3       	ldi	r24, 0x3E	; 62
 5ba:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
			}
			break;
		}
		
	}
	lcd_gotoxy(15, 0);
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	8f e0       	ldi	r24, 0x0F	; 15
 5c2:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_gotoxy>
	lcd_putc('>');
 5c6:	8e e3       	ldi	r24, 0x3E	; 62
 5c8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_putc>
}
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	1f 91       	pop	r17
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <writeOnLCD>:

void writeOnLCD() {
	lcd_clrscr();
 5dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>

	if (!fMode) {
 5e0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <fMode>
 5e4:	81 11       	cpse	r24, r1
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <writeOnLCD+0x12>
		showMsg();
 5e8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <showMsg>
 5ec:	08 95       	ret
	} else if (fMode == 1) {
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	19 f4       	brne	.+6      	; 0x5f8 <writeOnLCD+0x1c>
		showTemperature();
 5f2:	0e 94 45 01 	call	0x28a	; 0x28a <showTemperature>
 5f6:	08 95       	ret
	} else {
		showMenu();	
 5f8:	0e 94 84 01 	call	0x308	; 0x308 <showMenu>
 5fc:	08 95       	ret

000005fe <__vector_19>:
	}
}

ISR(TIMER0_COMP_vect) {
 5fe:	1f 92       	push	r1
 600:	0f 92       	push	r0
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	0f 92       	push	r0
 606:	11 24       	eor	r1, r1
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	tm++;
 620:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <tm>
 624:	8f 5f       	subi	r24, 0xFF	; 255

	if (tm == 100) {
 626:	84 36       	cpi	r24, 0x64	; 100
 628:	19 f0       	breq	.+6      	; 0x630 <__vector_19+0x32>
		showMenu();	
	}
}

ISR(TIMER0_COMP_vect) {
	tm++;
 62a:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <tm>
 62e:	04 c0       	rjmp	.+8      	; 0x638 <__vector_19+0x3a>

	if (tm == 100) {
		tm = 0;
 630:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <tm>
		writeOnLCD();
 634:	0e 94 ee 02 	call	0x5dc	; 0x5dc <writeOnLCD>
	}
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	7f 91       	pop	r23
 646:	6f 91       	pop	r22
 648:	5f 91       	pop	r21
 64a:	4f 91       	pop	r20
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	0f 90       	pop	r0
 652:	0f be       	out	0x3f, r0	; 63
 654:	0f 90       	pop	r0
 656:	1f 90       	pop	r1
 658:	18 95       	reti

0000065a <nonBlockingDebounce>:

void nonBlockingDebounce() {
	GICR &= ~_BV(INT0);
 65a:	8b b7       	in	r24, 0x3b	; 59
 65c:	8f 7b       	andi	r24, 0xBF	; 191
 65e:	8b bf       	out	0x3b, r24	; 59
	sei();
 660:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	8f e3       	ldi	r24, 0x3F	; 63
 666:	9b e0       	ldi	r25, 0x0B	; 11
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <nonBlockingDebounce+0xe>
 670:	00 c0       	rjmp	.+0      	; 0x672 <nonBlockingDebounce+0x18>
 672:	00 00       	nop

	_delay_ms(500);
	GIFR = _BV(INTF0);
 674:	80 e4       	ldi	r24, 0x40	; 64
 676:	8a bf       	out	0x3a, r24	; 58
	GICR |= _BV(INT0);
 678:	8b b7       	in	r24, 0x3b	; 59
 67a:	80 64       	ori	r24, 0x40	; 64
 67c:	8b bf       	out	0x3b, r24	; 59

	cli();
 67e:	f8 94       	cli
 680:	08 95       	ret

00000682 <__vector_1>:
}

ISR(INT0_vect) {
 682:	1f 92       	push	r1
 684:	0f 92       	push	r0
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	0f 92       	push	r0
 68a:	11 24       	eor	r1, r1
 68c:	2f 93       	push	r18
 68e:	3f 93       	push	r19
 690:	4f 93       	push	r20
 692:	5f 93       	push	r21
 694:	6f 93       	push	r22
 696:	7f 93       	push	r23
 698:	8f 93       	push	r24
 69a:	9f 93       	push	r25
 69c:	af 93       	push	r26
 69e:	bf 93       	push	r27
 6a0:	ef 93       	push	r30
 6a2:	ff 93       	push	r31
	//fMode 0 is only at the start
	fMode = 1 + (fMode % 2);
 6a4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <fMode>
 6a8:	81 70       	andi	r24, 0x01	; 1
 6aa:	8f 5f       	subi	r24, 0xFF	; 255
 6ac:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <fMode>

	writeOnLCD();
 6b0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <writeOnLCD>

	nonBlockingDebounce();
 6b4:	0e 94 2d 03 	call	0x65a	; 0x65a <nonBlockingDebounce>
}
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	7f 91       	pop	r23
 6c6:	6f 91       	pop	r22
 6c8:	5f 91       	pop	r21
 6ca:	4f 91       	pop	r20
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <main>:

int main(void)
{
	// Setting menu items
	menu[0] = "Variables";
 6da:	e3 ed       	ldi	r30, 0xD3	; 211
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	86 e7       	ldi	r24, 0x76	; 118
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	91 83       	std	Z+1, r25	; 0x01
 6e4:	80 83       	st	Z, r24
	menu[1] = "Modes";
 6e6:	80 e8       	ldi	r24, 0x80	; 128
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	93 83       	std	Z+3, r25	; 0x03
 6ec:	82 83       	std	Z+2, r24	; 0x02
	menu[2] = "Test_menu";
 6ee:	86 e8       	ldi	r24, 0x86	; 134
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	95 83       	std	Z+5, r25	; 0x05
 6f4:	84 83       	std	Z+4, r24	; 0x04
	menu[3] = "Test_menu.";
 6f6:	80 e9       	ldi	r24, 0x90	; 144
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	97 83       	std	Z+7, r25	; 0x07
 6fc:	86 83       	std	Z+6, r24	; 0x06
	
	// Setting variables names
	variables[0] = "max_temp";
 6fe:	e3 ee       	ldi	r30, 0xE3	; 227
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	8b e9       	ldi	r24, 0x9B	; 155
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	91 83       	std	Z+1, r25	; 0x01
 708:	80 83       	st	Z, r24
	variables[1] = "min_temp";
 70a:	84 ea       	ldi	r24, 0xA4	; 164
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	93 83       	std	Z+3, r25	; 0x03
 710:	82 83       	std	Z+2, r24	; 0x02
	
	// Setting modes
	mode[0] = "heating";
 712:	eb ed       	ldi	r30, 0xDB	; 219
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	8d ea       	ldi	r24, 0xAD	; 173
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	91 83       	std	Z+1, r25	; 0x01
 71c:	80 83       	st	Z, r24
	mode[1] = "cooling";
 71e:	85 eb       	ldi	r24, 0xB5	; 181
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	93 83       	std	Z+3, r25	; 0x03
 724:	82 83       	std	Z+2, r24	; 0x02
	mode[2] = "balance";
 726:	8d eb       	ldi	r24, 0xBD	; 189
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	95 83       	std	Z+5, r25	; 0x05
 72c:	84 83       	std	Z+4, r24	; 0x04
	mode[3] = "test3";
 72e:	85 ec       	ldi	r24, 0xC5	; 197
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	97 83       	std	Z+7, r25	; 0x07
 734:	86 83       	std	Z+6, r24	; 0x06
	
	// First time temp variables are same as measured temp
	max_temp = min_temp = temp;
 736:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <min_temp>
 73a:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <max_temp>

	DDRA = _BV(5) | _BV(6) | _BV(7);
 73e:	80 ee       	ldi	r24, 0xE0	; 224
 740:	8a bb       	out	0x1a, r24	; 26
	PORTB = _BV(0) | _BV(1) | _BV(2);
 742:	87 e0       	ldi	r24, 0x07	; 7
 744:	88 bb       	out	0x18, r24	; 24
	DDRB = 0;
 746:	17 ba       	out	0x17, r1	; 23

	DDRD = _BV(4);
 748:	80 e1       	ldi	r24, 0x10	; 16
 74a:	81 bb       	out	0x11, r24	; 17

	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 74c:	81 e2       	ldi	r24, 0x21	; 33
 74e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 750:	8a e0       	ldi	r24, 0x0A	; 10
 752:	8e bd       	out	0x2e, r24	; 46
	OCR1B = 128;
 754:	80 e8       	ldi	r24, 0x80	; 128
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	99 bd       	out	0x29, r25	; 41
 75a:	88 bd       	out	0x28, r24	; 40

	TCCR0 = _BV(WGM01) | _BV(CS02) | _BV(CS00);
 75c:	8d e0       	ldi	r24, 0x0D	; 13
 75e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 72;
 760:	88 e4       	ldi	r24, 0x48	; 72
 762:	8c bf       	out	0x3c, r24	; 60

	TIMSK = _BV(OCIE0);
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	89 bf       	out	0x39, r24	; 57

	MCUCR = _BV(ISC01);
 768:	85 bf       	out	0x35, r24	; 53
	GICR = _BV(INT0);
 76a:	80 e4       	ldi	r24, 0x40	; 64
 76c:	8b bf       	out	0x3b, r24	; 59
	sei();
 76e:	78 94       	sei

	lcd_init(LCD_DISP_ON);
 770:	8c e0       	ldi	r24, 0x0C	; 12
 772:	0e 94 0b 01 	call	0x216	; 0x216 <lcd_init>
	lcd_clrscr();
 776:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd_clrscr>

	writeOnLCD();
 77a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <writeOnLCD>
					} else if (!mSelect) {
						mSelect = mVar;
					} else {
						switch (mVar) {
							case 1:
								if (max_temp <= 0) max_temp = 100;
 77e:	34 e6       	ldi	r19, 0x64	; 100
				case 1:
				
				break;
				case 2:
					if (!subMenu) {
						subMenu = 1;
 780:	21 e0       	ldi	r18, 0x01	; 1
	writeOnLCD();

	while (1) {
		
		// Using keys (PORTB) to control
		if (bit_is_clear(PINB, 0)) {
 782:	b0 99       	sbic	0x16, 0	; 22
 784:	40 c0       	rjmp	.+128    	; 0x806 <main+0x12c>
			switch (fMode) {
 786:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <fMode>
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	09 f0       	breq	.+2      	; 0x790 <main+0xb6>
 78e:	83 c0       	rjmp	.+262    	; 0x896 <main+0x1bc>
				case 1:
				
				break;
				case 2:
					if (!subMenu) {
 790:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <subMenu>
 794:	81 11       	cpse	r24, r1
 796:	0f c0       	rjmp	.+30     	; 0x7b6 <main+0xdc>
						mMode = (mMode + 1) % 4;
 798:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <mMode>
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	83 70       	andi	r24, 0x03	; 3
 7a2:	90 78       	andi	r25, 0x80	; 128
 7a4:	99 23       	and	r25, r25
 7a6:	24 f4       	brge	.+8      	; 0x7b0 <main+0xd6>
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	8c 6f       	ori	r24, 0xFC	; 252
 7ac:	9f 6f       	ori	r25, 0xFF	; 255
 7ae:	01 96       	adiw	r24, 0x01	; 1
 7b0:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <mMode>
 7b4:	70 c0       	rjmp	.+224    	; 0x896 <main+0x1bc>
					} else if (!mSelect) {
 7b6:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 7ba:	81 11       	cpse	r24, r1
 7bc:	07 c0       	rjmp	.+14     	; 0x7cc <main+0xf2>
						mVar = 1 + (mVar % 2);
 7be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7c2:	81 70       	andi	r24, 0x01	; 1
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 7ca:	65 c0       	rjmp	.+202    	; 0x896 <main+0x1bc>
					} else {
						switch (mVar) {
 7cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	19 f0       	breq	.+6      	; 0x7da <main+0x100>
 7d4:	82 30       	cpi	r24, 0x02	; 2
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <main+0x116>
 7d8:	5e c0       	rjmp	.+188    	; 0x896 <main+0x1bc>
							case 1:
								max_temp += 1;
 7da:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <max_temp>
 7de:	8f 5f       	subi	r24, 0xFF	; 255
								if (max_temp > 99) max_temp = 0;
 7e0:	84 36       	cpi	r24, 0x64	; 100
 7e2:	18 f4       	brcc	.+6      	; 0x7ea <main+0x110>
					} else if (!mSelect) {
						mVar = 1 + (mVar % 2);
					} else {
						switch (mVar) {
							case 1:
								max_temp += 1;
 7e4:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <max_temp>
 7e8:	56 c0       	rjmp	.+172    	; 0x896 <main+0x1bc>
								if (max_temp > 99) max_temp = 0;
 7ea:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <max_temp>
 7ee:	53 c0       	rjmp	.+166    	; 0x896 <main+0x1bc>
							break;
							case 2:
								min_temp += 1;
 7f0:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <min_temp>
 7f4:	8f 5f       	subi	r24, 0xFF	; 255
								if (min_temp > 99) min_temp = 0;
 7f6:	84 36       	cpi	r24, 0x64	; 100
 7f8:	18 f4       	brcc	.+6      	; 0x800 <main+0x126>
							case 1:
								max_temp += 1;
								if (max_temp > 99) max_temp = 0;
							break;
							case 2:
								min_temp += 1;
 7fa:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <min_temp>
 7fe:	4b c0       	rjmp	.+150    	; 0x896 <main+0x1bc>
								if (min_temp > 99) min_temp = 0;
 800:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <min_temp>
 804:	48 c0       	rjmp	.+144    	; 0x896 <main+0x1bc>
				break;
				case 3:
				
				break;
			}
		} else if (bit_is_clear(PINB, 1)) {
 806:	b1 99       	sbic	0x16, 1	; 22
 808:	34 c0       	rjmp	.+104    	; 0x872 <main+0x198>
			switch (fMode) {
 80a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <fMode>
 80e:	82 30       	cpi	r24, 0x02	; 2
 810:	09 f0       	breq	.+2      	; 0x814 <main+0x13a>
 812:	41 c0       	rjmp	.+130    	; 0x896 <main+0x1bc>
				case 1:
				
				break;
				case 2:
					if (!subMenu) {
 814:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <subMenu>
 818:	81 11       	cpse	r24, r1
 81a:	03 c0       	rjmp	.+6      	; 0x822 <main+0x148>
						subMenu = 1;
 81c:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <subMenu>
 820:	3a c0       	rjmp	.+116    	; 0x896 <main+0x1bc>
					} else if (!mSelect) {
 822:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 826:	81 11       	cpse	r24, r1
 828:	05 c0       	rjmp	.+10     	; 0x834 <main+0x15a>
						mSelect = mVar;
 82a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 82e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
 832:	31 c0       	rjmp	.+98     	; 0x896 <main+0x1bc>
					} else {
						switch (mVar) {
 834:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	19 f0       	breq	.+6      	; 0x842 <main+0x168>
 83c:	82 30       	cpi	r24, 0x02	; 2
 83e:	69 f0       	breq	.+26     	; 0x85a <main+0x180>
 840:	2a c0       	rjmp	.+84     	; 0x896 <main+0x1bc>
							case 1:
								if (max_temp <= 0) max_temp = 100;
 842:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <max_temp>
 846:	81 11       	cpse	r24, r1
 848:	02 c0       	rjmp	.+4      	; 0x84e <main+0x174>
 84a:	30 93 d0 00 	sts	0x00D0, r19	; 0x8000d0 <max_temp>
								max_temp -= 1;
 84e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <max_temp>
 852:	81 50       	subi	r24, 0x01	; 1
 854:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <max_temp>
							break;
 858:	1e c0       	rjmp	.+60     	; 0x896 <main+0x1bc>
							case 2:
								if (min_temp <= 0) min_temp = 100;
 85a:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <min_temp>
 85e:	81 11       	cpse	r24, r1
 860:	02 c0       	rjmp	.+4      	; 0x866 <main+0x18c>
 862:	30 93 cf 00 	sts	0x00CF, r19	; 0x8000cf <min_temp>
								min_temp -= 1;
 866:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <min_temp>
 86a:	81 50       	subi	r24, 0x01	; 1
 86c:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <min_temp>
							break;
 870:	12 c0       	rjmp	.+36     	; 0x896 <main+0x1bc>
				break;
				case 3:
				
				break;
			}
		} else if (bit_is_clear(PINB, 2)) {
 872:	b2 99       	sbic	0x16, 2	; 22
 874:	10 c0       	rjmp	.+32     	; 0x896 <main+0x1bc>
			switch (fMode) {
 876:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <fMode>
 87a:	82 30       	cpi	r24, 0x02	; 2
 87c:	61 f4       	brne	.+24     	; 0x896 <main+0x1bc>
				case 2:
					if (mSelect){
 87e:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 882:	88 23       	and	r24, r24
 884:	19 f0       	breq	.+6      	; 0x88c <main+0x1b2>
						mSelect = 0;
 886:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__data_end>
 88a:	05 c0       	rjmp	.+10     	; 0x896 <main+0x1bc>
					} else if (subMenu){
 88c:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <subMenu>
 890:	81 11       	cpse	r24, r1
						subMenu = 0;
 892:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <subMenu>
 896:	4f ef       	ldi	r20, 0xFF	; 255
 898:	8f e7       	ldi	r24, 0x7F	; 127
 89a:	94 e0       	ldi	r25, 0x04	; 4
 89c:	41 50       	subi	r20, 0x01	; 1
 89e:	80 40       	sbci	r24, 0x00	; 0
 8a0:	90 40       	sbci	r25, 0x00	; 0
 8a2:	e1 f7       	brne	.-8      	; 0x89c <main+0x1c2>
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <main+0x1cc>
 8a6:	00 00       	nop
 8a8:	6c cf       	rjmp	.-296    	; 0x782 <main+0xa8>

000008aa <_exit>:
 8aa:	f8 94       	cli

000008ac <__stop_program>:
 8ac:	ff cf       	rjmp	.-2      	; 0x8ac <__stop_program>
